/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Jun 16 17:35:02 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_SRC_ESTest extends MethodWriter_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // Setup
      byte[] input = new byte[7];
      input[1] = (byte) (-124);
      
      // Execute
      int result = MethodWriter.readUnsignedShort(input, (byte) 0);
      
      // Verify
      assertEquals(132, result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Setup
      byte[] arg0 = new byte[8];
      arg0[0] = (byte) 117;
      
      // Execute
      short readShort = MethodWriter.readShort(arg0, (byte) 0);
      
      // Verify
      assertEquals((short) 29952, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      byte[] input = new byte[7];
      input[1] = (byte) (-121);
      
      // When
      short result = MethodWriter.readShort(input, 1);
      
      // Then
      assertEquals((short) (-30976), result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given
      byte[] bytes = new byte[6];
      bytes[2] = (byte) 17;
      
      // When
      int readInt = MethodWriter.readInt(bytes, 2);
      
      // Then
      assertEquals(285212672, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given
      byte[] arg0 = new byte[9];
      arg0[5] = (byte) (-5);
      
      // When
      int readInt = MethodWriter.readInt(arg0, (byte)5);
      
      // Then
      assertEquals((-83886080), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      int[] arg1 = new int[1];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 432, 432);
      assertEquals(0, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments() throws Throwable  {
      // No Comments were added
      int[] arg1 = new int[4];
      Label arg2 = new Label();
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      assertEquals(4, arg1.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4Arguments0() throws Throwable  {
      int[] arg1 = new int[2];
      arg1[1] = 1048575;
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 0, 2106);
      assertEquals(2106, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4Arguments1() throws Throwable  {
      // Given
      int[] arg1 = new int[2];
      arg1[0] = 32;
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 0, 2106);
      // When
      assertEquals(2138, newOffset);
      // Then
      // The method should return the correct new offset based on the given inputs
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      int[] arg1 = new int[1];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 432, (-2298));
      assertEquals((-2730), newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((byte) 0);
      String[] methodNames = new String[1];
      methodNames[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "9d)_=5RKwALA", "9d)_=5RKwALA", "AAw'|A)[%#;f(^:K|", methodNames, true, false);
      methodWriter.visitAnnotationDefault();
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(139, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-1051));
      String[] methodNames = new String[1];
      methodNames[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1051), "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", methodNames, false, false);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(135, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-289));
      String[] arg5 = new String[1];
      arg5[0] = "(|z";
      classWriter.visit((-289), 4, "RuntieInvisiblAnnotat&ons", "(|z", "(|z", arg5);
      MethodWriter methodWriter = new MethodWriter(classWriter, 4096, "xhH", "(|z", "rW},*yl@H&{OX<", arg5, false, false);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(148, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitIntInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(127);
      arg0.version = 127;
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "StackMapTble", "StackMapTble", "Signature", arg4, false, false);
      methodWriter.visitIntInsn(1, 127);
      methodWriter.visitFrame(127, 1, arg4, 2, arg4);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(118, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumber() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(670);
      MethodWriter methodWriter = new MethodWriter(arg0, 670, "Deprecated", "4hI9F)SI33iBzgFN", ".jar", (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(2, arg1);
      methodWriter.visitJumpInsn(1861, arg1);
      int size = methodWriter.getSize();
      assertEquals(49, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-282), "Deprecated", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, true);
      Label arg4 = new Label();
      methodWriter.visitIntInsn(1, (-282));
      methodWriter.visitLocalVariable("AAw'|A)[%#;f(^:K|", "fUt;Nh/", "cM", arg4, arg4, (-282));
      int size = methodWriter.getSize();
      assertEquals(94, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnWithNegativeAndPositive0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(161);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "~%'", "~%'", "~%'", arg5, false, false);
      methodWriter.visitVarInsn((-121), 372);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(87, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      MethodWriter methodWriter = new MethodWriter(arg0, 187, "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", (String[]) null, false, false);
      methodWriter.classReaderOffset = 1204;
      // Undeclared exception!
      try { 
        arg0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter3() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((byte) 0);
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "AAw'|A)[%#;f(^:K|", "bM~|hz", (String) null, (String[]) null, false, false);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(61, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerException() throws Throwable  {
      // Setup
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg2 = new String[5];
      arg2[0] = "AnnotationDefault";
      arg2[1] = "AnnotationDefault";
      arg2[2] = "AnnotationDefault";
      arg2[3] = "AnnotationDefault";
      arg2[4] = "AnnotationDefault";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AnnotationDefault", "AnnotationDefault", "AnnotationDefault", arg2, false, false);
      Object[] arg4 = new Object[1];
      
      // Execution
      try {
      methodWriter.visitFrame(0, 1, arg2, 182, arg4);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
      
      // Verification
      // ...
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxs() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;(X^:w6K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;(X^:w6K|", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitMaxs(168, 2);
      methodWriter.visitMaxs(1133, 168);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMaxs0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 1133, "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitMaxs(1133, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithNegativeAndNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "4Z)JZ9FdS", "4Z)JZ9FdS", ">", arg5, false, true);
      methodWriter.visitMaxs((-157599528), (-1733));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMaxs1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "q+3#\u0002p5*s", "q+3#\u0002p5*s", "q+3#\u0002p5*s", arg5, false, false);
      methodWriter.visitMaxs(327, 327);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumberWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(670);
      MethodWriter methodWriter = new MethodWriter(arg0, 670, "Deprecated", "4hI9F)SI33iBzgFN", ".jar", (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(2, arg1);
      methodWriter.visitLineNumber((-3727), arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AMw'|A)[%#;f(y]^N2";
      Label arg4 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "AMw'|A)[%#;f(y]^N2", "AMw'|A)[%#;f(y]^N2", "x", arg5, true, true);
      methodWriter.visitLocalVariable("AMw'|A)[%#;f(y]^N2", "E1whfY;19jmU8cigW", "AMw'|A)[%#;f(y]^N2", arg4, arg4, 2);
      methodWriter.visitLocalVariable("E1whfY;19jmU8cigW", "RuntimeInvisibleAnnotations", "CG8aiaC#TuK&X z", arg4, arg4, 248);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "9d)_=YRKnALA";
      Label arg4 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", "9d)_=YRKnALA", arg5, true, false);
      methodWriter.visitLocalVariable("@&]}KBRs/", "J?4[y[_L;I)M-jNZAj", "@&]}KBRs/", arg4, arg4, (-1199));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      Label arg4 = new Label();
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTypeTable", "EnclosingMethod", "LocalVariableTypeTable", (String[]) null, false, false);
      methodWriter.visitLocalVariable("E1whfY;19jmU8cigW", "AAw'|A)[%#;f(^:K|", (String) null, arg4, arg4, (-1848772804));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlock() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-282), ".jar", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, arg2, "RuntimeVisibleParameterAnnotations");
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsnWithPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|xGA)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "AAw'|xGA)[%#;f(^:K|", "AAw'|xGA)[%#;f(^:K|", "AAw'|xGA)[%#;f(^:K|", arg5, true, true);
      methodWriter.visitMultiANewArrayInsn("AAw'|xGA)[%#;f(^:K|", 1038);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIincInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = ":oDefp5.oQe*w";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", ":oDefp5.oQe*w", arg5, true, false);
      methodWriter.visitIincInsn(168, 168);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithNegativeAndPositive0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-282), ".jar", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, true);
      methodWriter.visitIincInsn(1, (-183));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIincInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitIincInsn(1024, 4704);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithNegativeAndPositive1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-303));
      String[] arg5 = new String[1];
      arg5[0] = "Anno9.tat.onDefault";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1091), "Anno9.tat.onDefault", "Anno9.tat.onDefault", "7p**cf^f8?~|w]`)H", arg5, false, false);
      methodWriter.visitIincInsn((-1091), 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A)w'|A)[%Nf(^K|";
      arg0.index = 753;
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A)w'|A)[%Nf(^K|", "A)w'|A)[%Nf(^K|", "A)w'|A)[%Nf(^K|", arg5, true, false);
      methodWriter.visitLdcInsn(arg0.COMPUTE_MAXS);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%N%f(^-K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "AAw'|A)[%N%f(^-K|", "AAw'|A)[%N%f(^-K|", "AAw'|A)[%N%f(^-K|", arg5, true, false);
      methodWriter.visitFieldInsn(1, "AAw'|A)[%N%f(^-K|", "AAw'|A)[%N%f(^-K|", "AAw'|A)[%N%f(^-K|");
      methodWriter.visitLdcInsn("AAw'|A)[%N%f(^-K|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "q+3#\u0002p5*s";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", "q+3#\u0002p5*s", arg5, true, true);
      methodWriter.visitLdcInsn("9d)_=YRKnALA");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      MethodWriter methodWriter = new MethodWriter(arg0, 24, "4M", "4M", (String) null, (String[]) null, false, false);
      methodWriter.visitLdcInsn("4M");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn0() throws Throwable  {
      // No Comments were added
      byte[] arg2 = new byte[4];
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A<w'|A)[%#;f(^:K|";
      Label arg1 = new Label();
      arg1.resolve((MethodWriter) null, (-1440076674), arg2);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitJumpInsn(169, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn1() throws Throwable  {
      // No Comments were added
      byte[] arg2 = new byte[3];
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A<w'|A)[%#;f(^:K|";
      Label arg1 = new Label();
      arg1.resolve((MethodWriter) null, (-1440076674), arg2);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", arg5, true, true);
      methodWriter.visitJumpInsn(22, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      Label arg1 = new Label();
      arg1.status = (-2);
      methodWriter.visitJumpInsn(168, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw4'|xGA)[%#;D^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "AAw'|A)[%#;(X^:w6K|", "AAw4'|xGA)[%#;D^:K|", "9d)_=YRKnALA", arg5, true, true);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(167, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "#Aw'|A)[%#;h(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "j-D)q", "j-D)q", "#Aw'|A)[%#;h(^:K|", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn("pc=<V;[~cl,pz32^H", (-933));
      methodWriter.visitMethodInsn(188, "mXA", "#Aw'|A)[%#;h(^:K|", "#Aw'|A)[%#;h(^:K|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A<w'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitMethodInsn((byte) (-121), "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|");
      methodWriter.visitMethodInsn(2, "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|", "A<w'|A)[%#;f(^:K|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMethodInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(83);
      String[] arg5 = new String[5];
      arg5[0] = "v~@;[SOkdk44oa^yo";
      arg5[1] = "v~@;[SOkdk44oa^yo";
      arg5[2] = "9d)_=5RKwALA";
      arg5[3] = "9d)_=5RKwALA";
      arg5[4] = ".s.IFJDCS";
      MethodWriter methodWriter = new MethodWriter(arg0, 3116, "v~@;[SOkdk44oa^yo", "9d)_=5RKwALA", "AAw'|A)[%#;f(^:K|", arg5, false, false);
      methodWriter.visitMethodInsn(186, "x%q@t|&", "9d)_=5RKwALA", "Label offset position has not been resolved yet");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMethodInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^UK|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "AAw'|A)[%#;f(^UK|", "AAw'|A)[%#;f(^UK|", "AAw'|A)[%#;f(^UK|", arg5, false, false);
      methodWriter.visitMethodInsn(185, "AAw'|A)[%#;f(^UK|", "AAw'|A)[%#;f(^UK|", "AAw'|A)[%#;f(^UK|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[4];
      arg5[0] = "9d)J_=YXKnALA";
      arg5[1] = "org.objectweb.asm.jip.Frame";
      arg5[2] = "9d)J_=YXKnALA";
      arg5[3] = "9d)J_=YXKnALA";
      MethodWriter methodWriter = new MethodWriter(arg0, 1422, "LocalVariableTable", "9d)J_=YXKnALA", "!\"n$Mf#&X$B)", arg5, true, false);
      methodWriter.visitFieldInsn(2413, "AAw'|)[%#;f(^:|", "LocalVariableTable", "Deprecated");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "4Z)JZ9FdS", "4Z)JZ9FdS", ">", arg5, false, true);
      methodWriter.visitFieldInsn((-1), "AAw'|A)[%#;f(^:K|", "4Z)JZ9FdS", "$4n^E[ZDj;F`NtVQ");
      methodWriter.visitMaxs((-157599528), (-1733));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "#Aw'|A)[%#;h(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "j-D)q", "j-D)q", "#Aw'|A)[%#;h(^:K|", arg5, false, false);
      methodWriter.visitFieldInsn(1, "#Aw'|A)[%#;h(^:K|", "#Aw'|A)[%#;h(^:K|", "java/lang/Throwable");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitMethodInsn(1, "AAw'|A)[%#;f(^:K|", "O\"", "AAw'|A)[%#;f(^:K|");
      methodWriter.visitTypeInsn(187, "AAw'|A)[%#;f(^:K|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitTypeInsn(187, "AAw'|A)[%#;f(^:K|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(670);
      MethodWriter methodWriter = new MethodWriter(arg0, 670, "Deprecated", "4hI9F)SI33iBzgFN", ".8r", (String[]) null, true, false);
      methodWriter.visitTypeInsn(70, "4hI9F)SI33iBzgFN");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(161);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "~%'", "~%'", "~%'", arg5, false, false);
      methodWriter.visitVarInsn(2837, 55);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1067));
      String[] arg5 = new String[1];
      arg5[0] = "AA'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1067), "AAw'|A)[%#;f(^:K|", "AA'|A)[%#;f(^:K|", "AA'|A)[%#;f(^:K|", arg5, true, true);
      methodWriter.visitVarInsn(54, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnWithNegativeAndPositive1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(191);
      String[] arg5 = new String[5];
      arg5[0] = "mFE`u).O]5` ";
      arg5[1] = "mFE`u).O]5` ";
      arg5[2] = "java/lang/Throwable";
      arg5[3] = "mFE`u).O]5` ";
      arg5[4] = "9d)_=YRKnALA";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1954773923), "java/lang/Throwable", "mFE`u).O]5` ", "java/lang/Throwable", arg5, true, false);
      methodWriter.visitVarInsn(22, (-880));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitVarInsn(55, 16777220);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn3() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 268435456, "9)_5RwALA", "#Aw'|A)[%#;h(^:K|", "InnerClasses", arg5, true, true);
      methodWriter.visitVarInsn(24, 268435456);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnWithNegativeAndVisitFieldInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitFieldInsn((byte) (-121), "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", "I 6n:4r81C8");
      methodWriter.visitIntInsn((-1353), 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "j-D)q", "j-D)q", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitIntInsn(188, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitIntInsn(2, 16);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnWithNegativeAndPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-282), "Deprecated", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, true);
      methodWriter.visitIntInsn(17, (-282));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A)w'|A)[%Nf(^K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A)w'|A)[%Nf(^K|", "A)w'|A)[%Nf(^K|", "A)w'|A)[%Nf(^K|", arg5, true, false);
      methodWriter.visitInsn(2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A)w'|A)[%Nf(^K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A)w'|A)[%Nf(^K|", "A)w'|A)[%Nf(^K|", "A)w'|A)[%Nf(^K|", arg5, true, false);
      methodWriter.visitInsn(191);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "#Aw'|A)[%#;h(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "5", "8b%X}S)]", "#Aw'|A)[%#;h(^:K|", arg5, true, true);
      methodWriter.visitInsn(177);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(161);
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "~%'", "~%'", "~%'", arg4, false, false);
      methodWriter.visitInsn(2);
      methodWriter.visitFrame(149, 1, arg4, 2, arg4);
      byte[] byteArray = classWriter.toByteArray();
      
      // When
      int length = byteArray.length;
      
      // Then
      assertEquals(103, length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-23));
      String[] arg4 = new String[5];
      arg4[0] = "RuntimeVisibleParameterAnnotations";
      arg4[1] = "RuntimeVisibleParameterAnnotations";
      arg4[2] = "RuntimeVisibleParameterAnnotations";
      arg4[3] = "RuntimeVisibleParameterAnnotations";
      arg4[4] = "RuntimeVisibleParameterAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 31, "Synthetic", "nMV", "RuntimeVisibleParameterAnnotations", arg4, false, false);
      Label arg2 = new Label();
      Label[] arg3 = new Label[3];
      arg3[0] = arg2;
      arg3[1] = arg3[0];
      arg3[2] = arg2;
      methodWriter.visitTableSwitchInsn(218, 1, arg2, arg3);
      methodWriter.visitTableSwitchInsn((-23), 2, arg2, arg3);
      methodWriter.visitTypeInsn(31, "RuntimeVisibleParameterAnnotations");
      methodWriter.visitMultiANewArrayInsn("Synthetic", (-23));
      methodWriter.visitIntInsn(3, 31);
      methodWriter.visitFrame(3, (-268435457), arg4, (-603), arg4);
      assertEquals(5, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] local = new String[1];
      local[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", local, false, false);
      
      // When
      methodWriter.visitFrame(1, 1, local, -694, local);
      
      // Then
      assertEquals(1, local.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithPositive0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-303));
      String[] arg4 = new String[1];
      arg4[0] = "Anno9.tat.onDefault";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1091), "Anno9.tat.onDefault", "Anno9.tat.onDefault", "7p**cf^f8?~|w]`)H", arg4, false, false);
      methodWriter.visitFrame(4, 2, arg4, 1, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithPositive1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] local = new String[1];
      local[0] = "9d)_=YRKnALA";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", "9d)_=YRKnALA", local, true, false);
      String[] stack = new String[1];
      stack[0] = "9d)_=YRKnALA";
      
      // When
      methodWriter.visitFrame(3, 3, local, 2, stack);
      
      // Then
      assertEquals(1, local.length);
      assertEquals(1, stack.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg4 = new String[1];
      arg4[0] = "]eN GAH'eED{\"";
      MethodWriter methodWriter = new MethodWriter(arg0, (-946), "]eN GAH'eED{\"", "G&p3v6>", "Exceptions", arg4, false, false);
      methodWriter.visitFrame((byte)0, (-1970333445), arg4, (-1970333445), arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithPositiveAndVisitFrameWithNegative0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg4 = new String[1];
      arg4[0] = "AAw'|A)[%#;(X^:w6K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;(X^:w6K|", arg4, true, false);
      methodWriter.visitFrame((-157599528), 3, arg4, (-157599528), arg4);
      methodWriter.visitFrame(3, (-679), arg4, 2, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg4 = new String[1];
      arg4[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", arg4, true, false);
      methodWriter.visitFrame((-1722343489), (-1492), arg4, (-3005), arg4);
      methodWriter.visitFieldInsn(99, "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", "^U");
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(1, 1644, arg4, 65, arg4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg4 = new String[1];
      arg4[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-157599528), "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", arg4, true, false);
      methodWriter.visitFrame((-1722343489), (-1492), arg4, (-3005), arg4);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(1, 1644, arg4, 65, arg4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithPositiveAndVisitFrameWithNegative1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-3352));
      String[] arg4 = new String[5];
      arg4[0] = "AnnotationDefault";
      arg4[1] = "7p**cf^f8?~|w]`)H";
      arg4[2] = "AnnotationDefault";
      arg4[3] = "AnnotationDefault";
      arg4[4] = "AnnotationDefault";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1091), "AnnotationDefault", "7p**cf^f8?~|w]`)H", "AnnotationDefault", arg4, false, false);
      methodWriter.visitFrame((-1), 1, arg4, 1, arg4);
      assertEquals(5, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithPositiveAndVisitFrameWithNegative2() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg4 = new String[1];
      arg4[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, ".jar", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg4, true, true);
      
      // Act
      methodWriter.visitFrame(0, 0, arg4, 2, arg4);
      
      // Assert
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithEmptyArrayAndVisitFrameWithEmptyArray() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(127);
      String[] local = new String[0];
      String[] stack = new String[0];
      
      // Act
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "~%'", "~%'", "m", local, false, false);
      methodWriter.visitFrame(2, 2, local, 1, stack);
      
      // Assert
      assertEquals(0, local.length);
      assertEquals(0, stack.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithTrue() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((byte) 0);
      String[] parameterAnnotations = new String[7];
      parameterAnnotations[0] = "O)37cybtr|_juF";
      parameterAnnotations[1] = "OwMNi";
      parameterAnnotations[2] = "OwMNi";
      parameterAnnotations[3] = "OwMNi";
      parameterAnnotations[4] = "u4EE";
      parameterAnnotations[5] = "OwMNi";
      parameterAnnotations[6] = "OwMNi";
      MethodWriter methodWriter = new MethodWriter(classWriter, 180, "OwMNi", "O)37cybtr|_juF", "AAw'|A)[%#;f(^:K|", parameterAnnotations, true, false);
      
      // When
      try {
      methodWriter.visitParameterAnnotation((byte) (-121), "InnerClasses", true);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotation() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[5];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      arg5[1] = "AAw'|A)[%#;f(^:K|";
      arg5[2] = "AAw'|A)[%#;f(^:K|";
      arg5[3] = "AAw'|A)[%#;f(^:K|";
      arg5[4] = "QjC'";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1091), "AAw'|A)[%#;f(^:K|", "7p**cf^f8?~|w]`)H", "AAw'|A)[%#;f(^:K|", arg5, false, false);
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation((-1215), "Ljava/lang/Synthetic;", false);
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "A)w'|A)[%Nf(^-K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "A)w'|A)[%Nf(^-K|", "A)w'|A)[%Nf(^-K|", "A)w'|A)[%Nf(^-K|", arg5, true, false);
      // Undeclared exception!
      try { 
        methodWriter.visitParameterAnnotation((-890), ";I", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -890
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithTrue() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter((byte) 0);
      String[] methodNames = new String[1];
      methodNames[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "9d)_=YRKnALA", "9d)_=YRKnALA", "AAw'|A)[%#;f(^:K|", methodNames, true, false);
      methodWriter.visitAnnotation("9d)_=YRKnALA", true);
      
      // Act
      byte[] byteArray = classWriter.toByteArray();
      
      // Assert
      assertEquals(153, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithFalse() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((byte)0);
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "9)_5RwALA", "9)_5RwALA", "AAw'|A)[%#;f(^:K|", arg5, true, false);
      methodWriter.visitAnnotation("AAw'|A)[%#;f(^:K|", false);
      int size = methodWriter.getSize();
      assertEquals(38, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(127);
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 127, "<init>", "@g[ 6o+hiy*#Hm0I[,", "AAw'|rIA)[%#f(^:K|", (String[]) null, false, true);
      // Then
      assertThrows(StringIndexOutOfBoundsException.class, () -> {
      methodWriter.visitParameterAnnotation(0, "Lorg/springframework/web/bind/annotation/RequestParam;", true);});
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-282));
      String[] arg5 = new String[1];
      arg5[0] = "AAw'|A)[%#;f(^:K|";
      MethodWriter methodWriter = new MethodWriter(arg0, (-282), ".jar", "AAw'|A)[%#;f(^:K|", "AAw'|A)[%#;f(^:K|", arg5, true, true);
      methodWriter.visitEnd();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      // Given
      byte[] arg0 = new byte[5];
      arg0[1] = 0x01;
      arg0[2] = 0x02;
      arg0[3] = 0x03;
      arg0[4] = 0x04;
      
      // When
      int readInt = MethodWriter.readInt(arg0, 1);
      
      // Then
      assertEquals(0x01020304, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Given
      byte[] arg0 = new byte[5];
      arg0[1] = 0x00;
      arg0[2] = 0x00;
      
      // When
      short readShort = MethodWriter.readShort(arg0, 1);
      
      // Then
      assertEquals((short) 0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      // Arrange
      byte[] arg0 = new byte[4];
      
      // Act
      MethodWriter.writeShort(arg0, 2, (-987));
      
      // Assert
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-4), (byte)37}, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-2032), "B;EjY", "i%]", "Synthetic", arg5, false, false);
      methodWriter.visitCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // Create a byte array with 3 bytes
      byte[] arg0 = new byte[3];
      // Call the method with the byte array and 0 as the index
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 0);
      // Assert that the returned value is 0
      assertEquals(0, readUnsignedShort);
  }
}
