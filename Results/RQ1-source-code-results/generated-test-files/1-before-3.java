/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 14 13:33:44 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_ESOnly_ESTest extends MethodWriter_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // Given a byte array with a negative value at index 3
      byte[] arg0 = new byte[5];
      arg0[3] = (byte) (-63);
      
      // When the readUnsignedShort method is called with the byte array and an offset of 2
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 2);
      
      // Then the method should return the unsigned short value of the negative value at index 3
      assertEquals(193, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Given: A byte array containing a short value
      byte[] arg0 = new byte[6];
      arg0[0] = (byte)74;
      
      // When: The byte array is read as a short
      short readShort = MethodWriter.readShort(arg0, 0);
      
      // Then: The correct short value is returned
      assertEquals((short)18944, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given a byte array with a negative value
      byte[] arg0 = new byte[4];
      arg0[1] = (byte) (-84);
      
      // When the method readInt is called with the byte array and an offset of 0
      int readInt = MethodWriter.readInt(arg0, 0);
      
      // Then the method should return the correct integer value
      assertEquals(11272192, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given a byte array containing a 4-byte integer in big-endian format
      byte[] arg0 = new byte[4];
      
      // When the readInt method is called with the byte array and an offset of 0
      int readInt = MethodWriter.readInt(arg0, 0);
      
      // Then the method should return the integer value represented by the byte array
      assertEquals((-1124073472), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments0() throws Throwable  {
      // Given
      Label label = new Label();
      int[] offsets = new int[7];
      label.status = 46;
      
      // When
      MethodWriter.getNewOffset(offsets, offsets, label);
      
      // Then
      assertEquals(7, offsets.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments1() throws Throwable  {
      // Given
      Label label = new Label();
      label.position = 8;
      int[] offsets = new int[7];
      offsets[0] = 5;
      
      // When
      MethodWriter.getNewOffset(offsets, offsets, label);
      
      // Then
      assertArrayEquals(new int[] {5, 0, 0, 0, 0, 0, 0}, offsets);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      // Test that the method returns the correct new offset when the input array is not empty and the offset is negative
      int[] arg1 = new int[8];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 243, (-268435456));
      assertEquals((-268435699), newOffset);
      
      // Test that the method returns the correct new offset when the input array is empty and the offset is negative
      int[] arg2 = new int[0];
      int newOffset2 = MethodWriter.getNewOffset(arg2, arg2, 243, (-268435456));
      assertEquals((-268435699), newOffset2);
      
      // Test that the method returns the correct new offset when the input array is not empty and the offset is positive
      int[] arg3 = new int[8];
      int newOffset3 = MethodWriter.getNewOffset(arg3, arg3, 243, 268435456);
      assertEquals(268435699, newOffset3);
      
      // Test that the method returns the correct new offset when the input array is empty and the offset is positive
      int[] arg4 = new int[0];
      int newOffset4 = MethodWriter.getNewOffset(arg4, arg4, 243, 268435456);
      assertEquals(268435699, newOffset4);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      // Given: An array of integers and a new offset value
      int[] arg1 = new int[8];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-128), (-128));
      
      // When: The method is called with the array and the new offset value
      int result = MethodWriter.getNewOffset(arg1, arg1, (-128), (-128));
      
      // Then: The method should return 0
      assertEquals(0, result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningPositive() throws Throwable  {
      // Given
      int[] arg1 = new int[0];
      int[] arg2 = new int[0];
      int expectedNewOffset = 3685;
      
      // When
      int newOffset = MethodWriter.getNewOffset(arg1, arg2, (-1189), 2496);
      
      // Then
      assertEquals(expectedNewOffset, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsGetSize0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(491);
      MethodWriter methodWriter = new MethodWriter(arg0, 67, "W%SB@08)", "W%SB@08)", (String) null, (String[]) null, false, false);
      int size = methodWriter.getSize();
      assertEquals(8, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsGetSize1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(500);
      MethodWriter methodWriter = new MethodWriter(classWriter, 500, "9", ",{IMwrq!)ic", "9", (String[]) null, true, true);
      methodWriter.exceptionCount = 2;
      
      // When
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFrameWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      arg0.visit(508, 131072, "i5Ul^1", "Og_IsGMlE9m^l", "CS2:iNcC,OI8apT0Bx", (String[]) null);
      MethodWriter methodWriter = new MethodWriter(arg0, 1316, "becb", "becb", "SourceFile", (String[]) null, false, false);
      methodWriter.visitInsn(508);
      methodWriter.visitFrame(1316, (-972), (Object[]) null, 508, (Object[]) null);
      int size = methodWriter.getSize();
      assertEquals(43, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFrameWithPositive() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(495);
      MethodWriter methodWriter = new MethodWriter(classWriter, 495, "<iniNi", "<iniNi", "<iniNi", (String[]) null, false, false);
      
      // When
      methodWriter.visitInsn(2);
      methodWriter.visitFrame(1174536705, 1174536705, (Object[]) null, 495, (Object[]) null);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(43, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumber() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "7SF", "{I-Mr~!)i_", "{I-Mr~!)i_", (String[]) null, true, true);
      Label label = new Label();
      
      // When
      methodWriter.visitLineNumber(63, label);
      methodWriter.visitFieldInsn((-1719797357), "1bP6+hG01", "<iniNi", "E*b-h]U!");
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(49, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitLocalVariableAndVisitVarInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "8{", "{I-Mr~!)i_", "8{", (String[]) null, true, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("8{", "8{", "{I-Mr~!)i_", arg4, arg4, 2);
      methodWriter.visitVarInsn(59, 2);
      int size = methodWriter.getSize();
      assertEquals(71, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsGetSize2() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(1162);
      MethodWriter methodWriter = new MethodWriter(classWriter, (-2140), "bN3_x", "'1>7'~NME", "Og_IsGMlE9m^l", (String[]) null, false, false);
      methodWriter.classReaderOffset = 2;
      
      // When
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(6, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsGetSize3() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-1890));
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1890), "~S(ig}m!rv8?[\"!;*", "~S(ig}m!rv8?[\"!;*", "~S(ig}m!rv8?[\"!;*", (String[]) null, false, false);
      
      // When
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithNegativeAndVisitJumpInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "7SF", "{I-Mr~!)i_", "7SF", (String[]) null, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitMaxs(508, 168);
      methodWriter.visitMaxs((-190), 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(495);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, ",{IMwrq!)ic", ",{IMwrq!)ic", ",{IMwrq!)ic", (String[]) null, true, false);
      Label arg1 = new Label();
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, ",{IMwrq!)ic");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(495, 495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxs() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(532);
      MethodWriter methodWriter = new MethodWriter(arg0, 532, "PRGj^Il", "{I-MrXF)i_", "PRGj^Il", (String[]) null, true, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "PRGj^Il");
      methodWriter.visitMaxs(1, 532);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMaxs0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-1890));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1443168256, "~S(ig}m!rv8?[\"!;*", "q)FH", "~S(ig}m!rv8?[\"!;*", arg5, true, true);
      methodWriter.visitMaxs(67, 3917);
      methodWriter.visitMaxs(1024, 1);
      methodWriter.visitMaxs(1024, 1443168256);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(463);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ",{IMwrq!)ic", ",{IMwrq!)ic", ",{IMwrq!)ic", (String[]) null, true, true);
      Label arg2 = new Label();
      Label arg1 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, ",{IMwrq!)ic");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(2, 463);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithNegativeAndVisitMaxsThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(512);
      MethodWriter methodWriter = new MethodWriter(classWriter, 512, "a?gS%0QLxp", "Sm{I--F)_", "a?gS%0QLxp", (String[]) null, true, true);
      Label tryCatchBlock = new Label();
      methodWriter.visitTryCatchBlock(tryCatchBlock, tryCatchBlock, tryCatchBlock, "a?gS%0QLxp");
      
      // When
      try {
      methodWriter.visitMaxs(-708, -708);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.Type", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMaxs1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(138);
      MethodWriter methodWriter = new MethodWriter(arg0, 138, "~S(igL!rv8[\"!;*", "~S(igL!rv8[\"!;*", "~S(igL!rv8[\"!;*", (String[]) null, false, false);
      methodWriter.visitMaxs(138, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumberWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, (-3889), "&<%&^ M';OP+'2/Lw|", "", "", (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(2701, arg1);
      methodWriter.visitLineNumber((-3889), arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLocalVariable0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(494);
      MethodWriter methodWriter = new MethodWriter(arg0, 494, "8{", "{I-Mr~!)i_", "8{", (String[]) null, true, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("{I-Mr~!)i_", "JTpP{Ui9_D^", "JTpP{Ui9_D^", arg4, arg4, 166);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLocalVariable1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(532);
      MethodWriter methodWriter = new MethodWriter(arg0, 532, "PRGj^Il", "{I-MrXF)i_", "PRGj^Il", (String[]) null, true, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("PRGj^Il", "PRGj^Il", "{I-MrXF)i_", arg4, arg4, 2);
      methodWriter.visitLocalVariable("{I-MrXF)i_", "''FLwJG}ZAJwh", "{I-MrXF)i_", arg4, arg4, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLocalVariable2() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(482);
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 482, "<iniNi", "<iniNi", "<iniNi", (String[]) null, false, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(498);
      MethodWriter methodWriter = new MethodWriter(arg0, 498, "Fs", "{I-MrXF)i_", "Fs", (String[]) null, true, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("G", "Dv", (String) null, arg4, arg4, 2834);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTryCatchBlock() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(532);
      MethodWriter methodWriter = new MethodWriter(arg0, 532, "n", "{I-MrXF)i_", "n", (String[]) null, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "n");
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "jav/*n1gxObbeVc;");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(500);
      MethodWriter methodWriter = new MethodWriter(arg0, 500, "9!", ",{IMwrq!)ic", "9!", (String[]) null, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(1, 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsnWithPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(521);
      MethodWriter methodWriter = new MethodWriter(arg0, 521, "Hz&T@&JI(4@3", "{I-Mr~!)i_", "^%c8o%6dhpn_;bl", (String[]) null, true, true);
      methodWriter.visitMultiANewArrayInsn("^%c8o%6dhpn_;bl", 20);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(123);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Y,~94M|Co|`6K/4+N", "Y,~94M|Co|`6K/4+N", "Y,~94M|Co|`6K/4+N", (String[]) null, false, false);
      Label defaultLabel = new Label();
      Label[] labels = new Label[3];
      labels[0] = defaultLabel;
      labels[1] = defaultLabel;
      labels[2] = defaultLabel;
      
      // When
      methodWriter.visitTableSwitchInsn(1803, 17, defaultLabel, labels);
      
      // Then
      assertEquals(3, labels.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(490);
      MethodWriter methodWriter = new MethodWriter(arg0, 490, "8{", "{I-Mr~!)i_", "8{", (String[]) null, true, false);
      methodWriter.visitIincInsn((-1971), (-313));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(510);
      MethodWriter methodWriter = new MethodWriter(arg0, 510, "8{", "{I-Mr~!)i_", "8{", (String[]) null, true, true);
      arg0.index = 510;
      methodWriter.visitLdcInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(491);
      MethodWriter methodWriter = new MethodWriter(arg0, 491, "", "{I-M2~!)i!", "", (String[]) null, true, false);
      methodWriter.visitFieldInsn(491, "", "CGQcz%-#h\"L=}Z=", "CGQcz%-#h\"L=}Z=");
      methodWriter.visitLdcInsn("");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitLdcInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(classWriter, 508, "oaHpxeU", "{I-Mr~!)i_", "oaHpxeU", (String[]) null, true, false);
      
      // When
      methodWriter.visitLdcInsn("{I-Mr~!)i_");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerExceptionAndVisitJumpInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1890));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1443168256, "~S(ig}m!rv8?[\"!;*", "q)FH", "q)FH", arg5, true, true);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(2, arg1);
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "7SF", "{I-Mr~!)i_", "7SF", (String[]) null, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitJumpInsn(168, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitJumpInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(465);
      MethodWriter methodWriter = new MethodWriter(arg0, 465, "java/*an1gxObbeVc;", "java/*an1gxObbeVc;", "java/*an1gxObbeVc;", (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(2, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "-p", "{I-Mr~!)i_", "-p", (String[]) null, true, false);
      methodWriter.visitMultiANewArrayInsn("StackMapTable", (-816));
      methodWriter.visitMethodInsn(2, "StackMapTable", "Synthetic", "{I-Mr~!)i_");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMethodInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(1129);
      MethodWriter methodWriter = new MethodWriter(arg0, 1129, "bN3_x", "{I-Z2~#)i!", "{I-Z2~#)i!", (String[]) null, true, true);
      methodWriter.visitMethodInsn(185, "bN3_x", "{I-Z2~#)i!", "{I-Z2~#)i!");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMethodInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(49);
      MethodWriter methodWriter = new MethodWriter(arg0, (-2131), "bN3_x", "'1>7'~NME", "Og S_IsGMlE9m^l", (String[]) null, false, false);
      methodWriter.visitMethodInsn(186, "Og S_IsGMlE9m^l", "'1>7'~NME", "RuntimeVisibleParameterAnnotations");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitMethodInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)31);
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "{I-Mr~!qR)i_", "{I-Mr~!qR)i_", "{I-Mr~!qR)i_", (String[]) null, true, false);
      methodWriter.visitMethodInsn(185, "{I-Mr~!qR)i_", "{I-Mr~!qR)i_", "{I-Mr~!qR)i_");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)15);
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "{I-Mr~!)i_", "{I-Mr~!)i_", "8lLZIPy@GC}b", (String[]) null, true, false);
      methodWriter.visitMultiANewArrayInsn("8lLZIPy@GC}b", (-1795));
      methodWriter.visitFieldInsn((-746), "VFrhPa$\",xoG", "N$5&eCDm", "N$5&eCDm");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitFieldInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(522);
      MethodWriter methodWriter = new MethodWriter(arg0, 522, "org.objectweb.asm.jip.Attribute", "{I-Mr~!)i_", "org.objectweb.asm.jip.Attribute", (String[]) null, true, false);
      String arg2 = "g;#GFJ`$[NSLeO\\u";
      methodWriter.visitFieldInsn(154, "org.objectweb.asm.jip.Attribute", arg2, "DXep|");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFieldInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "<iniNi", "<iniNi", "<iniNi", (String[]) null, false, false);
      methodWriter.visitFieldInsn(508, "<iniNi", "<iniNi", "<iniNi");
      int size = methodWriter.getSize();
      assertEquals(37, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(522);
      MethodWriter methodWriter = new MethodWriter(arg0, 522, "org.objectwebcasm.jip.Attribute", "{I-Mr~!)i_", "org.objectwebcasm.jip.Attribute", (String[]) null, true, false);
      methodWriter.visitFieldInsn(522, "StackMap", " #xklxA54_Mr^", "%q;@wa");
      methodWriter.visitTypeInsn(187, "org.objectwebcasm.jip.Attribute");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(522);
      MethodWriter methodWriter = new MethodWriter(arg0, 522, "org.objectweb.asm.jip.Attribute", "{I-Mr~!)i_", "org.objectweb.asm.jip.Attribute", (String[]) null, true, false);
      methodWriter.visitTypeInsn(187, "org.objectweb.asm.jip.Attribute");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(532);
      MethodWriter methodWriter = new MethodWriter(arg0, 532, "n", "{I-MrXF)i_", "n", (String[]) null, true, true);
      methodWriter.visitTypeInsn(2, "n");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitTypeInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "oaHpxeU", "{I-Mr~!)i_", "oaHpxeU", (String[]) null, true, false);
      methodWriter.visitTypeInsn(2, "{I-Mr~!)i_");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(500);
      MethodWriter methodWriter = new MethodWriter(arg0, 500, "", ",{IMwrq!)ic", "", (String[]) null, true, false);
      methodWriter.visitVarInsn(2, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "7SF", "{I-Mr~!)i_", "7SF", (String[]) null, true, false);
      methodWriter.visitVarInsn(22, 22);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "+SC>@HX", "{I-Mr~!)i_", "^%c8o%6dhpn_;bl", (String[]) null, true, false);
      methodWriter.visitVarInsn(55, 24);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(506);
      MethodWriter methodWriter = new MethodWriter(arg0, 506, "+SC>@HX", "r{I-Mr~!)i", "^%cfo%6dhpn_;Cl", (String[]) null, true, false);
      methodWriter.visitVarInsn(169, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn4() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(500);
      MethodWriter methodWriter = new MethodWriter(arg0, 500, "9!", ",{IMwrq!)ic", "9!", (String[]) null, true, true);
      methodWriter.visitVarInsn(167, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitVarInsn5() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(495);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, ",{IMwrq!)ic", ",{IMwrq!)ic", ",{IMwrq!)ic", (String[]) null, true, false);
      methodWriter.visitVarInsn(24, 24);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(491);
      MethodWriter methodWriter = new MethodWriter(arg0, 491, "zT@&JI(4@3", "{I-M2~!)i!", "", (String[]) null, true, false);
      methodWriter.visitFieldInsn(79, "", "CGQcz%-#h\"L=}Z=", "CGQcz%-#h\"L=}Z=");
      methodWriter.visitIntInsn(17, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "8{", "{IMwr~!)i_", "8{", (String[]) null, true, false);
      methodWriter.visitIntInsn(188, 508);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(519);
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "{I-Mr~!)i_", "{I-Mr~!)i_", "{I-Mr~!)i_", (String[]) null, true, true);
      
      // Act and Assert
      try {
      methodWriter.visitIntInsn(18, 2);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.Frame", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitIntInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(classWriter, 508, "-p", "{I-Mr~!)i_", "-p", (String[]) null, true, false);
      
      // When
      methodWriter.visitIntInsn(1, 1);
      
      // Then
      assertEquals(1, methodWriter.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(500);
      MethodWriter methodWriter = new MethodWriter(arg0, 500, "Xzb%u:BK", ",{IMwrq!)ic", "Xzb%u:BK", (String[]) null, true, false);
      methodWriter.visitInsn(172);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(523);
      MethodWriter methodWriter = new MethodWriter(arg0, 523, "tW6G,", "{I-M2~!)it", "tW6G,", (String[]) null, true, false);
      methodWriter.visitInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndCallsVisitInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "7SF", "{I-Mr~!)i_", "7SF", (String[]) null, true, true);
      methodWriter.visitInsn(191);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(5);
      String[] methodArgs = new String[1];
      methodArgs[0] = "vv";
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "+`bC{h>X,:P&9{", "dR;\u0007ED;vojJ4UX(", "vv", methodArgs, false, false);
      
      // When
      try {
      methodWriter.visitFrame(1, 54, methodArgs, 2, methodArgs);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithZero() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((byte) (-83));
      String[] methodNames = new String[3];
      methodNames[0] = "Yf";
      methodNames[1] = "Yf";
      methodNames[2] = "Yf";
      MethodWriter methodWriter = new MethodWriter(classWriter, (byte) (-1), "Yf", "Yf", "Yf", methodNames, false, false);
      
      // When
      methodWriter.visitFrame((byte)0, (-1794002093), methodNames, (byte) (-63), methodNames);
      
      // Then
      assertEquals(3, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNegative() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(classWriter, 508, "zT@&JI(4@3", "{I-Mr~!)i_", "", (String[]) null, true, false);
      
      // Act and Assert
      try {
      methodWriter.visitFrame((byte) 0, (-2816), (Object[]) null, (byte) 32, (Object[]) null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithPositive() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(465);
      MethodWriter methodWriter = new MethodWriter(classWriter, 465, "java/*an1g/Objec;", "java/*an1g/Objec;", "java/*an1g/Objec;", (String[]) null, false, false);
      
      // Act and Assert
      try {
      methodWriter.visitFrame(4, (-4355), (Object[]) null, 979, (Object[]) null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "8{", "8{", "8{", (String[]) null, false, false);
      methodWriter.visitFrame(3, (-21), (Object[]) null, (-3867), (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      // Given: A MethodWriter instance with a valid frame
      ClassWriter classWriter = new ClassWriter(517);
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "&<%&^ M';*P$'2/Lw|", "&<%&^ M';*P$'2/Lw|", "&<%&^ M';*P$'2/Lw|", (String[]) null, false, false);
      
      // When: The visitFrame method is called with an invalid frame
      methodWriter.visitFrame(66, (-3462), (Object[]) null, 2, (Object[]) null);
      
      // Then: An IllegalStateException is thrown
      try {
      methodWriter.visitFrame(2, 1, (Object[]) null, 2, (Object[]) null);
      fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      // no message in exception (getMessage() returned null)
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrame() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(517);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "&<%&^ M';OP+'2/Lw|", "&<%&^ M';OP+'2/Lw|", "&<%&^ M';OP+'2/Lw|", (String[]) null, false, false);
      methodWriter.visitFrame(1, (-3188), (Object[]) null, (-3123), (Object[]) null);
      methodWriter.visitMethodInsn(1, "^stS'.Ka]cx", "&<%&^ M';OP+'2/Lw|", "^stS'.Ka]cx");
      methodWriter.visitFrame(2, (-3123), (Object[]) null, (-2737), (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithNullAndVisitFrameWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 508, "Hz&T@&JI(4@3", "{I-Mr~!)i_", "8{", (String[]) null, true, false);
      methodWriter.visitFrame((-403), 2240, (Object[]) null, 1, (Object[]) null);
      methodWriter.visitFrame(3, 508, (Object[]) null, (-403), (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithNegativeAndVisitFrameWithPositive() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((byte) (-79));
      String[] methodNames = new String[3];
      methodNames[0] = "";
      methodNames[1] = "";
      methodNames[2] = "";
      MethodWriter methodWriter = new MethodWriter(classWriter, (byte)0, "", "", "", methodNames, false, false);
      
      // When
      methodWriter.visitFrame((-1), 1, methodNames, 2, methodNames);
      
      // Then
      assertEquals(3, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerException() throws Throwable  {
      // Setup
      ClassWriter classWriter = new ClassWriter(16711680);
      MethodWriter methodWriter = new MethodWriter(classWriter, 16711680, "_3f[~K{<f", "_3f[~K{<f", "_3f[~K{<f", (String[]) null, false, false);
      Object[] arg4 = new Object[9];
      
      // Action
      try {
      methodWriter.visitFrame(-1, 2, arg4, 3490, arg4);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify
      assertEquals("No message in exception (getMessage() returned null)", e.getMessage());
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriterAndVisitFrameAndVisitFrameWithPositiveAndVisitFrameWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1890));
      MethodWriter methodWriter = new MethodWriter(arg0, (-1890), "{-Mr~!)i_", "{-Mr~!)i_", "{-Mr~!)i_", (String[]) null, true, true);
      Object[] arg4 = new Object[3];
      methodWriter.visitFrame(1, 1, arg4, (-1890), arg4);
      assertEquals(3, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(138);
      MethodWriter methodWriter = new MethodWriter(arg0, 138, "~S(igL!rv8[\"!;*", "~S(igL!rv8[\"!;*", "~S(igL!rv8[\"!;*", (String[]) null, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(0, 3490, (Object[]) null, 3, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-1890));
      String[] parameterTypes = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1443168256, "~S(ig}m!rv8?[\"!;*", "q)FH", "~S(ig}m!rv8?[\"!;*", parameterTypes, true, true);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(187, "q)FH", true);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotation() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(494);
      MethodWriter methodWriter = new MethodWriter(arg0, 494, "8{", "{I-Mr~!)i_", "8{", (String[]) null, true, false);
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(494, "Ljava/lang/Synthetic;", true);
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithEmptyStringAndFalse() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(480);
      MethodWriter methodWriter = new MethodWriter(classWriter, 480, "", "P)*uvZqr+jSHk|", "PxHhaX<Kh$BIquYUaE", (String[]) null, false, false);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(2, "", false);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithTrue() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(508);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "java/lang/Throwable", "{I-Mr~!)i_", "}", (String[]) null, false, false);
      methodWriter.visitAnnotation("{I-Mr~!)i_", true);
      int size = methodWriter.getSize();
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithFalse() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((byte)31);
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "{I-Mr~!qR)i_", "{I-Mr~!qR)i_", "{I-Mr~!qR)i_", (String[]) null, true, false);
      methodWriter.visitAnnotation("{I-Mr~!qR)i_", false);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(109, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException0() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(508);
      MethodWriter methodWriter = null;
      
      // Act
      try {
      methodWriter = new MethodWriter(classWriter, 508, "<init>", "<init>", "<init>", (String[]) null, true, true);
      } catch (StringIndexOutOfBoundsException e) {
      // Assert
      assertTrue(true);
      }
      
      // Assert
      assertNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(502);
      MethodWriter methodWriter = null;
      
      // When
      try {
      methodWriter = new MethodWriter(classWriter, 502, "{I-Mr~!)i_", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String[]) null, false, true);
      } catch(StringIndexOutOfBoundsException e) {
      // Then
      assertTrue(true);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((byte)4);
      String[] methodNames = new String[3];
      methodNames[0] = "";
      methodNames[1] = "";
      methodNames[2] = "";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, (byte)0, "", "", "", methodNames, false, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(491);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "W%SB@08)", "bolean", "RuntimeInvisibleAnnotations", (String[]) null, false, false);
      methodWriter.visitAnnotationDefault();
      int size = methodWriter.getSize();
      assertEquals(22, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      // Create a byte array with a length of 22
      byte[] arg0 = new byte[22];
      // Set the first byte of the array to 15
      arg0[0] = (byte) 15;
      // Call the readInt method with the byte array and the first byte as arguments
      int readInt = MethodWriter.readInt(arg0, (byte) 15);
      // Assert that the returned value is 0
      assertEquals(0, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Given: An empty byte array
      byte[] arg0 = new byte[0];
      
      // When: Reading a short from the array
      short readShort = MethodWriter.readShort(arg0, 0);
      
      // Then: The read short should be 0
      assertEquals((short)0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      // Given
      byte[] input = new byte[5];
      
      // When
      MethodWriter.writeShort(input, 0, 220);
      
      // Then
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte)0, (byte)0, (byte)0}, input);
      assertEquals((short) (-9216), MethodWriter.readShort(input, (byte)1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(3521);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "[]", "org.yasl.jars.JarFileFilter", (String) null, arg5, false, false);
      
      // When
      methodWriter.visitCode();
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // Given a byte array with a length of 22
      byte[] arg0 = new byte[22];
      
      // When the readUnsignedShort method is called with the byte array and a byte value of 4
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, (byte)4);
      
      // Then the method should return 0
      assertEquals(0, readUnsignedShort);
  }
}
