/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Jun 16 18:18:20 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.radio.Transceiver;
import net.virtualinfinity.atrobots.hardware.shield.Shield;
import net.virtualinfinity.atrobots.hardware.throttle.Throttle;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_ESOnly_ESTest extends Robot_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("X@o$023=*", 2161, scoreKeeper);
      Duration duration = Duration.ZERO_CYCLE;
      
      // Act
      try {
      robot.update(duration);
      fail("Expected NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("net.virtualinfinity.atrobots.arena.Position", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("q{,KzxH)*[VBXA<;Cw", (-3541), arg2);
      
      // Act and Assert
      try {
      robot.inflictedDamage(180.0);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is thrown due to an uninitialized variable
      assertEquals("Variable is not initialized", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot(":C", 1958, arg2);
      
      // Expected outcome
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      arg0.checkCollision(arg0);
      });
      
      // Verification
      assertEquals("Expecting exception: NullPointerException", expectedException.getMessage());
      verifyException("net.virtualinfinity.atrobots.arena.Position", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsPositive() throws Throwable  {
      // Given a robot with a transponder
      Robot robot = new Robot("m>3e!m!IdL2,", (-1), (RobotScore) null);
      Transponder transponder = new Transponder();
      transponder.setId(890);
      robot.setTransponder(transponder);
      
      // When the transponder is retrieved
      Transponder retrievedTransponder = robot.getTransponder();
      
      // Then the correct transponder is returned
      assertEquals(transponder, retrievedTransponder);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsNegative() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("#k>;C.f.An1", (-314), scoreKeeper);
      Transponder transponder = new Transponder();
      transponder.setId((-314));
      robot.setTransponder(transponder);
      
      // When
      int id = robot.getId();
      int roundKills = robot.getRoundKills();
      
      // Then
      assertEquals((-314), id);
      assertEquals(0, roundKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with an ID of 0
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$GetRobotStatisticsInterrupt", 0, scoreKeeper);
      
      // Call the wonRound method on the scoreKeeper with the robot as an argument
      scoreKeeper.wonRound(robot);
      
      // Assert that the robot's ID is 0
      assertEquals(0, robot.getId());
      
      // Assert that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot with a specific ID
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 1436, scoreKeeper);
      
      // When: The scoreKeeper is told that the robot has tied a round
      scoreKeeper.tiedRound(robot);
      
      // Then: The robot's total ties should be 1
      assertEquals(1, robot.getTotalTies());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 1436
      assertEquals(1436, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1431655765), robotScoreKeeper);
      
      // When: The robot is killed
      robotScoreKeeper.killedRobot(robot);
      
      // Then: The robot's total kills should be 0
      assertEquals(0, robot.getTotalKills());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be (-1431655765)
      assertEquals((-1431655765), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.computer.BitRotateLeftInstruction", 41, scoreKeeper);
      
      // When: The robot dies
      scoreKeeper.died(robot);
      
      // Then: The robot's death count is incremented
      assertEquals(1, robot.getTotalDeaths());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetShield() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("!", 0, arg2);
      Shield arg0 = new Shield((-722.0));
      robot.setShield(arg0);
      robot.getShield();
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and id
      Robot robot = new Robot("Robby", 2244, scoreKeeper);
      
      // Then the robot's name and id should be set correctly
      assertEquals("Robby", robot.getName());
      assertEquals(2244, robot.getId());
      
      // And the round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and id
      Robot robot = new Robot("q{,KzxH)*[VBXA<;Cw", (-735), scoreKeeper);
      
      // Then the robot's name and id are set correctly
      assertEquals("q{,KzxH)*[VBXA<;Cw", robot.getName());
      assertEquals((-735), robot.getId());
      
      // And the robot's round kills are set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a name and a score
      Robot robot = new Robot("='bC", 0, robotScoreKeeper);
      
      // Get the id of the robot
      int id = robot.getId();
      
      // Assert that the id is 0
      assertEquals(0, id);
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a name and score
      Robot robot = new Robot("Dereference", 27, scoreKeeper);
      
      // Get the id of the robot
      int id = robot.getId();
      
      // Assert that the id is equal to 27
      assertEquals(27, id);
      
      // Assert that the round kills is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsPositive() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("78-C5b`", (-2145432588), arg2);
      Armor arg0 = new Armor(350.0);
      robot.setArmor(arg0);
      robot.getArmor();
      assertEquals((-2145432588), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburn() throws Throwable  {
      // Given a robot with a negative id and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("q{,KzxH)*[VBXA<;Cw", -3541, scoreKeeper);
      
      // When the robot is overburn
      robot.isOverburn();
      
      // Then the robot's id should be the same as the negative id
      assertEquals(-3541, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("78-C5b(?>B`", (-2145432545), arg2);
      robot.getArmor();
      assertEquals((-2145432545), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a negative ID
      Robot robot = new Robot("", (-1341), scoreKeeper);
      
      // Get the ID of the robot
      int id = robot.getId();
      
      // Assert that the ID is the same as the negative ID passed in
      assertEquals((-1341), id);
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name and a negative ID
      Robot robot = new Robot((String) null, (-3541), arg2);
      
      // Get the turret of the robot
      robot.getTurret();
      
      // Assert that the robot's ID is equal to the negative ID
      assertEquals((-3541), robot.getId());
      
      // Assert that the robot's round kills is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given: A new RobotScoreKeeper and a Robot with a listener
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot(", toalDeaths=", 1, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot is killed
      robot.killedRobot();
      
      // Then: The total kills is incremented
      assertEquals(1, robot.getTotalKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTieRound() throws Throwable  {
      // Given: A new robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot(null, 1091, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot ties a round
      robot.tieRound();
      
      // Then: The total ties should be 1
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWinRound() throws Throwable  {
      // Given a robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("2l9Re -]", (-2146138915), scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When the robot wins a round
      robot.winRound();
      
      // Then the robot's total wins should be 1
      assertEquals(1, robot.getTotalWins());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // Given
      Robot robot = new Robot("f-no?=", 71, (RobotScore) null);
      robot.setOverburn(true);
      
      // When
      try {
      robot.armorDepleted();
      
      // Then
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Robot robot = new Robot("f-no?=", 71, (RobotScore) null);
      // Undeclared exception!
      try { 
        robot.armorDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCollidesThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-664), arg2);
      // Undeclared exception!
      try { 
        robot.collides();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTransceiver() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("O\"=W^J/DgtS0c2 ", (-434), scoreKeeper);
      Transceiver transceiver = new Transceiver();
      robot.setTransceiver(transceiver);
      
      // When
      int id = robot.getId();
      int roundKills = robot.getRoundKills();
      
      // Then
      assertEquals((-434), id);
      assertEquals(0, roundKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("78-C5b`", (-2145432588), scoreKeeper);
      
      // Then the robot's total wins should be 0
      assertEquals(0, robot.getTotalWins());
      
      // And the robot's id should be (-2145432588)
      assertEquals((-2145432588), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 8, arg2);
      robot.getTransceiver();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // Given: A new robot with an id of 2645 and a score keeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 2645, arg2);
      
      // When: The total kills of the robot is requested
      int totalKills = robot.getTotalKills();
      
      // Then: The total kills should be equal to the id of the robot
      assertEquals(2645, totalKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonar() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 8, arg2);
      robot.getSonar();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageTaken() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 8, arg2);
      Duration lastDamageTaken = robot.getLastDamageTaken();
      assertEquals(0, lastDamageTaken.getCycles());
      assertEquals(0, robot.getRoundKills());
      assertEquals(8, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandler() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("irD@P\"X8:[i'HZ+2", 2141365460, arg2);
      robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      assertEquals(2141365460, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHardwareBus() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 0, arg2);
      HardwareBus arg0 = new HardwareBus();
      robot.setHardwareBus(arg0);
      robot.getHardwareBus();
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a specific name and ID
      Robot robot = new Robot("X@o$023=*", 2161, scoreKeeper);
      
      // Then the robot's ID should be set to the specified value
      assertEquals(2161, robot.getId());
      
      // And the robot's round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Robot robot = new Robot("c9AVPbHPXBdQ-P\"", 103, (RobotScore) null);
      // Undeclared exception!
      try { 
        robot.destruct();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShieldReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and an id of 1091
      Robot robot = new Robot(null, 1091, scoreKeeper);
      
      // Get the shield of the robot
      robot.getShield();
      
      // Assert that the robot's id is 1091
      assertEquals(1091, robot.getId());
      
      // Assert that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and id
      Robot robot = new Robot("", (-1215), scoreKeeper);
      
      // Then the robot's name and id should be set correctly
      assertEquals("", robot.getName());
      assertEquals((-1215), robot.getId());
      
      // And the robot's round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // Given: A new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot instance is created with a MineLayer
      Robot robot = new Robot("DIV", 2761, scoreKeeper);
      
      // Then: The robot should have a MineLayer and a round kill count of 0
      assertEquals(0, robot.getRoundKills());
      assertEquals(2761, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name and a valid ID
      Robot robot = new Robot(null, 32767, scoreKeeper);
      
      // Verify that the robot's ID is set correctly
      assertEquals(32767, robot.getId());
      
      // Verify that the robot's round kills is set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateMissile() throws Throwable  {
      // Given
      Robot robot = new Robot("m>3e!m!IdL2,", (-1), (RobotScore) null);
      Position randomPosition = Position.random(2.0, 996.0, 1.3, 2.0);
      
      // When
      robot.createMissile((AbsoluteAngle) null, randomPosition, 1651.5694401210196);
      
      // Then
      assertEquals((-1), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTurret() throws Throwable  {
      // Given
      Robot robot = new Robot("", 848, (RobotScore) null);
      Turret turret = new Turret();
      
      // When
      robot.setTurret(turret);
      Turret actualTurret = robot.getTurret();
      
      // Then
      assertEquals(turret, actualTurret);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // Given a robot with a specific id and score
      Robot robot = new Robot("c9AVPbHPXBdQ-P\"", 103, (RobotScore) null);
      
      // When the robot is reset
      robot.reset();
      
      // Then the robot's id and score should be reset
      assertEquals(103, robot.getId());
      assertEquals(0, robot.getRoundKills());
      assertFalse(robot.isOverburn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadar() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // Create a new RobotScore
      RobotScore robotScore = FinalRobotScore.copyOf(robotScoreKeeper);
      
      // Create a new Robot with a name, id, and score
      Robot robot = new Robot("[C`w^.lquH/", 2146532980, robotScore);
      
      // Get the radar of the robot
      robot.getRadar();
      
      // Assert that the id of the robot is equal to 2146532980
      assertEquals(2146532980, robot.getId());
      
      // Assert that the round kills of the robot is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // Given
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      RobotScore robotScore = FinalRobotScore.copyOf(robotScoreKeeper);
      Robot robot = new Robot("[C`w^.lquH/", 2146532980, robotScore);
      
      // When
      robot.getComputer();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(2146532980, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper and a Robot with a total tie score
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 1436, arg2);
      
      // When the getTotalTies method is called
      int totalTies = robot.getTotalTies();
      
      // Then the totalTies variable should be equal to the robot's id
      assertEquals(1436, totalTies);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created
      Robot robot = new Robot("2l9Re -]", (-2146138915), scoreKeeper);
      
      // Then the robot's shutdown level latch port should be 0
      assertEquals(0, robot.getShutdownLevelLatchPort());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be (-2146138915)
      assertEquals((-2146138915), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given: A new robot with no round kills
      Robot robot = new Robot("", 0, (RobotScore) null);
      
      // When: The robot's round kills are retrieved
      int roundKills = robot.getRoundKills();
      
      // Then: The round kills should be zero
      assertEquals(0, roundKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("DIV", 2761, arg2);
      robot.getMineLayer();
      assertEquals(2761, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBusReturningNull() throws Throwable  {
      // Given a Robot object with a non-null name and a null score
      Robot robot = new Robot("m>3e!m!IdL2,", (-1), (RobotScore) null);
      
      // When the getHardwareBus method is called
      robot.getHardwareBus();
      
      // Then the id should be set to -1
      assertEquals((-1), robot.getId());
      
      // And the round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottleReturningNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 8, arg2);
      robot.getThrottle();
      assertEquals(0, robot.getRoundKills());
      assertEquals(8, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // Given a robot with a transponder and a score of 0
      Robot robot = new Robot("m>3e!m!IdL2,", (-1), (RobotScore) null);
      
      // When the transponder is retrieved
      robot.getTransponder();
      
      // Then the round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the id should be -1
      assertEquals((-1), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // Given a new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot is created with a null name and 0 heat sinks
      Robot robot = new Robot(null, 0, scoreKeeper);
      
      // Then the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsNegative() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("78-C5b(?>B`", -2145432545, scoreKeeper);
      Armor armor = new Armor(-3859.751715455501);
      robot.setArmor(armor);
      
      // When
      robot.getArmor();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(-2145432545, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name, -3541 as the id, and the RobotScoreKeeper object as the score keeper
      Robot robot = new Robot((String) null, (-3541), arg2);
      
      // Call the getTotalDeaths method on the robot object
      robot.getTotalDeaths();
      
      // Assert that the id of the robot is equal to -3541
      assertEquals((-3541), robot.getId());
      
      // Assert that the round kills of the robot is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("POP", 1043, scoreKeeper);
      
      // Then the robot's desired heading should be 0
      assertEquals(0, robot.getDesiredHeading());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 1043
      assertEquals(1043, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("", 47, (RobotScore) null);
      robot.getHeading();
      assertEquals(47, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Setup
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1431655765), arg0);
      robot.addRobotListener(arg0);
      
      // Expected exception
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      robot.armorDepleted();
      });
      
      // Verify
      assertEquals("Expecting exception: NullPointerException", expectedException.getMessage());
      verifyException("net.virtualinfinity.atrobots.robot.Robot", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("", 2954, scoreKeeper);
      
      // Then the robot's speed should be 0
      assertEquals(0, robot.getSpeed());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 2954
      assertEquals(2954, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", 1024, scoreKeeper);
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 1024
      assertEquals(1024, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("m>3e!m!IdL2,", (-1), (RobotScore) null);
      robot.getAimTurretPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$GetRobotInfoInterrupt", (-730), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, lastDamageGiven.getCycles());
      assertEquals((-730), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetThrottle() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative throttle value
      Robot robot = new Robot("", 2954, scoreKeeper);
      robot.setThrottle(new Throttle((-824.93408096994)));
      
      // Verify that the robot's throttle value is set correctly
      assertEquals(0, robot.getRoundKills());
      assertEquals(2954, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShiftThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("o@G", 1, arg2);
      
      // Act and Assert
      try {
      robot.getTurretShift();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is thrown due to an uninitialized variable
      assertEquals("NullPointerException is thrown due to an uninitialized variable", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 8, arg2);
      robot.getOverburnLatchPort();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }
}
