/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Jun 16 17:29:51 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;
import net.virtualinfinity.atrobots.hardware.throttle.Throttle;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_ESOnly_ESTest extends Robot_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$GetRobotStatisticsInterrupt", 0, arg2);
      
      // Act and Assert
      try {
      robot.inflictedDamage(1115.1661670683416);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify exception
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Robot arg0 = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      // Undeclared exception!
      try { 
        arg0.checkCollision(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      // Given a robot with overburn set to true
      Robot robot = new Robot("", (-1), new RobotScoreKeeper());
      robot.setOverburn(true);
      
      // When the isOverburn method is called
      boolean overburn = robot.isOverburn();
      
      // Then the method should return true
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNonNull() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and an id of -406
      Robot robot = new Robot((String) null, (-406), arg2);
      
      // Set the turret of the robot
      Turret arg0 = new Turret();
      robot.setTurret(arg0);
      
      // Get the turret of the robot
      Turret turret = robot.getTurret();
      
      // Assert that the id of the robot is -406
      assertEquals((-406), robot.getId());
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Call the wonRound method with a null robot
      scoreKeeper.wonRound(null);
      
      // Copy the scoreKeeper's score to a new RobotScore object
      RobotScore robotScore = FinalRobotScore.copyOf(scoreKeeper);
      
      // Create a new Robot with the scoreKeeper's score and a new name
      Robot robot = new Robot("No-$>+\"JIY8bY]Y", 2673, robotScore);
      
      // Verify that the robot's total wins is 0
      assertEquals(0, robot.getTotalWins());
      
      // Verify that the robot's ID is 2673
      assertEquals(2673, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot with a specific ID
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 793, scoreKeeper);
      
      // When: The scoreKeeper is told that the robot has tied in a round
      scoreKeeper.tiedRound(robot);
      
      // Then: The robot's total ties should be 1
      assertEquals(1, robot.getTotalTies());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 793
      assertEquals(793, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("*.<w", 10, scoreKeeper);
      
      // When: The robot is killed
      scoreKeeper.killedRobot((Robot) null);
      
      // Then: The robot's total kills should be 0
      assertEquals(0, robot.getTotalKills());
      
      // And: The robot's round kills should be 10
      assertEquals(10, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("*>!o[}_-]r", 2482, scoreKeeper);
      
      // When: The robot dies
      scoreKeeper.died(robot);
      
      // Then: The robot's total deaths should be 1
      assertEquals(1, robot.getTotalDeaths());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 2482
      assertEquals(2482, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 57, arg2);
      robot.getName();
      assertEquals(0, robot.getRoundKills());
      assertEquals(57, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a copy of the RobotScoreKeeper
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      
      // Create a new Robot with the scoreKeeper and score
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 8, score);
      
      // Get the name of the robot
      String name = robot.getName();
      
      // Assert that the name of the robot is "Robot"
      assertEquals("Robot", name);
      
      // Assert that the robot's ID is 8
      assertEquals(8, robot.getId());
      
      // Assert that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // Given: A new robot with a specific name and score keeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("w0(70j2p(?>Il", 0, arg2);
      
      // When: The robot's id is retrieved
      int id = robot.getId();
      
      // Then: The id should be 0
      assertEquals(0, id);
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      // Create a new Robot with a null name and a negative ID
      Robot robot = new Robot((String) null, (-2121), arg2);
      // Get the ID of the robot
      int id = robot.getId();
      // Assert that the ID is equal to the negative ID
      assertEquals((-2121), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsPositive() throws Throwable  {
      // Given: A robot with a score keeper and armor
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot(">:<", 4752, scoreKeeper);
      Armor armor = new Armor(1904.0);
      
      // When: The robot's armor is set to a new value
      robot.setArmor(armor);
      
      // Then: The robot's armor should be updated
      assertEquals(armor, robot.getArmor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsNegative() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a name, id, and score keeper
      Robot robot = new Robot(">:<", 4752, scoreKeeper);
      
      // Create a new Armor with a negative value
      Armor armor = new Armor((-3000.4137305318254));
      
      // Set the armor of the robot
      robot.setArmor(armor);
      
      // Get the armor of the robot
      Armor robotArmor = robot.getArmor();
      
      // Assert that the armor of the robot is the same as the one set
      assertEquals(armor, robotArmor);
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the id of the robot is 4752
      assertEquals(4752, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      // Given a robot with a negative score
      Robot robot = new Robot("FZsuRqeVe", (-2356), (RobotScore) null);
      
      // When the robot is overburn
      robot.isOverburn();
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be the same as the input id
      assertEquals((-2356), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 2421, arg2);
      robot.getArmor();
      assertEquals(2421, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // Given a Robot object with a non-empty name and a score keeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 27, arg2);
      
      // When the getId method is called
      int id = robot.getId();
      
      // Then the correct id is returned
      assertEquals(27, id);
      
      // And the round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShield() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a specific id and score
      Robot robot = new Robot("]qo4GC?SRj\"`;<]s8", (-3358), robotScoreKeeper);
      
      // Then the robot's id and score should be set correctly
      assertEquals((-3358), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("rts}?uQ", 2143284642, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot is killed
      robot.killedRobot();
      
      // Then: The robot's total kills should be 1
      assertEquals(1, robot.getTotalKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRobot() throws Throwable  {
      // Given
      Robot robot = new Robot("F@oO", 3, (RobotScore) null);
      
      // When
      robot.tieRound();
      
      // Then
      assertEquals(3, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWinRound() throws Throwable  {
      // Given a robot with a negative id and no round kills
      Robot robot = new Robot("FZsuRqeVe", (-2356), (RobotScore) null);
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      robot.addRobotListener(arg0);
      
      // When the robot wins a round
      robot.winRound();
      
      // Then the robot's id should remain the same
      assertEquals((-2356), robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 2056, scoreKeeper);
      robot.setOverburn(true);
      
      // Act
      try {
      robot.armorDepleted();
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("net.virtualinfinity.atrobots.robot.Robot", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("]a`", (-926), arg0);
      robot.addRobotListener(arg0);
      
      // Expected exception
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      robot.armorDepleted();
      });
      
      // Verify
      assertEquals("Expecting exception: NullPointerException", expectedException.getMessage());
      verifyException("net.virtualinfinity.atrobots.robot.Robot", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRadar() throws Throwable  {
      // Given
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot", (-218), (RobotScore) null);
      Radar arg0 = new Radar();
      
      // When
      robot.setRadar(arg0);
      robot.getRadar();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-218), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // Create a new RobotScore object
      RobotScore robotScore = FinalRobotScore.copyOf(robotScoreKeeper);
      
      // Create a new Robot object
      Robot robot = new Robot("No-$>+\"JIY8bY]Y", 2673, robotScore);
      
      // Get the total wins of the robot
      int totalWins = robot.getTotalWins();
      
      // Assert that the total wins is 0
      assertEquals(0, totalWins);
      
      // Get the round kills of the robot
      int roundKills = robot.getRoundKills();
      
      // Assert that the round kills is 0
      assertEquals(0, roundKills);
      
      // Get the ID of the robot
      int id = robot.getId();
      
      // Assert that the ID is 2673
      assertEquals(2673, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiver() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("eWZ;XRz", 8, arg2);
      robot.getTransceiver();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShiftThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("^.R*g1D|~aW?;UK*-O", 1, arg2);
      
      // Act and Assert
      try {
      robot.getTurretShift();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is an instance of the expected type
      assertEquals(NullPointerException.class, e.getClass());
      
      // Verify that the message in the exception is null
      assertNull(e.getMessage());
      
      // Verify that the exception is an instance of the expected type
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("Jnz\"8.^)IB~q", (-516), arg2);
      robot.getTotalKills();
      assertEquals((-516), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonar() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and a score
      Robot robot = new Robot("F%K[ 'Z\"", 0, robotScoreKeeper);
      
      // Then the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // Arrange
      Robot robot = new Robot("Db,I*#v", 1767, (RobotScore) null);
      Duration arg0 = robot.getLastDamageTaken();
      
      // Act
      try {
      robot.update(arg0);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Assert
      assertEquals("net.virtualinfinity.atrobots.arena.Position", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandler() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("2^h!", 6, scoreKeeper);
      
      // Then: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be 6
      assertEquals(6, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // Given a robot with a name, score, and id
      Robot robot = new Robot("H7MGBng%E", 499, (RobotScore) null);
      
      // When the robot's odometer is retrieved
      robot.getOdometer();
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 499
      assertEquals(499, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Robot robot = new Robot("FZsuRqeVe", 17, (RobotScore) null);
      // Undeclared exception!
      try { 
        robot.destruct();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Given a Robot object with a name and an id
      Robot robot = new Robot("", (-1065), (RobotScore) null);
      
      // When the getName method is called
      String name = robot.getName();
      
      // Then the name of the Robot is returned
      assertEquals("", name);
      
      // When the getRoundKills method is called
      int roundKills = robot.getRoundKills();
      
      // Then the roundKills of the Robot is returned
      assertEquals(0, roundKills);
      
      // When the getId method is called
      int id = robot.getId();
      
      // Then the id of the Robot is returned
      assertEquals((-1065), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // Given a new Robot instance with a specific id and score
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      
      // When a new MineLayer is set on the Robot
      MineLayer mineLayer = new MineLayer(192);
      robot.setMineLayer(mineLayer);
      
      // Then the Robot's mineLayer should be set to the new MineLayer
      assertEquals(mineLayer, robot.getMineLayer());
      
      // And the Robot's id should be set to 0
      assertEquals(0, robot.getId());
      
      // And the Robot's roundKills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a specific ID and score
      Robot robot = new Robot("eWZ;XRz", 8, FinalRobotScore.copyOf(scoreKeeper));
      
      // Verify that the robot has the correct ID
      assertEquals(8, robot.getId());
      
      // Verify that the robot has a score of 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShift() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("^.R*g1D|~aW?;UK*-O", 1, scoreKeeper);
      Turret turret = new Turret();
      robot.setTurret(turret);
      
      // When
      robot.getTurretShift();
      
      // Then
      assertEquals(1, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // Given a robot with a score of 1
      Robot robot = new Robot("ET+1-[L", 1, (RobotScore) null);
      
      // When the robot is reset
      robot.reset();
      
      // Then the robot's score should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot should not be overburn
      assertFalse(robot.isOverburn());
      
      // And the robot's id should be 1
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadarReturningNull() throws Throwable  {
      // Given
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      
      // When
      robot.getRadar();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("^N", 111, scoreKeeper);
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 111
      assertEquals(111, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // And a Robot object with a name and score
      Robot robot = new Robot("x:,", 0, arg2);
      
      // When the getTotalTies method is called
      int totalTies = robot.getTotalTies();
      
      // Then the method should return 0
      assertEquals(0, totalTies);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and score
      Robot robot = new Robot("F%K[ 'Z\"", 0, robotScoreKeeper);
      
      // Then the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and ID
      Robot robot = new Robot("yAQto*nq_E8(2,F", 1, scoreKeeper);
      
      // Then the robot's ID should be 1
      assertEquals(1, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      robot.getMineLayer();
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBus() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("]qo4GC?SRj\"`;<]s8", (-3358), arg2);
      robot.getHardwareBus();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-3358), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTransponder() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a Transponder
      Robot robot = new Robot("'gmA !u<", (-2145002685), scoreKeeper);
      Transponder transponder = new Transponder();
      robot.setTransponder(transponder);
      
      // Verify that the Robot has a Transponder
      assertNotNull(robot.getTransponder());
      
      // Verify that the Robot's ID is correct
      assertEquals((-2145002685), robot.getId());
      
      // Verify that the Robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottleReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot((String) null, 31, (RobotScore) null);
      robot.getThrottle();
      assertEquals(0, robot.getRoundKills());
      assertEquals(31, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateSpecificSnapshotThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Robot robot = new Robot("Db,I*#v", 1767, (RobotScore) null);
      // Undeclared exception!
      try { 
        robot.createSpecificSnapshot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a transponder
      Robot robot = new Robot(">:<", 4752, scoreKeeper);
      
      // Then: The robot's id should be 4752
      assertEquals(4752, robot.getId());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name, -1431655770 as the id, and the RobotScoreKeeper object as the score keeper
      Robot robot = new Robot((String) null, (-1431655770), arg2);
      
      // Call the getHeatSinks method on the robot object
      robot.getHeatSinks();
      
      // Assert that the round kills of the robot object is equal to 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the id of the robot object is equal to -1431655770
      assertEquals((-1431655770), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetArmor() throws Throwable  {
      // Given: A robot with a null armor
      Robot robot = new Robot("Db,I*#v", 1767, (RobotScore) null);
      Armor arg0 = new Armor(1767);
      robot.setArmor(arg0);
      
      // When: The robot creates a specific snapshot
      try {
      robot.createSpecificSnapshot();
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then: The method should throw a NullPointerException
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Given a new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot is created with a negative ID
      Robot robot = new Robot("", (-1), scoreKeeper);
      
      // Then the robot's total deaths should be 0
      assertEquals(0, robot.getTotalDeaths());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's ID should be negative
      assertEquals((-1), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 27, arg2);
      robot.getDesiredHeading();
      assertEquals(0, robot.getRoundKills());
      assertEquals(27, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("JZ", (-1646), arg2);
      robot.getHeading();
      assertEquals((-1646), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Given a robot with a name, id, and score keeper
      Robot robot = new Robot("F@oO", 3, (RobotScore) null);
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      robot.addRobotListener(arg0);
      
      // When the robot ties a round
      robot.tieRound();
      
      // Then the round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the id should be 3
      assertEquals(3, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score
      Robot robot = new Robot("_q0f=w@'pZ", (-1681), robotScoreKeeper);
      
      // Then the robot's speed should be 0
      assertEquals(0, robot.getSpeed());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be (-1681)
      assertEquals((-1681), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // Given a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot is created with a negative id
      Robot robot = new Robot("", (-1), scoreKeeper);
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be negative
      assertEquals((-1), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a specific ID
      Robot robot = new Robot("~^rFZx[a#xNxV", (-1081), scoreKeeper);
      
      // Test that the robot's ID is set correctly
      assertEquals((-1081), robot.getId());
      
      // Test that the robot's round kills is set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("_q0f=w@'pZ", (-1681), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, lastDamageGiven.getCycles());
      assertEquals((-1681), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetThrottle() throws Throwable  {
      // Given
      Robot robot = new Robot((String) null, 31, (RobotScore) null);
      Throttle arg0 = new Throttle(31);
      
      // When
      robot.setThrottle(arg0);
      Throttle result = robot.getThrottle();
      
      // Then
      assertEquals(31, robot.getId());
      assertEquals(0, robot.getRoundKills());
      assertEquals(arg0, result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 288, arg2);
      robot.getTurret();
      assertEquals(288, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with an ID of 111
      Robot robot = new Robot("^N", 111, scoreKeeper);
      
      // Verify that the robot's ID is 111
      assertEquals(111, robot.getId());
      
      // Verify that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }
}
