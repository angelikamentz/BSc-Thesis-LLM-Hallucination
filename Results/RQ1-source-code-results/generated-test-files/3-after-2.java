/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Jun 16 00:21:12 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_SRC_ESTest extends ClassReader_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabelThrowsNullPointerException() throws Throwable  {
      // Given
      byte[] arg0 = new byte[18];
      ClassReader classReader = new ClassReader(arg0);
      
      // When
      try {
      classReader.readLabel(4, (Label[]) null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then
      assertEquals("No message in exception", null, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyPool() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      ClassWriter arg0 = new ClassWriter(409);
      
      // When
      classReader.copyPool(arg0);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      // When
      short readShort = classReader.readShort(4);
      // Then
      assertEquals(3278, classReader.header);
      assertEquals((short) 0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      short expected = (short) (-9718);
      
      // When
      short readShort = classReader.readShort(64);
      
      // Then
      assertEquals(expected, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      long expectedLong = 84734964565855753L;
      
      // When
      long readLong = classReader.readLong(8);
      
      // Then
      assertEquals(expectedLong, readLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int index = 307;
      
      // When
      int readInt = classReader.readInt(index);
      
      // Then
      assertEquals(3278, classReader.header);
      assertEquals(167794176, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstReturningNonNull() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      char[] arg1 = new char[4];
      
      // When
      Object readConst = classReader.readConst(249, arg1);
      
      // Then
      assertEquals("push", readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningZero() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int index = 3278;
      
      // When
      int readByte = classReader.readByte(index);
      
      // Then
      assertEquals(0, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccessReturningZero() throws Throwable  {
      // Given
      byte[] arg0 = new byte[18];
      ClassReader classReader = new ClassReader(arg0);
      
      // When
      int access = classReader.getAccess();
      
      // Then
      assertEquals(10, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConst() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      char[] arg1 = new char[3];
      
      // When
      Object readConst = classReader.readConst(187, arg1);
      
      // Then
      assertEquals(2, readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsWithNonEmptyArray() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      ClassWriter arg0 = new ClassWriter(123);
      Attribute[] arg1 = new Attribute[1];
      
      // When
      classReader.accept((ClassVisitor) arg0, arg1, 234);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments0() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      ClassWriter arg0 = new ClassWriter(11);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 646);
      
      // Then
      assertEquals(48, classReader.getAccess());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShort() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int index = 2;
      
      // When
      int readUnsignedShort = classReader.readUnsignedShort(index);
      
      // Then
      assertEquals(3278, classReader.header);
      assertEquals(47806, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClass() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      
      // Act
      char[] arg1 = new char[7];
      String readClass = classReader.readClass(101, arg1);
      
      // Assert
      assertEquals(3278, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      // Undeclared exception!
      try { 
        classReader.readConst(234, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      char[] arg1 = new char[2];
      // Undeclared exception!
      try { 
        classReader.readUTF8(234, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      char[] arg1 = new char[1];
      // Undeclared exception!
      try { 
        classReader.readUTF8(23, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      char[] arg1 = new char[1];
      // Undeclared exception!
      try { 
        classReader.readConst(118, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments1() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      ClassWriter arg0 = new ClassWriter((-8));
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 272);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments2() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      ClassWriter arg0 = new ClassWriter(3278);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 187);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments3() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(409);
      ClassReader classReader = new ClassReader("java/lang/Object");
      
      // When
      classReader.accept(classWriter, (Attribute[]) null, 108);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfaces() throws Throwable  {
      byte[] arg0 = new byte[18];
      ClassReader classReader = new ClassReader(arg0);
      
      // When: The getInterfaces method is called
      String[] interfaces = classReader.getInterfaces();
      
      // Then: The method should return an empty array
      assertEquals(0, interfaces.length);
      
      // And: The header of the class file should be 10
      assertEquals(10, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNull() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      String superName = classReader.getSuperName();
      assertNull(superName);
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNonEmptyString() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      String superName = classReader.getSuperName();
      assertEquals("java/lang/Object", superName);
      assertEquals(3278, classReader.header);
      assertNotNull(superName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter(4);
      
      // When
      classReader.accept((ClassVisitor) arg0, 2);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int index = 2;
      
      // When
      int readByte = classReader.readByte(index);
      
      // Then
      assertEquals(3278, classReader.header);
      assertEquals(186, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int item = classReader.getItem(2);
      
      // When
      int result = classReader.getItem(item);
      
      // Then
      assertEquals(16, result);
      assertEquals(3278, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      long expectedLong = (-9223371998185324311L);
      int index = 187;
      
      // When
      long readLong = classReader.readLong(index);
      
      // Then
      assertEquals(expectedLong, readLong);
      assertEquals(3278, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccessReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      
      // When
      int access = classReader.getAccess();
      
      // Then
      assertEquals(48, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      
      // Act
      String className = classReader.getClassName();
      int header = classReader.header;
      
      // Assert
      assertEquals("org/objectweb/asm/jip/Frame", className);
      assertEquals(3278, header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int index = 2538;
      
      // When
      short readShort = classReader.readShort(index);
      
      // Then
      assertEquals((short) 17733, readShort);
      assertEquals(3278, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Frame");
      int expectedHeader = 3278;
      int expectedReadInt = -133562282;
      
      // When
      int readInt = classReader.readInt(291);
      
      // Then
      assertEquals(expectedHeader, classReader.header);
      assertEquals(expectedReadInt, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingStringThrowsIOException() throws Throwable  {
      // Arrange
      ClassReader classReader = null;
      
      // Act
      try {
      classReader = new ClassReader("StackMapTable");
      } catch (IOException e) {
      // Assert
      fail("Expecting exception: IOException");
      }
      
      // Assert
  }
}
