/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sat Jun 15 14:22:26 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_SRC_ESTest extends ClassReader_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      char[] arg1 = new char[6];
      
      // When
      String readUTF8 = classReader.readUTF8(16, arg1);
      
      // Then
      assertArrayEquals(new char[] {'.', 'j', 'a', 'r', '\u0000', '\u0000'}, arg1);
      assertEquals(".jar", readUTF8);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      short expectedShort = (short) 0;
      int expectedHeader = 4801;
      
      // When
      short readShort = classReader.readShort(4);
      int header = classReader.header;
      
      // Then
      assertEquals(expectedShort, readShort);
      assertEquals(expectedHeader, header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int index = 105;
      
      // When
      short readShort = classReader.readShort(index);
      
      // Then
      assertEquals((short) 8, readShort);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      long expectedLong = (-4755801205697931254L);
      int index = 3;
      
      // When
      long readLong = classReader.readLong(index);
      
      // Then
      assertEquals(expectedLong, readLong);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabel() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      Label[] arg1 = new Label[8];
      
      // When
      classReader.readLabel(2, arg1);
      
      // Then
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int expected = 1441815;
      
      // When
      int readInt = classReader.readInt(120);
      
      // Then
      assertEquals(expected, readInt);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConst() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      char[] arg1 = new char[22];
      
      // When
      Object readConst = classReader.readConst(1, arg1);
      
      // Then
      assertEquals("\u0007\u0000\u0014\u0001\u0000\u0006<init>\u0001\u0000\u0003()V\u0001", readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningZero() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int index = 320;
      
      // When
      int readByte = classReader.readByte(index);
      
      // Then
      assertEquals(0, readByte);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShort() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int index = 317;
      
      // When
      int readUnsignedShort = classReader.readUnsignedShort(index);
      
      // Then
      assertEquals(259, classReader.header);
      assertEquals(10240, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      long expectedLong = 7666643290552276586L;
      int index = 176;
      
      // When
      long readLong = classReader.readLong(index);
      
      // Then
      assertEquals(expectedLong, readLong);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClass() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      char[] arg1 = new char[9];
      
      // Act
      String readClass = classReader.readClass(2853, arg1);
      
      // Assert
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      char[] arg1 = new char[7];
      // Undeclared exception!
      try { 
        classReader.readConst(142, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      char[] arg1 = new char[2];
      // Undeclared exception!
      try { 
        classReader.readConst(2, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      // Undeclared exception!
      try { 
        classReader.readUTF8(4, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsThrowsTooManyResourcesException() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter((-1063));
      Attribute[] arg1 = new Attribute[5];
      
      // Act
      classReader.accept((ClassVisitor) arg0, arg1, 248);
      
      // Assert
      // TODO: Add assertions to ensure that the method is behaving as expected
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter((-4772));
      
      // When
      classReader.accept((ClassVisitor) arg0, 1100);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsWithEmptyArray() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      ClassWriter arg0 = new ClassWriter(4);
      Attribute[] arg1 = new Attribute[0];
      
      // When
      classReader.accept((ClassVisitor) arg0, arg1, 224);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsWithNull() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter((-4772));
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 6);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTaking3Arguments() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      ClassReader arg0 = new ClassReader(classReader.b, 8, 1);
      ClassWriter classWriter = null;
      
      // When
      try {
      classWriter = new ClassWriter(arg0, 1);
      } catch(ArrayIndexOutOfBoundsException e) {
      // no message in exception (getMessage() returned null)
      }
      
      // Then
      assertNull(classWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      String[] interfaces = classReader.getInterfaces();
      assertEquals(1, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfacesReturningEmptyArray() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      
      // Act
      String[] interfaces = classReader.getInterfaces();
      
      // Assert
      assertEquals(0, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperName() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      String superName = classReader.getSuperName();
      assertEquals("java/lang/Object", superName);
      assertNotNull(superName);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int readByte = classReader.readByte(1);
      assertEquals(259, classReader.header);
      assertEquals(254, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      int item = classReader.getItem(2);
      assertEquals(259, classReader.header);
      assertEquals(16, item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTakingString() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter classWriter = new ClassWriter(classReader, 1480);
      
      // When
      int computeFrames = classWriter.COMPUTE_FRAMES;
      
      // Then
      assertEquals(2, computeFrames);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      
      // When
      int access = classReader.getAccess();
      
      // Then
      assertEquals(32, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // Arrange
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      
      // Act
      String className = classReader.getClassName();
      int header = classReader.header;
      
      // Assert
      assertEquals("java/lang/Throwable", className);
      assertEquals(4801, header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      short expected = (short) (-326);
      
      // When
      short readShort = classReader.readShort(1);
      
      // Then
      assertEquals(expected, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      int readInt = classReader.readInt(1);
      assertEquals(4801, classReader.header);
      assertEquals((-21316096), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingStringThrowsIOException() throws Throwable  {
      // Given
      ClassReader classReader = null;
      
      // When
      try {
      classReader = new ClassReader("jva/lang/Throwable");
      } catch(Throwable e) {
      // Class not found
      verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
      
      // Then
      assertNull(classReader);
  }
}
