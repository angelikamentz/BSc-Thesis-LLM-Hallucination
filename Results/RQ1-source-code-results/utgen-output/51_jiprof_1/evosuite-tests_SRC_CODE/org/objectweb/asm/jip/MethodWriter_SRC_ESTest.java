/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 14 17:50:20 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_SRC_ESTest extends MethodWriter_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // Given
      byte[] bytes = new byte[9];
      bytes[6] = (byte) 29;
      
      // When
      int readUnsignedShort = MethodWriter.readUnsignedShort(bytes, 6);
      
      // Then
      assertEquals(7424, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter(2081);
      byte[] arg0 = classWriter.toByteArray();
      short readShort = MethodWriter.readShort(arg0, 12);
      assertEquals((short)0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // No Comments were added
      byte[] arg0 = new byte[9];
      arg0[2] = (byte) (-25);
      int readInt = MethodWriter.readInt(arg0, 2);
      assertEquals((-419430400), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize() throws Throwable  {
      // Given: A method writer with a non-zero class reader offset
      ClassWriter classWriter = new ClassWriter(2081);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2081, "n:=u]st%={qh", "n:=u]st%={qh", (String) null, new String[0], false, false);
      methodWriter.classReaderOffset = 10;
      
      // When: The method writer is asked to get its size
      int size = methodWriter.getSize();
      
      // Then: The size should be 8
      assertEquals(8, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments() throws Throwable  {
      int[] indexes = new int[] { 1, 2, 3, 4, 5 };
      int[] sizes = new int[] { 1, 2, 3, 4, 5 };
      int begin = 2;
      int end = 4;
      Label arg2 = new Label();
      int[] arg1 = new int[0];
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      assertEquals(0, arg1.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      int[] arg1 = new int[7];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 5, 5);
      assertEquals(0, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningPositive() throws Throwable  {
      int[] arg1 = new int[5];
      arg1[0] = 2197;
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-4561), 21);
      assertEquals(4582, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      int[] arg1 = new int[5];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 537, (-1566));
      assertEquals((-2103), newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnAndVisitTryCatchBlock() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(239);
      MethodWriter methodWriter = new MethodWriter(arg0, 3599, "?1msF*n", "java/lang/Throwable", "X'uk", (String[]) null, false, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "java/lang/Throwable");
      methodWriter.visitIntInsn(57, 1813);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(129, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(2081);
      String[] methodNames = new String[0];
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 2081, "nn:=uXB]st%={qh", "nn:=uXB]st%={qh", (String) null, methodNames, false, false);
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(50, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-248));
      classWriter.version = 128;
      MethodWriter methodWriter = new MethodWriter(classWriter, (-248), "Code", "xoid", "Code", (String[]) null, false, false);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(85, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumber() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2081, "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", arg5, false, false);
      Label arg1 = new Label();
      methodWriter.visitTypeInsn(134, "Sn?`+&d.a_elRY0");
      methodWriter.visitLineNumber((-1623953025), arg1);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(131, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableAndVisitTypeInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2081, "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", arg5, false, false);
      Label arg4 = new Label();
      methodWriter.visitTypeInsn(134, "Sn?`+&d.a_elRY0");
      methodWriter.visitLocalVariable("InnerClasses", "InnerClasses", "Sn?`+&d.a_elRY0", arg4, arg4, (-651));
      byte[] byteArray = arg0.toByteArray();
      assertEquals(198, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter2() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(232);
      MethodWriter methodWriter = new MethodWriter(classWriter, 232, "Code", "Code", "Code", (String[]) null, false, false);
      methodWriter.classReaderOffset = 232;
      
      // Act and Assert
      try {
      classWriter.toByteArray();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter3() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-248));
      MethodWriter methodWriter = new MethodWriter(classWriter, (-248), "Code", "xoid", "Code", (String[]) null, false, false);
      byte[] byteArray = classWriter.toByteArray();
      // When
      assertEquals(103, byteArray.length);
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1955209601));
      String[] arg5 = new String[1];
      arg5[0] = "2QJh8uM06RFr?";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "2QJh8uM06RFr?", "2QJh8uM06RFr?", "2QJh8uM06RFr?", arg5, false, false);
      Object[] arg4 = new Object[12];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte)0, 17, arg4, (byte)0, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsAndVisitIntInsnAndVisitJumpInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "Deprecated";
      MethodWriter methodWriter = new MethodWriter(arg0, (-234), "Deprecated", " I]5^V);-?#-B", "/NlY!IpJ`=t;\"P/6T", arg5, true, false);
      methodWriter.visitIntInsn((-234), 2);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(188, arg1);
      methodWriter.visitMaxs(184, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "xB`id";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "xB`id", " I]5^V);-?[-B", "xB`id", arg5, true, false);
      Label arg2 = new Label();
      Label arg1 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "xB`id");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs((-234), (-1210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsAndVisitTryCatchBlock() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "xB`id";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "xB`id", " I]5^V);-?[-B", "xB`id", arg5, true, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "xB`id");
      methodWriter.visitMaxs((-234), (-1210));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "xB`id";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "xB`id", " I]5^V);-?[-B", "xB`id", arg5, true, true);
      Label arg2 = new Label();
      Label arg1 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "xB`id");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs((-234), (-1210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "xB`id";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "xB`id", " I]5^V);-?[-B", "xB`id", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "xB`id");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs((-234), (-1210));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVa-iatley3eT<bl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVa-iatley3eT<bl5", "NI]i!^P);)-?[-B", "LocalVa-iatley3eT<bl5", arg5, true, true);
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(0, (-4411));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxs() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      methodWriter.visitMaxs(2, 253);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumberWithPositive() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "", "", "Yyz*\"aG*8kFRJ", arg5, false, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(2, arg1);
      methodWriter.visitLineNumber((-1461622462), arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)57, "RuntimeInvisibleAnnotations", " I]5^V);-?#-B", "/NlY!IpJ`=t;\"P/6T", arg5, true, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("/NlY!IpJ`=t;\"P/6T", "Deprecated", "/NlY!IpJ`=t;\"P/6T", arg4, arg4, (byte)16);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableAndVisitLocalVariableWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "RuntimeInvisibleAnnotations", " I]5^V);-?#-B", "/N:Y!Ipb`=t;\"P/6T", arg5, true, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("Z@06Fy&", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", arg4, arg4, 2);
      methodWriter.visitLocalVariable("/N:Y!Ipb`=t;\"P/6T", " I]5^V);-?#-B", "/N:Y!Ipb`=t;\"P/6T", arg4, arg4, (-682));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2931), "RuntimeInvisibleAnnotations", " I]5^V);-?#-B", "/NlY!IpJ`=t;\"P/6T", arg5, true, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("XD?HzLP{XbZ?7gNIm", "J", "<&\"dlLj,_*eL{ZGj", arg4, arg4, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      String[] arg5 = new String[1];
      arg5[0] = "";
      ClassWriter arg0 = new ClassWriter(4096);
      MethodWriter methodWriter = new MethodWriter(arg0, 1296, "", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", arg5, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitLocalVariable("@B\"75\"", ")V", (String) null, (Label) null, (Label) null, (-1938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlock() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTy3eTabl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTy3eTabl5", " I]5^V);-?[-B", "LocalVariableTy3eTabl5", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "LocalVariableTy3eTabl5");
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTy3eTabl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTy3eTabl5", " I]5^V);-?[-B", "LocalVariableTy3eTabl5", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, (String) null);
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-212));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTypeTable";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTypeTable", " x]5^V);-?[-B", "LocalVariableTypeTable", arg5, true, true);
      methodWriter.visitMultiANewArrayInsn(" x]5^V);-?[-B", 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      methodWriter.visitMultiANewArrayInsn(".JAR", 253);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTy3eTabl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTy3eTabl5", " I]5^V);-?[-B", "LocalVariableTy3eTabl5", arg5, true, true);
      Label arg2 = new Label();
      Label[] arg3 = new Label[2];
      arg3[0] = arg2;
      arg3[1] = arg2;
      methodWriter.visitTableSwitchInsn(191, 191, arg2, arg3);
      assertEquals(2, arg3.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnAndVisitIincInsnWithNegative0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2081, "Sn?`+&d.a_elRY0", "org.objectweb.asm.jip.Type", "org.objectweb.asm.jip.Type", arg5, false, false);
      methodWriter.visitIincInsn(2204, (-545));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnAndVisitIincInsnWithNegative1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(179);
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "RuntimeInvisibleAnnotations", " I]5^V);-?#-3", "RuntimeInvisibleAnnotations", arg5, true, false);
      methodWriter.visitIincInsn((byte)64, (-1447));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnAndVisitIincInsnWithPositive0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-221));
      String[] arg5 = new String[1];
      arg5[0] = ">q---I5Ku";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ">q---I5Ku", " I]5V);-?#-B", ">q---I5Ku", arg5, true, true);
      methodWriter.visitIincInsn(1, 68);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnAndVisitIincInsnWithPositive1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      methodWriter.visitIincInsn(1, 25165824);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVa-iatley3eT<bl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVa-iatley3eT<bl5", "NI]i!^P);)-?[-B", "LocalVa-iatley3eT<bl5", arg5, true, true);
      methodWriter.visitLdcInsn("LocalVa-iatley3eT<bl5");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "7d";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "7d", " I]5^V);-?#-B", " I]5^V);-?#-B", arg5, true, false);
      methodWriter.visitLdcInsn(" I]5^V);-?#-B");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1994));
      String[] arg5 = new String[1];
      arg5[0] = "G";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", "G", arg5, false, false);
      methodWriter.visitLdcInsn("G");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(16777226);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "org.ob8ec.web.asm.jip.ByteVector", "org.ob8ec.web.asm.jip.ByteVector", (String) null, (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(1589, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsnWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTypeTable";
      MethodWriter methodWriter = new MethodWriter(arg0, (-2932), "LocalVariableTypeTable", " I]5^V);-?[-B", "LocalVariableTypeTable", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn(" I]5^V);-?[-B", (-2932));
      methodWriter.visitMethodInsn(1, "LocalVariableTypeTable", "LocalVariableTypeTable", " I]5^V);-?[-B");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTy3eTabl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTy3eTabl5", " I]5^V);-?[-B", "LocalVariableTy3eTabl5", arg5, true, true);
      methodWriter.visitMethodInsn(1, "LocalVariableTy3eTabl5", "LocalVariableTy3eTabl5", "ConstantValue");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2115);
      String[] arg5 = new String[3];
      arg5[0] = "org.objectweb.asm.jip.Frame";
      arg5[1] = "org.objectweb.asm.jip.Frame";
      arg5[2] = "org.objectweb.asm.jip.Frame";
      MethodWriter methodWriter = new MethodWriter(arg0, 179, "org.objectweb.asm.jip.Frame", "org.objectweb.asm.jip.Frame", "org.objectweb.asm.jip.Frame", arg5, false, false);
      methodWriter.visitMethodInsn(186, "l},qKQcp>Aie_W22O1", "RuntimeInvisibleAnnotations", "=rpGql3(0#");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitMethodInsn(185, ".JAR", ".JAR", "~cG3a?zbO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnAndVisitLdcInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(55);
      String[] arg5 = new String[1];
      arg5[0] = "org.objectweb.asm.jip.ClassReder";
      MethodWriter methodWriter = new MethodWriter(arg0, 55, "org.objectweb.asm.jip.ClassReder", " I]5^V);-?#-B", "org.objectweb.asm.jip.ClassReder", arg5, true, false);
      methodWriter.visitFieldInsn(2, "E:jX~!", "E:jX~!", "E:jX~!");
      methodWriter.visitLdcInsn("E:jX~!");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-244));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "RuntimeInvisibleAnnotations", " I]5^V);-?#-3", "/N:Y!Ipb`=t;\"P/6T", arg5, true, false);
      methodWriter.visitFieldInsn((-2888), "HU0zVJqyIn", "RuntimeVisibleParameterAnnotations", "JkIZB5F,Of<v!?``pS");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-237));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "RuntimeInvisibleAnnotations", " I]5^V);-?#-B", "/N:Y!Ipb`=t;\"P/6T", arg5, true, false);
      methodWriter.visitFieldInsn(179, " I]5^V);-?#-B", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVa-iatley3eT<bl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVa-iatley3eT<bl5", "NI]i!^P);)-?[-B", "LocalVa-iatley3eT<bl5", arg5, true, true);
      methodWriter.visitFieldInsn(2, "NI]i!^P);)-?[-B", "LocalVa-iatley3eT<bl5", "LocalVa-iatley3eT<bl5");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithEmptyString() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "", " I]5^V);-?#-B", "", arg5, true, false);
      methodWriter.visitFieldInsn(178, "M", "", " I]5^V);-?#-B");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      methodWriter.visitFieldInsn(2, "=NncKJCN9NvHPrI", "=NncKJCN9NvHPrI", ".JAR");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "7d";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "7d", " I]5^V);-?#-B", " I]5^V);-?#-B", arg5, true, false);
      methodWriter.visitTypeInsn(187, "%&Ola;t1;8I\"aeISI");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVa-iatley3eT<bl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVa-iatley3eT<bl5", "NI]i!^P);)-?[-B", "LocalVa-iatley3eT<bl5", arg5, true, true);
      methodWriter.visitTypeInsn(1, "LocalVa-iatley3eT<bl5");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsnWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "7d";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "7d", " I]5^V);-?#-B", " I]5^V);-?#-B", arg5, true, false);
      methodWriter.visitTypeInsn((-234), "7d");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-263));
      String[] arg5 = new String[1];
      arg5[0] = "F";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "F", " I]5^V);-?#-B", " I]5^V);-?#-B", arg5, true, true);
      methodWriter.visitVarInsn(56, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1004));
      String[] arg5 = new String[4];
      arg5[0] = " I]5^V);-?#-B";
      arg5[1] = ">n(L(\"?]|R6@4Nm|5'i";
      arg5[2] = " I]5^V);-?#-B";
      arg5[3] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 57, " I]5^V);-?#-B", " I]5^V);-?#-B", ">n(L(\"?]|R6@4Nm|5'i", arg5, true, false);
      methodWriter.visitVarInsn(57, (-1004));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-264));
      String[] arg5 = new String[1];
      arg5[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "", " I]5^V);-?#-B", "", arg5, true, false);
      methodWriter.visitVarInsn(169, 250);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-230));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "RuntimeInvisibleAnnotations", " I]5^V);-?#-B", "/N:Y!Ipb`=t;\"P/6T", arg5, true, false);
      methodWriter.visitVarInsn(24, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn3() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2081, "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", arg5, false, false);
      methodWriter.visitVarInsn(1, 619);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      methodWriter.visitIntInsn(17, 253);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnAndVisitMethodInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-212));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVariableTypeTable";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTypeTable", " x]5^V);-?[-B", "LocalVariableTypeTable", arg5, true, false);
      methodWriter.visitMethodInsn(1, "LocalVariableTypeTable", "LocalVariableTypeTable", " x]5^V);-?[-B");
      methodWriter.visitIntInsn((-212), (-212));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-263));
      String[] arg5 = new String[1];
      arg5[0] = "F";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "F", " I]5^V);-?#-B", " I]5^V);-?#-B", arg5, true, true);
      // Undeclared exception!
      try { 
        methodWriter.visitIntInsn((-263), 1048575);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "", " I]5^V);-?#-B", "", arg5, true, false);
      methodWriter.visitIntInsn(188, 4111);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "RuntimeInvisibleAnnotations", " I]5^V);-?#-B", "/N:Y!Ipb`=t;\"P/6T", arg5, true, false);
      methodWriter.visitInsn(176);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2062);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Sn'`+&d.a_elRj0", " I]5V);-?#-B", " I]5V);-?#-B", (String[]) null, true, false);
      methodWriter.visitInsn(188);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1994));
      String[] arg4 = new String[1];
      arg4[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1994), "", "", "", arg4, false, false);
      methodWriter.visitInsn(2);
      methodWriter.visitFrame(12, 12, arg4, (-1994), arg4);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(163, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsExceptionAndVisitFrameWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1955209601));
      String[] arg4 = new String[1];
      arg4[0] = "2QJh8uM06RFr?";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "2QJh8uM06RFr?", "2QJh8uM06RFr?", "2QJh8uM06RFr?", arg4, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte)0, 17, arg4, (byte)0, arg4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithEmptyArrayAndEmptyArray() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(37);
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 37, "YjA\"84[ myQQ{t", "YjA\"84[ myQQ{t", "YjA\"84[ myQQ{t", arg4, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(4, 4, arg4, 1636, arg4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrame() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg4 = new String[5];
      arg4[0] = "";
      arg4[1] = "RuntimeVisibleAnnotations";
      arg4[2] = "Ljava/lang/Synthetic;";
      arg4[3] = "";
      arg4[4] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter = new MethodWriter(arg0, 8, "", "", "RuntimeVisibleAnnotations", arg4, false, false);
      methodWriter.visitFrame(1, 1, arg4, (-2957), arg4);
      assertEquals(5, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-205));
      String[] arg4 = new String[1];
      arg4[0] = "aP**^{?PZrE>";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "aP**^{?PZrE>", "aP**^{?PZrE>", "~", arg4, false, false);
      methodWriter.visitFrame((byte)0, (byte)0, arg4, 1, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithPositive() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-212));
      String[] arg4 = new String[1];
      arg4[0] = "LocalVariableTypeTable";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVariableTypeTable", " x]5^V);-?[-B", "LocalVariableTypeTable", arg4, true, false);
      methodWriter.visitFrame(3, 1, arg4, (-212), arg4);
      methodWriter.visitFrame(3, 37, arg4, 37, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitIntInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1980));
      String[] arg4 = new String[1];
      arg4[0] = "}7(dC)";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1980), "~Vd^o", "org.objectweb.asm.jip.MethodWriter", "}7(dC)", arg4, false, false);
      methodWriter.visitFrame((-12), (-12), arg4, 1, arg4);
      methodWriter.visitIntInsn(2, (-12));
      methodWriter.visitFrame((-12), 2988, arg4, 2, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1994));
      String[] arg4 = new String[1];
      arg4[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-616), "org.obectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.MethodWriter", "org.obectweb.asm.jip.ClassAdapter", arg4, false, false);
      methodWriter.visitFrame(12, 12, arg4, (-1994), arg4);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(1, 2, arg4, (-616), arg4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNegativeAndVisitFrameWithPositive() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-206));
      String[] arg5 = new String[1];
      arg5[0] = "Q$<,";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "Q$<,", "Q$<,", "Q$<,", arg5, false, false);
      Object[] arg4 = new Object[34];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte) (-1), (byte) (-1), arg4, 1, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithNegativeAndVisitFrameWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-242));
      String[] arg4 = new String[1];
      arg4[0] = "RuntimeInvisibleAnnotations";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)104, "RuntimeInvisibleAnnotations", "]O]!g)03Y", "RuntimeInvisibleAnnotations", arg4, true, false);
      methodWriter.visitFrame((byte) (-1), (byte)0, arg4, (byte)0, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1955209601));
      String[] arg5 = new String[1];
      arg5[0] = "RQJh8uMu6RFr?";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "RQJh8uMu6RFr?", "RQJh8uMu6RFr?", "RQJh8uMu6RFr?", arg5, false, false);
      Object[] arg4 = new Object[12];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte) (-1), 17, arg4, (byte)0, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsExceptionAndVisitFrameWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-206));
      String[] arg4 = new String[1];
      arg4[0] = "Q$<,";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "Q$<,", "Q$<,", "Q$<,", arg4, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte) (-1), (byte) (-1), arg4, 1, arg4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1955209601));
      String[] arg4 = new String[1];
      arg4[0] = "RQJh8uMu6RFr?";
      MethodWriter methodWriter = new MethodWriter(arg0, (byte)0, "RQJh8uMu6RFr?", "RQJh8uMu6RFr?", "RQJh8uMu6RFr?", arg4, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte) (-1), 17, arg4, 2662, arg4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-221));
      String[] arg4 = new String[1];
      arg4[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "", " I]5^V);-?#-B", "", arg4, true, true);
      methodWriter.visitFrame(2, (-221), arg4, 1, arg4);
      assertEquals(1, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(253);
      MethodWriter methodWriter = new MethodWriter(arg0, 253, ".JAR", ".JAR", ".JAR", (String[]) null, false, false);
      methodWriter.visitFrame(2, 2, (Object[]) null, 2, (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithZero() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-609));
      String[] arg5 = new String[1];
      arg5[0] = "LocalVa-iatley3eT<bl5";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "LocalVa-iatley3eT<bl5", "NI]i!^P);)-?[-B", "LocalVa-iatley3eT<bl5", arg5, true, true);
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(0, "Signature", true);
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-2087));
      String[] arg5 = new String[1];
      arg5[0] = ")V";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "YjA\"84[ myQQ{t", "y]:1FJf4|", ")V", arg5, false, false);
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation((-1956772079), "Ljava/lang/Synthetic;", true);
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-1033), "Sn?`+&d.a_elRY0", "byte", "Sn?`+&d.a_elRY0", arg5, false, false);
      // Undeclared exception!
      try { 
        methodWriter.visitParameterAnnotation(2, "Sn?`+&d.a_elRY0", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithNonEmptyStringAndTrue() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(37);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 37, "g/AN{P", "g/AN{P", "g/AN{P", methodNames, false, false);
      methodWriter.visitAnnotation("g/AN{P", true);
      
      // When
      byte[] byteArray = classWriter.toByteArray();
      
      // Then
      assertEquals(101, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithEmptyStringAndFalse() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-1994));
      String[] arg5 = new String[1];
      arg5[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "org.objectweb.asm.jip.ClassAdapter", "org.objectweb.asm.jip.ClassAdapter", "", arg5, false, false);
      methodWriter.visitAnnotation("", false);
      byte[] byteArray = arg0.toByteArray();
      assertEquals(160, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesMethodWriter4() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(74);
      MethodWriter methodWriter = new MethodWriter(arg0, 185, "Sn'`+&d.a_elRj0", " I]5V);-?#-B", (String) null, (String[]) null, false, true);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(2062);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Sn'\"@`+&d.a_elRj0", " I]5V);-?#-B", " I]5V);-?#-B", (String[]) null, true, false);
      methodWriter.visitInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(16777226);
      MethodWriter methodWriter = null;
      
      // Act
      try {
      methodWriter = new MethodWriter(classWriter, 1, "<init>", "v~1%mh<", "~Qh<", (String[]) null, true, true);
      } catch(StringIndexOutOfBoundsException e) {
      // Assert
      assertTrue(true);
      }
      
      // Assert
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2081, "nn:=uXB]st%={qh", "nn:=uXB]st%={qh", (String) null, arg5, false, false);
      methodWriter.visitEnd();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(2081);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2081, "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", "Sn?`+&d.a_elRY0", arg5, false, false);
      methodWriter.visitAnnotationDefault();
      byte[] byteArray = arg0.toByteArray();
      assertEquals(96, byteArray.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      // No Comments were added
      byte[] arg0 = ClassWriter.TYPE;
      int readInt = MethodWriter.readInt(arg0, 3);
      assertEquals(0, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // No Comments were added
      ClassWriter classWriter = new ClassWriter((-1994));
      byte[] arg0 = classWriter.toByteArray();
      short readShort = MethodWriter.readShort(arg0, 2);
      assertEquals((short) (-17730), readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      // Given
      byte[] bytes = new byte[7];
      short value = -1157;
      
      // When
      MethodWriter.writeShort(bytes, 0, value);
      
      // Then
      assertArrayEquals(new byte[] {(byte) (-5), (byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, bytes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "";
      MethodWriter methodWriter = new MethodWriter(arg0, (-234), "h@_6}tgp6(':Z", "", "RuntimeVisibleAnnotations", arg5, false, false);
      methodWriter.visitCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // No Comments were added
      byte[] arg0 = new byte[6];
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 0);
      assertEquals(0, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockWithNull() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-234));
      String[] arg5 = new String[1];
      arg5[0] = "M";
      MethodWriter methodWriter = new MethodWriter(arg0, 6, "M", " I]5^V);-?#-B", " I]5^V);-?#-B", arg5, true, true);
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, " I]5^V);-?#-B");
      methodWriter.visitVarInsn(127, 127);
  }
}
