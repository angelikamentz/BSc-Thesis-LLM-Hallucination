/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Jun 16 18:31:10 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_SRC_ESTest extends ClassReader_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Given
      byte[] arg0 = new byte[12];
      ClassReader classReader = new ClassReader(arg0);
      
      // When
      classReader.readShort(2);
      
      // Then
      assertEquals(10, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int index = 1655;
      
      // When
      short readShort = classReader.readShort(index);
      
      // Then
      assertEquals(2123, classReader.header);
      assertEquals((short) 121, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      long expectedLong = 6004511417955450880L;
      
      // When
      long readLong = classReader.readLong(266);
      
      // Then
      assertEquals(expectedLong, readLong);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabel() throws Throwable  {
      // Given
      byte[] arg0 = new byte[12];
      ClassReader classReader = new ClassReader(arg0);
      Label[] arg1 = new Label[9];
      
      // When
      Label readLabel = classReader.readLabel(4, arg1);
      
      // Then
      assertEquals(10, classReader.header);
      assertNotNull(readLabel);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int index = 249;
      
      // When
      int readInt = classReader.readInt(index);
      
      // Then
      assertEquals(2123, classReader.header);
      assertEquals(16778836, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstReturningNonNull() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      char[] arg1 = new char[8];
      
      // When
      Object readConst = classReader.readConst(152, arg1);
      
      // Then
      assertEquals("next", readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClass() throws Throwable  {
      // No Comments were added
      ClassReader arg0 = new ClassReader("org.yasl.jars.JarFileFilter");
      assertEquals(259, arg0.header);
      
      ClassWriter classWriter = new ClassWriter(arg0, 8);
      char[] arg1 = new char[7];
      String readClass = arg0.readClass(21, arg1);
      assertEquals("endsWith", readClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningZero() throws Throwable  {
      // Given
      byte[] arg0 = new byte[12];
      ClassReader classReader = new ClassReader(arg0);
      
      // When
      int readByte = classReader.readByte((byte)0);
      
      // Then
      assertEquals(10, classReader.header);
      assertEquals(0, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int item = classReader.getItem(2);
      assertEquals(2123, classReader.header);
      assertEquals(16, item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccessReturningZero() throws Throwable  {
      // Given
      byte[] arg0 = new byte[34];
      ClassReader classReader = new ClassReader(arg0);
      
      // When
      int access = classReader.getAccess();
      
      // Then
      assertEquals(10, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConst() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      char[] arg1 = new char[4];
      
      // When
      Object readConst = classReader.readConst(41, arg1);
      
      // Then
      assertEquals(2, readConst);
      assertEquals(2123, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException0() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      char[] arg1 = new char[3];
      // Undeclared exception!
      try { 
        classReader.readConst(5, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsWithEmptyArray() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      ClassWriter arg0 = new ClassWriter(8);
      Attribute[] arg1 = new Attribute[0];
      
      // When
      classReader.accept((ClassVisitor) arg0, arg1, 1);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShort() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int expectedHeader = 2123;
      int expectedReadUnsignedShort = 51966;
      
      // When
      int readUnsignedShort = classReader.readUnsignedShort(0);
      
      // Then
      assertEquals(expectedHeader, classReader.header);
      assertEquals(expectedReadUnsignedShort, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      char[] arg1 = new char[0];
      // Undeclared exception!
      try { 
        classReader.readUTF8(5, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException1() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      char[] arg1 = new char[6];
      // Undeclared exception!
      try { 
        classReader.readConst(91, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments0() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter(4948);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 4948);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments1() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      ClassWriter arg0 = new ClassWriter(1);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 132);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments2() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      ClassWriter arg0 = new ClassWriter(1);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 168);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments3() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter(8);
      
      // When
      classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 2);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTaking3Arguments() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      ClassReader arg0 = new ClassReader(classReader.b, 8, 10);
      ClassWriter classWriter = null;
      
      // When
      try {
      classWriter = new ClassWriter(arg0, 10);
      } catch(ArrayIndexOutOfBoundsException e) {
      // Then
      assertEquals(null, e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfaces() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      String[] interfaces = classReader.getInterfaces();
      assertEquals(1, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNull() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Object");
      
      // When
      String superName = classReader.getSuperName();
      
      // Then
      assertEquals("java/lang/Object", superName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      String superName = classReader.getSuperName();
      assertEquals("java/lang/Object", superName);
      assertNotNull(superName);
      assertEquals(259, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      
      // When
      int header = classReader.header;
      String className = classReader.getClassName();
      
      // Then
      assertEquals(2123, header);
      assertEquals("org/objectweb/asm/jip/Label", className);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("java/lang/Throwable");
      ClassWriter arg0 = new ClassWriter(2);
      
      // When
      classReader.accept((ClassVisitor) arg0, 144);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByteReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int index = 1388;
      
      // When
      int readByte = classReader.readByte(index);
      
      // Then
      assertEquals(47, readByte);
      assertEquals(2123, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningZero() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int item = classReader.getItem(0);
      assertEquals(2123, classReader.header);
      assertEquals(0, item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      
      // When
      long readLong = classReader.readLong(0);
      
      // Then
      assertEquals((-3819410108757049294L), readLong);
      assertEquals(2123, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccessReturningPositive() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.yasl.jars.JarFileFilter");
      
      // When
      int access = classReader.getAccess();
      
      // Then
      assertEquals(32, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyPoolThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassAdapter");
      // Undeclared exception!
      try { 
        classReader.copyPool((ClassWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      short expectedShort = (short) (-326);
      
      // When
      short readShort = classReader.readShort(1);
      
      // Then
      assertEquals(expectedShort, readShort);
      assertEquals(2123, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Label");
      int expectedReadInt = (-21316096);
      int expectedHeader = 2123;
      
      // When
      int readInt = classReader.readInt(1);
      int header = classReader.header;
      
      // Then
      assertEquals(expectedReadInt, readInt);
      assertEquals(expectedHeader, header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingStringThrowsIOException() throws Throwable  {
      // Arrange
      ClassReader classReader = null;
      
      // Act
      try {
      classReader = new ClassReader("StackMap");
      } catch (IOException e) {
      // Assert
      fail("Expecting exception: IOException");
      }
      
      // Assert
  }
}
