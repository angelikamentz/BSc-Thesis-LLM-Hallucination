/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 14 16:28:33 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.radio.Transceiver;
import net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;
import net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.AngleBracket;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_ESOnly_ESTest extends Robot_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      Robot robot = new Robot("VrtB~jrRA`@N5", 0, (RobotScore) null);
      // Undeclared exception!
      try { 
        robot.inflictedDamage(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-5258), arg2);
      AbsoluteAngle arg1 = AbsoluteAngle.fromBygrees(0);
      AngleBracket arg0 = AngleBracket.between(arg1, arg1);
      // Undeclared exception!
      try { 
        robot.scan(arg0, 3.141592653589793, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot("+ZwW-@bOe\",o(UxY", (-1361), arg2);
      
      // Expected outcome
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      arg0.checkCollision(arg0);
      });
      
      // Verification
      assertEquals("net.virtualinfinity.atrobots.arena.Position", expectedException.getMessage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      // Given a robot with overburn set to true
      Robot robot = new Robot("", (-2146521528), new RobotScoreKeeper());
      robot.setOverburn(true);
      
      // When the robot's overburn status is checked
      boolean overburn = robot.isOverburn();
      
      // Then the overburn status should be true
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShift() throws Throwable  {
      // Given a robot with a turret
      Robot robot = new Robot((String) null, 24, new RobotScoreKeeper());
      Turret turret = new Turret();
      robot.setTurret(turret);
      
      // When the turret shift is called
      robot.getTurretShift();
      
      // Then the round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the ID should be 24
      assertEquals(24, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsPositive() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name and a transponder ID of 24
      Robot robot = new Robot((String) null, 24, arg2);
      
      // Create a new Transponder object with an ID of 1431655765
      Transponder arg0 = new Transponder();
      arg0.setId(1431655765);
      
      // Set the transponder of the robot to the new Transponder object
      robot.setTransponder(arg0);
      
      // Get the transponder of the robot
      Transponder transponder = robot.getTransponder();
      
      // Assert that the transponder ID is equal to 24
      assertEquals(24, transponder.getId());
      
      // Assert that the round kills of the robot is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsNegative() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and a score of 24
      Robot robot = new Robot((String) null, 24, arg2);
      
      // Create a new Transponder with an id of -338
      Transponder arg0 = new Transponder();
      arg0.setId((-338));
      
      // Set the Transponder of the Robot to the new Transponder
      robot.setTransponder(arg0);
      
      // Get the Transponder of the Robot
      Transponder result = robot.getTransponder();
      
      // Assert that the Transponder of the Robot is equal to the new Transponder
      assertEquals(arg0, result);
      
      // Assert that the id of the Robot is equal to 24
      assertEquals(24, robot.getId());
      
      // Assert that the round kills of the Robot is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningTransceiverWhereGetChannelIsPositive() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 8, arg2);
      Transceiver arg0 = new Transceiver();
      arg0.setChannel(8);
      robot.setTransceiver(arg0);
      robot.getTransceiver();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // Given a RobotScoreKeeper and a Robot
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.mines.Mine", (-2263), scoreKeeper);
      
      // When the robot wins a round
      scoreKeeper.wonRound(robot);
      
      // Then the robot's total wins should be 1
      assertEquals(1, robot.getTotalWins());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be (-2263)
      assertEquals((-2263), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper and a new Robot with a negative ID
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("`f4DPFa]5!", (-1724), scoreKeeper);
      
      // Call the tiedRound method on the scoreKeeper with the robot as an argument
      scoreKeeper.tiedRound(robot);
      
      // Check that the robot's total ties is 1
      assertEquals(1, robot.getTotalTies());
      
      // Check that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("AX=", 2945, scoreKeeper);
      
      // When: The robot is killed
      scoreKeeper.killedRobot(robot);
      
      // Then: The robot's score should be 0
      assertEquals(0, robot.getTotalKills());
      
      // And: The robot's ID should be 2945
      assertEquals(2945, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("NNAsHk[<MJO]@", (-313), scoreKeeper);
      
      // When: The robot dies
      scoreKeeper.died(robot);
      
      // Then: The robot's total deaths should be 1
      assertEquals(1, robot.getTotalDeaths());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be (-313)
      assertEquals((-313), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name and an id of -603
      Robot robot = new Robot((String) null, (-603), arg2);
      
      // Test that the name is null
      assertNull(robot.getName());
      
      // Test that the id is -603
      assertEquals((-603), robot.getId());
      
      // Test that the round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and id
      Robot robot = new Robot("", (-1), scoreKeeper);
      
      // Then the robot's name and id should be set correctly
      assertEquals((-1), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // Given a robot with a specific name and score
      Robot robot = new Robot("|c~W_:\";Y", 0, (RobotScore) null);
      
      // When the robot's id is retrieved
      int id = robot.getId();
      
      // Then the id should be 0
      assertEquals(0, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("|c~W_:\";Y", 5, arg2);
      int id = robot.getId();
      assertEquals(0, robot.getRoundKills());
      assertEquals(5, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsNegative() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("#p-(}{^[g-_]", 1, scoreKeeper);
      Armor armor = new Armor((-2.145455806E9));
      
      // When
      robot.setArmor(armor);
      Armor actualArmor = robot.getArmor();
      
      // Then
      assertEquals(armor, actualArmor);
      assertEquals(0, robot.getRoundKills());
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot(null, 24, scoreKeeper);
      
      // When: The robot is overburn
      robot.isOverburn();
      
      // Then: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 24
      assertEquals(24, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("", (-1431655765), (RobotScore) null);
      robot.getArmor();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1431655765), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Given a Robot object with a specific id
      Robot robot = new Robot("|c~W_:\";Y", (-660), (RobotScore) null);
      
      // When the id is retrieved
      int id = robot.getId();
      
      // Then the id should be the same as the one passed in the constructor
      assertEquals((-660), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("k$W(76>8z-QHJ/)!", 3527, scoreKeeper);
      
      // When: The robot is killed
      robot.addRobotListener(scoreKeeper);
      robot.killedRobot();
      
      // Then: The robot's total kills should be 1
      assertEquals(1, robot.getTotalKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTieRound() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("5[k", 5, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot ties a round
      robot.tieRound();
      
      // Then: The robot's total ties should be 1
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRobot() throws Throwable  {
      // Given: A robot with an ID and a score keeper
      Robot robot = new Robot("", 2146351032, new RobotScoreKeeper());
      
      // When: The robot wins a round
      robot.winRound();
      
      // Then: The robot's ID and score should be updated
      assertEquals(2146351032, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // Setup
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("+Da9/$!", 0, arg2);
      robot.setOverburn(true);
      
      // Expected exception
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      robot.armorDepleted();
      });
      
      // Verify
      assertEquals("net.virtualinfinity.atrobots.robot.Robot", expectedException.getMessage());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("O#sPGL4I y~Q}lT", (-1073741824), arg0);
      robot.addRobotListener(arg0);
      
      // Expected exception
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      robot.armorDepleted();
      });
      
      // Verify
      assertEquals("Expecting exception: NullPointerException", expectedException.getMessage());
      verifyException("net.virtualinfinity.atrobots.robot.Robot", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningTransceiverWhereGetChannelIsZero() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name and an id of 8
      Robot robot = new Robot(null, 8, scoreKeeper);
      
      // Set the transceiver of the robot to a new Transceiver object
      Transceiver transceiver = new Transceiver();
      robot.setTransceiver(transceiver);
      
      // Get the transceiver of the robot
      Transceiver robotTransceiver = robot.getTransceiver();
      
      // Assert that the id of the robot is 8
      assertEquals(8, robot.getId());
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRadar() throws Throwable  {
      // Given: A new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot instance is created with a Radar and a RobotScoreKeeper
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher$1", (-2676), scoreKeeper);
      
      // Then: The robot's radar should be set to the given Radar
      assertEquals(scoreKeeper, robot.getRadar());
      
      // Given: A new Radar instance
      Radar radar = new Radar();
      
      // When: The robot's radar is set to the new Radar
      robot.setRadar(radar);
      
      // Then: The robot's radar should be set to the new Radar
      assertEquals(radar, robot.getRadar());
      
      // Given: A new Robot instance with a Radar and a RobotScoreKeeper
      robot = new Robot("net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher$1", (-2676), scoreKeeper);
      
      // When: The robot's round kills is retrieved
      int roundKills = robot.getRoundKills();
      
      // Then: The robot's round kills should be 0
      assertEquals(0, roundKills);
      
      // Given: A new Robot instance with a Radar and a RobotScoreKeeper
      robot = new Robot("net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher$1", (-2676), scoreKeeper);
      
      // When: The robot's ID is retrieved
      int id = robot.getId();
      
      // Then: The robot's ID should be -2676
      assertEquals((-2676), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSonar() throws Throwable  {
      // Given a robot with a sonar sensor
      Robot robot = new Robot("T6FJk@QUCJG;.C I", 5125, new RobotScoreKeeper());
      Sonar sonar = new Sonar();
      robot.setSonar(sonar);
      
      // When the robot gets the sonar sensor
      robot.getSonar();
      
      // Then the robot's id should be 5125
      assertEquals(5125, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("", (-2146521528), scoreKeeper);
      
      // Then the robot's total wins should be 0
      assertEquals(0, robot.getTotalWins());
      
      // And the robot's id should be (-2146521528)
      assertEquals((-2146521528), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // When a new Robot object is created with a specific name and id
      Robot robot = new Robot("#p-(}{^[g-_]", 1, arg2);
      
      // Then the robot's id should be 1
      assertEquals(1, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotStatisticsInterruptAndHandleInterrupt() throws Throwable  {
      // Given: A robot with a null memory cell
      Robot robot = new Robot("", (-4407), new RobotScoreKeeper());
      // When: The robot's createGetRobotStatisticsInterrupt method is called with null memory cells
      Robot.GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt = robot.createGetRobotStatisticsInterrupt((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      // Then: An exception is thrown with a null message
      try {
      createGetRobotStatisticsInterrupt.handleInterrupt();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.robot.Robot$GetRobotStatisticsInterrupt", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // Given a robot with a negative ID and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.mines.Mine", -2263, scoreKeeper);
      
      // When the robot's total kills is requested
      int totalKills = robot.getTotalKills();
      
      // Then the robot's ID is returned
      assertEquals(-2263, totalKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonarReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("T6FJk@QUCJG;.C I", 5125, arg2);
      robot.getSonar();
      assertEquals(0, robot.getRoundKills());
      assertEquals(5125, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("NNAsHk[<MJO]@", (-313), scoreKeeper);
      Duration lastDamageTaken = robot.getLastDamageTaken();
      
      // Act and Assert
      try {
      robot.update(lastDamageTaken);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Verify that the exception is thrown because the lastDamageTaken is null
      assertEquals("net.virtualinfinity.atrobots.arena.Position", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandler() throws Throwable  {
      // Given a new robot object
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", (-1431655765), (RobotScore) null);
      
      // When the robot is created
      robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      
      // Then the robot's id should be set to -1431655765
      assertEquals((-1431655765), robot.getId());
      
      // And the robot's round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHardwareBus() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and ID
      Robot robot = new Robot("6ju0$[w*?-$U", 0, scoreKeeper);
      
      // Then the robot's ID should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a specific name and ID
      Robot robot = new Robot("VrtB~jrRA`@N5", 140, scoreKeeper);
      
      // Then the robot's odometer should be 0
      assertEquals(0, robot.getOdometer());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's ID should be 140
      assertEquals(140, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-3729), arg2);
      
      // Act
      try {
      robot.destruct();
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("no message in exception (getMessage() returned null)", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShield() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("e", 975, arg2);
      robot.getShield();
      assertEquals(975, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given a robot with a name and an id
      Robot robot = new Robot("VrtB~jrRA`@N5", (-24), (RobotScore) null);
      
      // When the robot's name is retrieved
      String name = robot.getName();
      
      // Then the name should be the same as the one provided
      assertEquals("VrtB~jrRA`@N5", name);
      
      // And the id should be the same as the one provided
      assertEquals((-24), robot.getId());
      
      // And the round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // Given
      Robot robot = new Robot("", 0, (RobotScore) null);
      MineLayer mineLayer = new MineLayer((-1431655765));
      
      // When
      robot.setMineLayer(mineLayer);
      
      // Then
      assertEquals(mineLayer, robot.getMineLayer());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a negative id
      Robot robot = new Robot("", (-2964), robotScoreKeeper);
      
      // Then the robot's id should be the negative id
      assertEquals((-2964), robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateMissile() throws Throwable  {
      // Create a new robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 36, scoreKeeper);
      
      // Create a new missile with a position and velocity
      AbsoluteAngle angle = AbsoluteAngle.fromCartesian(36, 36);
      Position position = robot.getPosition();
      robot.createMissile(angle, position, 36);
      
      // Check that the round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Check that the robot's ID is 36
      assertEquals(36, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNonNull() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a Turret
      Robot robot = new Robot(null, 24, scoreKeeper);
      Turret turret = new Turret();
      robot.setTurret(turret);
      
      // Verify that the Robot has a Turret
      assertEquals(turret, robot.getTurret());
      
      // Verify that the Robot has not killed any rounds
      assertEquals(0, robot.getRoundKills());
      
      // Verify that the Robot has the correct ID
      assertEquals(24, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // Given a robot with a non-zero score
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.reset();
      
      // When the robot is reset
      robot.reset();
      
      // Then the robot's score should be zero
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadarReturningNull() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a negative ID and the score keeper
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher$1", (-2676), scoreKeeper);
      
      // Then: The robot's ID should be the negative ID passed in
      assertEquals((-2676), robot.getId());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("", 0, (RobotScore) null);
      robot.getComputer();
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot with a totalTies of 0
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 699, arg2);
      
      // When: The getTotalTies method is called on the robot
      robot.getTotalTies();
      
      // Then: The roundKills and id of the robot should be 0
      assertEquals(0, robot.getRoundKills());
      assertEquals(699, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("Q>", (-2952), arg2);
      robot.getShutdownLevelLatchPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2952), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given a Robot object with a name, id, and score
      Robot robot = new Robot("&3^%)@&1T8", 497, (RobotScore) null);
      
      // When the round kills are retrieved
      int roundKills = robot.getRoundKills();
      
      // Then the round kills should be 0
      assertEquals(0, roundKills);
      
      // And the id should be 497
      assertEquals(497, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // Given a new robot with an empty name and a score of 0
      Robot robot = new Robot("", 0, (RobotScore) null);
      
      // When the mine layer is retrieved
      robot.getMineLayer();
      
      // Then the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBusReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("T6FJk@QUCJG;.C I", 5125, scoreKeeper);
      
      // Then the robot's hardware bus should be null
      assertNull(robot.getHardwareBus());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 5125
      assertEquals(5125, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsZero() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative ID and a Transponder object
      Robot robot = new Robot("", (-1333), scoreKeeper);
      
      // Set the Transponder object on the Robot object
      robot.setTransponder(new Transponder());
      
      // Get the Transponder object from the Robot object
      Transponder transponder = robot.getTransponder();
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the ID is negative 1333
      assertEquals((-1333), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottle() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative ID
      Robot robot = new Robot("", (-2146521528), scoreKeeper);
      
      // Get the throttle of the robot
      robot.getThrottle();
      
      // Assert that the ID of the robot is equal to the negative ID
      assertEquals((-2146521528), robot.getId());
      
      // Assert that the round kills of the robot is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and an ID of 24
      Robot robot = new Robot(null, 24, scoreKeeper);
      
      // Get the transponder of the robot
      robot.getTransponder();
      
      // Assert that the ID of the robot is 24
      assertEquals(24, robot.getId());
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // When a new Robot object is created with a negative id
      Robot robot = new Robot(":G_A4y-8TD51KjZmz", (-1), arg2);
      
      // Then the id should be set to -1
      assertEquals((-1), robot.getId());
      
      // And the round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsZero() throws Throwable  {
      // Given a robot with an armor
      Robot robot = new Robot("", 0, (RobotScore) null);
      Armor armor = new Armor(0);
      robot.setArmor(armor);
      
      // When the robot's armor is retrieved
      Armor retrievedArmor = robot.getArmor();
      
      // Then the correct armor is returned
      assertEquals(armor, retrievedArmor);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a negative health value
      Robot robot = new Robot(":G_A4y-8TD51KjZmz", (-18), scoreKeeper);
      
      // Then the robot's total deaths should be 0
      assertEquals(0, robot.getTotalDeaths());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's ID should be the negative health value
      assertEquals((-18), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.getDesiredHeading();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2146521528), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("", 2187, scoreKeeper);
      
      // Then: The robot's heading should be 0
      assertEquals(0, robot.getHeading());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be 2187
      assertEquals(2187, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Given: A new robot and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 2146351032, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot wins a round
      robot.winRound();
      
      // Then: The robot's total wins should be 1
      assertEquals(1, robot.getTotalWins());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative ID
      Robot robot = new Robot("", (-2146521528), scoreKeeper);
      
      // Test that the robot's ID is negative
      assertEquals((-2146521528), robot.getId());
      
      // Test that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a negative id
      Robot robot = new Robot("", (-1344), scoreKeeper);
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be the negative id
      assertEquals((-1344), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative ID
      Robot robot = new Robot("", (-2146521528), scoreKeeper);
      
      // Test that the robot's ID is the same as the one passed in
      assertEquals((-2146521528), robot.getId());
      
      // Test that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals((-2146521528), robot.getId());
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, lastDamageGiven.getCycles());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("b<.dA ", 4684, arg2);
      robot.getTurret();
      assertEquals(4684, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a negative id
      Robot robot = new Robot("", (-2964), robotScoreKeeper);
      
      // Then the robot's id should be the negative id
      assertEquals((-2964), robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }
}
