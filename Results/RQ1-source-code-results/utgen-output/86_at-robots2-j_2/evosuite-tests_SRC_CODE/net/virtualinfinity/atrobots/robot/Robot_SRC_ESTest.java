/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 14 16:05:40 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.radio.Transceiver;
import net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;
import net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.AngleBracket;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_SRC_ESTest extends Robot_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // Given: A robot with a null score
      Robot robot = new Robot("VrtB~jrRA`@N5", 0, (RobotScore) null);
      
      // When: The robot inflicts damage with a null amount
      try {
      robot.inflictedDamage(0.0);
      fail("Expecting exception: NullPointerException");
      
      // Then: A NullPointerException is thrown
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-5258), arg2);
      AbsoluteAngle arg1 = AbsoluteAngle.fromBygrees(0);
      AngleBracket arg0 = AngleBracket.between(arg1, arg1);
      // Undeclared exception!
      try { 
        robot.scan(arg0, 3.141592653589793, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("+ZwW-@bOe\",o(UxY", (-1361), scoreKeeper);
      
      // Act
      try {
      robot.checkCollision(robot);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("net.virtualinfinity.atrobots.arena.Position", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      // Given
      Robot robot = new Robot("", (-2146521528), new RobotScoreKeeper());
      robot.setOverburn(true);
      // When
      boolean overburn = robot.isOverburn();
      // Then
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShift() throws Throwable  {
      // Given
      Robot robot = new Robot((String) null, 24, new RobotScoreKeeper());
      Turret turret = new Turret();
      robot.setTurret(turret);
      
      // When
      int turretShift = robot.getTurretShift();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(24, robot.getId());
      assertEquals(0, turretShift);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsPositive() throws Throwable  {
      // Arrange
      Transponder transponder = new Transponder();
      transponder.setId(1431655765);
      Robot robot = new Robot((String) null, 24, new RobotScoreKeeper());
      
      // Act
      robot.setTransponder(transponder);
      
      // Assert
      assertEquals(24, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsNegative() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 24, arg2);
      Transponder arg0 = new Transponder();
      arg0.setId((-338));
      robot.setTransponder(arg0);
      robot.getTransponder();
      assertEquals(24, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningTransceiverWhereGetChannelIsPositive() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 8, arg2);
      Transceiver arg0 = new Transceiver();
      arg0.setChannel(8);
      robot.setTransceiver(arg0);
      robot.getTransceiver();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.mines.Mine", (-2263), scoreKeeper);
      
      // When
      scoreKeeper.wonRound(robot);
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2263), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("`f4DPFa]5!", (-1724), scoreKeeper);
      // When
      scoreKeeper.tiedRound(robot);
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1724), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("AX=", 2945, scoreKeeper);
      
      // Act
      scoreKeeper.killedRobot(robot);
      
      // Assert
      assertEquals(2945, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("NNAsHk[<MJO]@", (-313), scoreKeeper);
      scoreKeeper.died(robot);
      
      // When
      int totalDeaths = robot.getTotalDeaths();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-313), robot.getId());
      assertEquals(0, totalDeaths);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Given
      Robot robot = new Robot((String) null, (-603), new RobotScoreKeeper());
      
      // When
      String name = robot.getName();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-603), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("", (-1), score);
      
      // Act
      String name = robot.getName();
      
      // Assert
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // Given a Robot object with a specific name and score
      Robot robot = new Robot("|c~W_:\";Y", 0, (RobotScore) null);
      
      // When the getId method is called
      int id = robot.getId();
      
      // Then the id should be 0
      assertEquals(0, id);
      
      // And the round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("|c~W_:\";Y", 5, score);
      
      // When
      int id = robot.getId();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(5, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsNegative() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("#p-(}{^[g-_]", 1, arg2);
      Armor arg0 = new Armor((-2.145455806E9));
      robot.setArmor(arg0);
      robot.getArmor();
      assertEquals(1, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      // Given
      Robot robot = new Robot((String) null, 24, new RobotScoreKeeper());
      // When
      robot.isOverburn();
      // Then
      assertEquals(24, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("", (-1431655765), (RobotScore) null);
      robot.getArmor();
      assertEquals((-1431655765), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Given a Robot object with a specific id
      Robot robot = new Robot("|c~W_:\";Y", (-660), (RobotScore) null);
      
      // When the getId method is called
      int id = robot.getId();
      
      // Then the id should be the same as the one passed in the constructor
      assertEquals((-660), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("k$W(76>8z-QHJ/)!", 3527, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When
      robot.killedRobot();
      
      // Then
      assertEquals(1, robot.getTotalKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTieRound() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("5[k", 5, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When
      robot.tieRound();
      
      // Then
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRobot() throws Throwable  {
      // Given: A robot with an id of 2146351032 and a score keeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 2146351032, arg2);
      
      // When: The robot wins a round
      robot.winRound();
      
      // Then: The robot's id should be the same as the one given
      assertEquals(2146351032, robot.getId());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("+Da9/$!", 0, arg2);
      robot.setOverburn(true);
      // Undeclared exception!
      try { 
        robot.armorDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("O#sPGL4I y~Q}lT", (-1073741824), scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // Expected behavior
      try {
      robot.armorDepleted();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify exception
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningTransceiverWhereGetChannelIsZero() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 8, arg2);
      Transceiver arg0 = new Transceiver();
      robot.setTransceiver(arg0);
      robot.getTransceiver();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRadar() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher$1", (-2676), arg2);
      Radar arg0 = new Radar();
      robot.setRadar(arg0);
      robot.getRadar();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2676), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSonar() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("T6FJk@QUCJG;.C I", 5125, arg2);
      Sonar arg0 = new Sonar();
      robot.setSonar(arg0);
      robot.getSonar();
      assertEquals(5125, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), scoreKeeper);
      
      // When
      int totalWins = robot.getTotalWins();
      
      // Then
      assertEquals(0, totalWins);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("#p-(}{^[g-_]", 1, arg2);
      robot.getTransceiver();
      assertEquals(1, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotStatisticsInterruptAndHandleInterrupt() throws Throwable  {
      // Given: A RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      // And: A Robot object with a null MemoryCell
      Robot robot = new Robot("", (-4407), arg2);
      // And: A GetRobotStatisticsInterrupt object with null MemoryCells
      Robot.GetRobotStatisticsInterrupt createGetRobotStatisticsInterrupt = robot.createGetRobotStatisticsInterrupt((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      // When: The handleInterrupt method is called
      try {
      createGetRobotStatisticsInterrupt.handleInterrupt();
      // Then: An exception is thrown
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // And: The exception is a NullPointerException
      verifyException("net.virtualinfinity.atrobots.robot.Robot$GetRobotStatisticsInterrupt", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.mines.Mine", (-2263), scoreKeeper);
      
      // When
      int totalKills = robot.getTotalKills();
      
      // Then
      assertEquals(0, totalKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonarReturningNull() throws Throwable  {
      // Given
      Robot robot = new Robot("T6FJk@QUCJG;.C I", 5125, new RobotScoreKeeper());
      // When
      robot.getSonar();
      // Then
      assertEquals(5125, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("NNAsHk[<MJO]@", (-313), arg2);
      Duration arg0 = robot.getLastDamageTaken();
      // Undeclared exception!
      try { 
        robot.update(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandler() throws Throwable  {
      // Given
      int speed = 10;
      int lastDamageTaken = 20;
      int lastDamageGiven = 30;
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", (-1431655765), (RobotScore) null);
      
      // When
      robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1431655765), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHardwareBus() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      // Create a new Robot with a name and ID
      Robot robot = new Robot("6ju0$[w*?-$U", 0, arg2);
      // Set the Robot's hardware bus
      robot.setHardwareBus(new HardwareBus());
      // Get the Robot's hardware bus
      HardwareBus hardwareBus = robot.getHardwareBus();
      // Assert that the Robot's ID is 0
      assertEquals(0, robot.getId());
      // Assert that the Robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("VrtB~jrRA`@N5", 140, arg2);
      robot.getOdometer();
      assertEquals(0, robot.getRoundKills());
      assertEquals(140, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-3729), arg2);
      // Undeclared exception!
      try { 
        robot.destruct();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShield() throws Throwable  {
      // Given
      Robot robot = new Robot("e", 975, new RobotScoreKeeper());
      // When
      robot.getShield();
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(975, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given
      Robot robot = new Robot("VrtB~jrRA`@N5", (-24), (RobotScore) null);
      
      // When
      String name = robot.getName();
      
      // Then
      assertEquals("VrtB~jrRA`@N5", name);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // Given
      Robot robot = new Robot("", 0, (RobotScore) null);
      MineLayer arg0 = new MineLayer((-1431655765));
      
      // When
      robot.setMineLayer(arg0);
      
      // Then
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("", (-2964), score);
      
      // Act
      robot.getTurretOffsetSensor();
      
      // Assert
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2964), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateMissile() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 36, arg2);
      AbsoluteAngle arg0 = AbsoluteAngle.fromCartesian(36, 36);
      Position arg1 = robot.getPosition();
      robot.createMissile(arg0, arg1, 36);
      assertEquals(0, robot.getRoundKills());
      assertEquals(36, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNonNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 24, arg2);
      Turret arg0 = new Turret();
      robot.setTurret(arg0);
      robot.getTurret();
      assertEquals(24, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.reset();
      
      // When
      boolean isOverburn = robot.isOverburn();
      int roundKills = robot.getRoundKills();
      int id = robot.getId();
      
      // Then
      assertFalse(isOverburn);
      assertEquals(0, roundKills);
      assertEquals((-2146521528), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadarReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.hardware.missiles.MissileLauncher$1", (-2676), arg2);
      robot.getRadar();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2676), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("", 0, (RobotScore) null);
      robot.getComputer();
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 699, arg2);
      
      // When
      int totalTies = robot.getTotalTies();
      
      // Then
      assertEquals(699, totalTies);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("Q>", (-2952), arg2);
      robot.getShutdownLevelLatchPort();
      assertEquals((-2952), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given
      Robot robot = new Robot("&3^%)@&1T8", 497, (RobotScore) null);
      int expectedRoundKills = 0;
      
      // When
      int actualRoundKills = robot.getRoundKills();
      
      // Then
      assertEquals(expectedRoundKills, actualRoundKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // Given
      Robot robot = new Robot("", 0, (RobotScore) null);
      
      // When
      robot.getMineLayer();
      
      // Then
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBusReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("T6FJk@QUCJG;.C I", 5125, arg2);
      robot.getHardwareBus();
      assertEquals(5125, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsZero() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1333), arg2);
      Transponder arg0 = new Transponder();
      robot.setTransponder(arg0);
      robot.getTransponder();
      assertEquals((-1333), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottle() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.getThrottle();
      assertEquals((-2146521528), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 24, arg2);
      robot.getTransponder();
      assertEquals(24, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(":G_A4y-8TD51KjZmz", (-1), arg2);
      robot.getHeatSinks();
      assertEquals((-1), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsZero() throws Throwable  {
      // Given
      Robot robot = new Robot("", 0, (RobotScore) null);
      Armor arg0 = new Armor(0);
      
      // When
      robot.setArmor(arg0);
      
      // Then
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot(":G_A4y-8TD51KjZmz", (-18), scoreKeeper);
      
      // When
      int totalDeaths = robot.getTotalDeaths();
      
      // Then
      assertEquals(0, totalDeaths);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.getDesiredHeading();
      assertEquals((-2146521528), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 2187, arg2);
      robot.getHeading();
      assertEquals(2187, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 2146351032, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When
      robot.winRound();
      
      // Then
      assertEquals(1, robot.getTotalWins());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.getSpeed();
      assertEquals((-2146521528), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1344), scoreKeeper);
      ArenaObjectVisitorAdaptor visitor = new ArenaObjectVisitorAdaptor();
      
      // When
      robot.accept(visitor);
      
      // Then
      assertEquals((-1344), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      robot.getAimTurretPort();
      assertEquals((-2146521528), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-2146521528), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, lastDamageGiven.getCycles());
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2146521528), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("b<.dA ", 4684, arg2);
      robot.getTurret();
      assertEquals(4684, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("", (-2964), arg2);
      robot.getOverburnLatchPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2964), robot.getId());
  }
}
