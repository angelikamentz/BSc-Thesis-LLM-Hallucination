/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Sun Jun 16 17:10:52 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;
import net.virtualinfinity.atrobots.hardware.throttle.Throttle;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_SRC_ESTest extends Robot_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$GetRobotStatisticsInterrupt", 0, arg2);
      
      // Act and Assert
      try {
      robot.inflictedDamage(1115.1661670683416);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // Arrange
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      
      // Act
      try {
      robot.checkCollision(robot);
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
      
      // Assert
      // no assertion, test is designed to throw an exception
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      // Given
      Robot robot = new Robot("", (-1), new RobotScoreKeeper());
      robot.setOverburn(true);
      // When
      boolean overburn = robot.isOverburn();
      // Then
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNonNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-406), arg2);
      Turret arg0 = new Turret();
      robot.setTurret(arg0);
      robot.getTurret();
      assertEquals((-406), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      arg0.wonRound((Robot) null);
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("No-$>+\"JIY8bY]Y", 2673, arg2);
      robot.getTotalWins();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2673, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 793, scoreKeeper);
      
      // When
      scoreKeeper.tiedRound(robot);
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(793, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      // Call the killedRobot method with a null Robot
      arg2.killedRobot((Robot) null);
      // Create a new Robot with a name, health, and score keeper
      Robot robot = new Robot("*.<w", 10, arg2);
      // Call the getTotalKills method and assert that it returns 0
      assertEquals(0, robot.getTotalKills());
      // Call the getRoundKills method and assert that it returns 10
      assertEquals(10, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("*>!o[}_-]r", 2482, scoreKeeper);
      // When
      scoreKeeper.died(robot);
      // Then
      assertEquals(2482, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, 57, arg2);
      robot.getName();
      assertEquals(57, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 8, score);
      
      // Act
      String name = robot.getName();
      
      // Assert
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("w0(70j2p(?>Il", 0, arg2);
      
      // When
      int id = robot.getId();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-2121), arg2);
      
      // When
      int id = robot.getId();
      
      // Then
      assertEquals((-2121), id);
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsPositive() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(">:<", 4752, arg2);
      Armor arg0 = new Armor(1904.0);
      robot.setArmor(arg0);
      robot.getArmor();
      assertEquals(4752, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsNegative() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot(">:<", 4752, arg2);
      Armor arg0 = new Armor((-3000.4137305318254));
      robot.setArmor(arg0);
      robot.getArmor();
      assertEquals(0, robot.getRoundKills());
      assertEquals(4752, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      // Given
      Robot robot = new Robot("FZsuRqeVe", (-2356), (RobotScore) null);
      // When
      robot.isOverburn();
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2356), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 2421, arg2);
      robot.getArmor();
      assertEquals(2421, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 27, arg2);
      
      // Act
      int id = robot.getId();
      
      // Assert
      assertEquals(0, robot.getRoundKills());
      assertEquals(27, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShield() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("]qo4GC?SRj\"`;<]s8", (-3358), arg2);
      robot.getShield();
      assertEquals((-3358), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("rts}?uQ", 2143284642, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When
      robot.killedRobot();
      
      // Then
      assertEquals(1, robot.getTotalKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRobot() throws Throwable  {
      // Given: A robot with a name, id, and score
      Robot robot = new Robot("F@oO", 3, (RobotScore) null);
      
      // When: The robot ties a round
      robot.tieRound();
      
      // Then: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be 3
      assertEquals(3, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWinRound() throws Throwable  {
      // Given
      Robot robot = new Robot("FZsuRqeVe", (-2356), (RobotScore) null);
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      robot.addRobotListener(arg0);
      
      // When
      robot.winRound();
      
      // Then
      assertEquals((-2356), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 2056, arg2);
      robot.setOverburn(true);
      // Undeclared exception!
      try { 
        robot.armorDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("]a`", (-926), scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // Expected behavior
      try {
      robot.armorDepleted();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify exception
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRadar() throws Throwable  {
      // Given
      Radar radar = new Radar();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot", (-218), (RobotScore) null);
      
      // When
      robot.setRadar(radar);
      
      // Then
      assertEquals(radar, robot.getRadar());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("No-$>+\"JIY8bY]Y", 2673, score);
      
      // When
      int totalWins = robot.getTotalWins();
      
      // Then
      assertEquals(0, totalWins);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiver() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("eWZ;XRz", 8, arg2);
      robot.getTransceiver();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShiftThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("^.R*g1D|~aW?;UK*-O", 1, arg2);
      // Undeclared exception!
      try { 
        robot.getTurretShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("Jnz\"8.^)IB~q", (-516), scoreKeeper);
      
      // When
      int totalKills = robot.getTotalKills();
      
      // Then
      assertEquals((-516), totalKills);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonar() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("F%K[ 'Z\"", 0, score);
      
      // When
      robot.getSonar();
      
      // Then
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // Given: A robot with a null duration
      Robot robot = new Robot("Db,I*#v", 1767, (RobotScore) null);
      Duration arg0 = robot.getLastDamageTaken();
      
      // When: The robot's update method is called with a null duration
      try {
      robot.update(arg0);
      fail("Expecting exception: NullPointerException");
      
      // Then: A NullPointerException is thrown
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.arena.Position", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandler() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("2^h!", 6, arg2);
      // When
      robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(6, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("H7MGBng%E", 499, (RobotScore) null);
      robot.getOdometer();
      assertEquals(499, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // Given: A robot with a null armor
      Robot robot = new Robot("FZsuRqeVe", 17, (RobotScore) null);
      
      // When: The robot's destruct method is called
      try {
      robot.destruct();
      
      // Then: An exception is thrown
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Verify that the exception is of the correct type
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // No Comments were added
      Robot robot = new Robot("", (-1065), (RobotScore) null);
      robot.getName();
      assertEquals((-1065), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // Given
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      MineLayer mineLayer = new MineLayer(192);
      
      // When
      robot.setMineLayer(mineLayer);
      
      // Then
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("eWZ;XRz", 8, score);
      
      // Act
      robot.getTurretOffsetSensor();
      
      // Assert
      assertEquals(0, robot.getRoundKills());
      assertEquals(8, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShift() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("^.R*g1D|~aW?;UK*-O", 1, arg2);
      Turret arg0 = new Turret();
      robot.setTurret(arg0);
      robot.getTurretShift();
      assertEquals(0, robot.getRoundKills());
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("ET+1-[L", 1, (RobotScore) null);
      robot.reset();
      assertFalse(robot.isOverburn());
      assertEquals(1, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadarReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      robot.getRadar();
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("^N", 111, arg2);
      robot.getComputer();
      assertEquals(0, robot.getRoundKills());
      assertEquals(111, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("x:,", 0, arg2);
      
      // When
      int totalTies = robot.getTotalTies();
      
      // Then
      assertEquals(0, totalTies);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      RobotScore score = FinalRobotScore.copyOf(scoreKeeper);
      Robot robot = new Robot("F%K[ 'Z\"", 0, score);
      
      // Act
      robot.getShutdownLevelLatchPort();
      
      // Assert
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("yAQto*nq_E8(2,F", 1, arg2);
      
      // When
      int roundKills = robot.getRoundKills();
      
      // Then
      assertEquals(0, roundKills);
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 0, (RobotScore) null);
      robot.getMineLayer();
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBus() throws Throwable  {
      // Given
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      RobotScore robotScore = FinalRobotScore.copyOf(robotScoreKeeper);
      Robot robot = new Robot("]qo4GC?SRj\"`;<]s8", (-3358), robotScore);
      
      // When
      robot.getHardwareBus();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-3358), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTransponder() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("'gmA !u<", (-2145002685), arg2);
      Transponder arg0 = new Transponder();
      robot.setTransponder(arg0);
      robot.getTransponder();
      assertEquals((-2145002685), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottleReturningNull() throws Throwable  {
      Robot robot = new Robot((String) null, 31, (RobotScore) null);
      assertEquals(31, robot.getId());
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getThrottle());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateSpecificSnapshotThrowsNullPointerException() throws Throwable  {
      // Arrange
      Robot robot = new Robot("Db,I*#v", 1767, (RobotScore) null);
      
      // Act and Assert
      try {
      robot.createSpecificSnapshot();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // Given
      Robot robot = new Robot(">:<", 4752, new RobotScoreKeeper());
      // When
      robot.getTransponder();
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(4752, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // Given
      Robot robot = new Robot((String) null, (-1431655770), new RobotScoreKeeper());
      // When
      robot.getHeatSinks();
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1431655770), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetArmor() throws Throwable  {
      // Given: A robot with a null armor
      Robot robot = new Robot("Db,I*#v", 1767, (RobotScore) null);
      Armor arg0 = new Armor(1767);
      robot.setArmor(arg0);
      
      // When: The robot's createSpecificSnapshot method is called
      // Then: A NullPointerException is thrown
      try {
      robot.createSpecificSnapshot();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1), scoreKeeper);
      
      // When
      int totalDeaths = robot.getTotalDeaths();
      
      // Then
      assertEquals(0, totalDeaths);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // Given
      Robot robot = new Robot("", 27, new RobotScoreKeeper());
      // When
      robot.getDesiredHeading();
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(27, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("JZ", (-1646), arg2);
      robot.getHeading();
      assertEquals((-1646), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Given
      Robot robot = new Robot("F@oO", 3, (RobotScore) null);
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      robot.addRobotListener(arg0);
      
      // When
      robot.tieRound();
      
      // Then
      assertEquals(3, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("_q0f=w@'pZ", (-1681), arg2);
      robot.getSpeed();
      assertEquals((-1681), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1), scoreKeeper);
      
      // When
      robot.accept(new ArenaObjectVisitorAdaptor());
      
      // Then
      assertEquals((-1), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("~^rFZx[a#xNxV", (-1081), arg2);
      robot.getAimTurretPort();
      assertEquals((-1081), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("_q0f=w@'pZ", (-1681), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1681), robot.getId());
      assertEquals(0, lastDamageGiven.getCycles());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetThrottle() throws Throwable  {
      // Given
      Robot robot = new Robot((String) null, 31, (RobotScore) null);
      Throttle arg0 = new Throttle(31);
      
      // When
      robot.setThrottle(arg0);
      
      // Then
      assertEquals(31, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 288, arg2);
      robot.getTurret();
      assertEquals(288, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("^N", 111, arg2);
      robot.getOverburnLatchPort();
      assertEquals(111, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }
}
