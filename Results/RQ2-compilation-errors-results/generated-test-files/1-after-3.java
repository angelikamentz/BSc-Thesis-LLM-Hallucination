/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 21 17:46:20 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_SRC_ESTest extends MethodWriter_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // Given a byte array containing a big-endian encoded unsigned short value
      byte[] arg0 = new byte[9];
      arg0[0] = (byte)91;
      
      // When the readUnsignedShort method is called with the byte array and an offset of 0
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 0);
      
      // Then the method should return the decoded unsigned short value
      assertEquals(23296, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Create a byte array with a length of 5
      byte[] arg0 = new byte[5];
      
      // Set the 4th byte of the array to 20
      arg0[3] = (byte)20;
      
      // Call the readShort method with the array and 3 as the offset
      short readShort = MethodWriter.readShort(arg0, 3);
      
      // Assert that the returned short value is equal to 5120
      assertEquals((short)5120, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      byte[] input = new byte[7];
      input[5] = (byte) (-24);
      
      // When
      short result = MethodWriter.readShort(input, 5);
      
      // Then
      assertEquals((short) (-6144), result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given a byte array containing a 32-bit integer in big-endian format
      byte[] arg0 = new byte[9];
      
      // When the method readInt is called with the byte array and an offset of 0
      int readInt = MethodWriter.readInt(arg0, 0);
      
      // Then the method should return the integer value of the byte array
      assertEquals(12320768, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given a byte array with a negative value
      byte[] arg0 = new byte[8];
      arg0[0] = (byte) (-10);
      
      // When the readInt method is called with the byte array and a zero byte
      int readInt = MethodWriter.readInt(arg0, (byte)0);
      
      // Then the method should return the negative value as an int
      assertEquals((-167772160), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3ArgumentsWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      Label arg2 = new Label();
      int[] arg0 = new int[7];
      MethodWriter.getNewOffset(arg0, (int[]) null, arg2);
      MethodWriter.getNewOffset((int[]) null, (int[]) null, arg2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      // Given
      int[] arg1 = new int[8];
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 31, (-360));
      // When
      int expected = (-391);
      // Then
      assertEquals(expected, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3ArgumentsWithNonEmptyArray() throws Throwable  {
      // Given
      Label label = new Label();
      int[] offsets = new int[3];
      label.position = 1;
      offsets[2] = 1;
      
      // When
      MethodWriter.getNewOffset(offsets, offsets, label);
      
      // Then
      assertArrayEquals(new int[] {0, 0, 1}, offsets);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      // Setup
      int[] arg1 = new int[4];
      
      // Execute
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-128), (-128));
      
      // Verify
      assertEquals(0, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningPositive() throws Throwable  {
      // Given
      int[] arg1 = new int[1];
      int expectedNewOffset = 3;
      
      // When
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (byte)3, 6);
      
      // Then
      assertEquals(expectedNewOffset, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] annotations = new String[7];
      annotations[0] = "~4>y";
      annotations[1] = "W ";
      annotations[2] = "RuntimeVisibleAnnotations";
      annotations[3] = "org.objectweb.asm.jip.ClassReader";
      annotations[4] = "W ";
      annotations[5] = "W ";
      annotations[6] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1389), "RuntimeVisibleAnnotations", "~4>y", "W ", annotations, false, false);
      
      // When
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(50, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFrameAndVisitMethodInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(16);
      MethodWriter methodWriter = new MethodWriter(classWriter, 16, "org.yasl.jars.JarFileFilter", "org.yasl.jars.JarFileFilter", "M5", (String[]) null, false, false);
      
      // When
      methodWriter.visitMethodInsn(1, "org.yasl.jars.JarFileFilter", "Ua<g?#Z)F#W.%)J~v,7", "org.yasl.jars.JarFileFilter");
      methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(48, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitLineNumber() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>^y";
      methodNames[1] = "~4>^y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "zv)[|y", "zv)[|y", ">A!9q4mip({", methodNames, true, false);
      
      // When
      methodWriter.visitVarInsn(1, 961);
      Label label = new Label();
      methodWriter.visitLineNumber(17, label);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(62, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(8);
      String[] arg5 = new String[2];
      arg5[0] = "~L>";
      arg5[1] = "~L>";
      MethodWriter methodWriter = new MethodWriter(arg0, 8, "~L>", "~L>", "~L>", arg5, false, false);
      methodWriter.classReaderOffset = 1;
      int size = methodWriter.getSize();
      assertEquals(6, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(4);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "~4>y", "~4>y", (String) null, (String[]) null, false, false);
      int size = methodWriter.getSize();
      assertEquals(8, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithPositive() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~f>7";
      arg5[1] = "~f>7";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "~f>7", "~f>7", "~f>7", arg5, false, false);
      Label[] arg4 = new Label[5];
      
      // Act and Assert
      try {
      methodWriter.visitFrame(1, 2, arg4, 1, arg4);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "i)[|y", "i)[|y", "i)[|y", (String[]) null, true, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, (Label) null, arg2, "i)[|y");
      methodWriter.visitMaxs(0, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "zv)[|y", "zv)[|y", "~4>y", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "kzY3)i");
      
      // When
      try {
      methodWriter.visitMaxs(1, 4096);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.Type", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxs() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 831, "i)[|y", "i)[|y", "i)[|y", (String[]) null, false, true);
      methodWriter.visitMaxs(1, 188);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithNegativeAndNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-13));
      MethodWriter methodWriter = new MethodWriter(arg0, 2, ".llj*!@Y-#+Y", ".llj*!@Y-#+Y", ".llj*!@Y-#+Y", (String[]) null, false, false);
      methodWriter.visitMaxs((-1955929411), (-1955929411));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumber() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-9));
      String[] arg5 = new String[1];
      arg5[0] = "~4y";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "u", "u", "u", arg5, false, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(172, arg1);
      methodWriter.visitLineNumber(168, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNullAndVisitVarInsnWithZero() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "i)[|y", "i)[|y", "~4>y", arg5, true, false);
      methodWriter.visitVarInsn(0, 15);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("~4>y", "Class not found", (String) null, arg4, arg4, 15);
      int size = methodWriter.getSize();
      assertEquals(66, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(17);
      String[] arg5 = new String[2];
      arg5[0] = "94>y";
      arg5[1] = "94>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 17, "zv)[|y", "zv)[|y", "94>y", arg5, true, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("Code", "J", "~~O`X*;eL%r)", arg4, arg4, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-2355));
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "~4m%", "org.objectweb.asm.jip.ClassAdapter", "~4m%", (String[]) null, false, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("SourceDebugExtension", "org.objectweb.asm.jip.MethodWriter", "SourceDebugExtension", arg4, arg4, 16);
      // Undeclared exception!
      try { 
        methodWriter.visitLocalVariable("org.objectweb.asm.jip.MethodWriter", (String) null, ",/OWv;cukUbzm]t", arg4, arg4, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockWithNullAndNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(8);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 8, "~4>y", "~4>y", "~4>y", arg5, false, false);
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "~4>y");
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "1");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockWithNull() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg5 = new String[5];
      arg5[0] = "zv)[yy";
      arg5[1] = "zv)[yy";
      arg5[2] = "zv)[yy";
      arg5[3] = "org.objectweb.asm.jip.Item";
      arg5[4] = "zv)[yy";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "zv)[yy", "zv)[yy", "zv)[yy", arg5, true, true);
      Label tryCatchBlockStart = new Label();
      methodWriter.visitTryCatchBlock(tryCatchBlockStart, tryCatchBlockStart, tryCatchBlockStart, null);
      
      // When
      try {
      methodWriter.visitMaxs(1, 2);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.Type", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsnWithPositive() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] dimensions = new String[2];
      dimensions[0] = "~4>y";
      dimensions[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "~4>y", "~4>y", "~4>y", dimensions, false, false);
      
      // When
      methodWriter.visitMultiANewArrayInsn("Ljava/lang/Synthetic;", 2);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsnWithPositiveAndPositive() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] keys = new String[2];
      keys[0] = "~4>y";
      keys[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "zv)[|y", "zv)[|y", "~4>y", keys, true, true);
      Label defaultLabel = new Label();
      Label[] labels = new Label[1];
      labels[0] = defaultLabel;
      
      // When
      methodWriter.visitTableSwitchInsn(31, 1, defaultLabel, labels);
      
      // Then
      assertEquals(1, labels.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsnWithZeroAndZero() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "v";
      arg5[1] = "v";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "zv)[|y", "zv)[|y", ">A!9q4mip(3", arg5, true, false);
      Label arg2 = new Label();
      Label[] arg3 = new Label[5];
      arg3[0] = arg2;
      arg3[1] = arg2;
      arg3[2] = arg2;
      arg3[3] = arg2;
      arg3[4] = arg2;
      
      // When
      methodWriter.visitTableSwitchInsn(0, 0, arg2, arg3);
      
      // Then
      assertEquals(5, arg3.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[4];
      arg5[0] = "LineNumberTable";
      arg5[1] = "~4>y";
      arg5[2] = "~4>y";
      arg5[3] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "<!ghRdX*b{,", "~4>y", "LineNumberTable", arg5, false, false);
      methodWriter.visitIincInsn(53, 16777219);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "~4>y", "~4>y", "~4>y", arg5, false, false);
      methodWriter.visitIincInsn(791, (-1628));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "Gllj*!$-8#+Q*Y";
      arg5[1] = "Gllj*!$-8#+Q*Y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-10), "zv)[|y", "zv)[|y", "Gllj*!$-8#+Q*Y", arg5, true, false);
      methodWriter.visitIincInsn(8, (-10));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithZero() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "{'.sH(", "V\"+)LX0u[UO", "{'.sH(", (String[]) null, true, true);
      methodWriter.visitIincInsn(1, 0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(26);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Gllj*!$-8#+Y", "Gllj*!$-8#+Y", "Gllj*!$-8#+Y", (String[]) null, false, false);
      methodWriter.visitIincInsn(68, (-1110));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      arg0.index = 2987;
      String[] arg5 = new String[5];
      arg5[0] = "MnL9?CIN9Uxh2<E";
      arg5[1] = "MnL9?CIN9Uxh2<E";
      arg5[2] = "NUs*o44\f^5@6@`2(&";
      arg5[3] = "~4>y";
      arg5[4] = "NUs*o44\f^5@6@`2(&";
      MethodWriter methodWriter = new MethodWriter(arg0, (-3154), "~4>y", "NUs*o44\f^5@6@`2(&", "MnL9?CIN9Uxh2<E", arg5, false, false);
      methodWriter.visitLdcInsn(";&r");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsnAndVisitMethodInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "Gllj*!$-8#+Q*Y";
      arg5[1] = "Gllj*!$-8#+Q*Y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-10), "zv)[|y", "zv)[|y", "Gllj*!$-8#+Q*Y", arg5, true, false);
      methodWriter.visitMethodInsn(187, "Gllj*!$-8#+Q*Y", "Gllj*!$-8#+Q*Y", "zv)[|y");
      methodWriter.visitLdcInsn("Gllj*!$-8#+Q*Y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(20);
      String[] arg5 = new String[2];
      arg5[0] = "zm{k6\"5b~i_:";
      arg5[1] = "zm{k6\"5b~i_:";
      MethodWriter methodWriter = new MethodWriter(arg0, 20, "zm{k6\"5b~i_:", "gn\"_R)X", "zm{k6\"5b~i_:", arg5, true, false);
      methodWriter.visitLdcInsn("zm{k6\"5b~i_:");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn2() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~%~4>y";
      methodNames[1] = "~%~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "zv)[|y", "zv)[|y", "~%~4>y", methodNames, true, true);
      
      // When
      methodWriter.visitLdcInsn(classWriter.COMPUTE_FRAMES);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLabel() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", "~4>y", arg5, true, true);
      Label arg1 = new Label();
      methodWriter.visitLabel(arg1);
      methodWriter.visitJumpInsn(10, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1644833768), "zv)[|y", "zv)[|y", "~4>y", methodNames, true, true);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~%~4>y";
      arg5[1] = "~%~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "zv)[|y", "zv)[|y", "~%~4>y", arg5, true, true);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(167, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(16);
      MethodWriter methodWriter = new MethodWriter(arg0, 16, ".llj*@Y-#+Y", ".llj*@Y-#+Y", ".llj*@Y-#+Y", (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(179, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnWithNegativeAndVisitMultiANewArrayInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[1];
      arg5[0] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "gn\"_R)X", "gn\"_R)X", "3{uT'O<R`", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn("F]pS!a", (-889275714));
      methodWriter.visitMethodInsn((-889275714), "3{uT'O<R`", ">yU82c_X", "gn\"_R)X");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "Gllj*!$-8#+Q*Y";
      arg5[1] = "Gllj*!$-8#+Q*Y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-10), "zv)[|y", "zv)[|y", "Gllj*!$-8#+Q*Y", arg5, true, false);
      methodWriter.visitMethodInsn(187, "Gllj*!$-8#+Q*Y", "Gllj*!$-8#+Q*Y", "zv)[|y");
      methodWriter.visitMethodInsn(32767, "Gllj*!$-8#+Q*Y", "Gllj*!$-8#+Q*Y", "zv)[|y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "zv)[|y", "zv)[|y", "~4>y", arg5, true, true);
      methodWriter.visitMethodInsn(512, "zv)[|y", "zv)[|y", "~4>y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn2() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "4";
      arg5[1] = "4";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "4", "4", "4", arg5, false, false);
      methodWriter.visitMethodInsn(186, "4", "4", "4");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(51);
      String[] methodArguments = new String[2];
      methodArguments[0] = "4";
      methodArguments[1] = "4";
      MethodWriter methodWriter = new MethodWriter(classWriter, 51, "4", "4", "4", methodArguments, false, false);
      
      // When
      try {
      methodWriter.visitMethodInsn(185, "4", "4", "4");
      fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch (StringIndexOutOfBoundsException e) {
      // Then
      assertTrue(true);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "zv)[|y", "zv)[|y", "~4>y", methodNames, true, false);
      
      // When
      methodWriter.visitFieldInsn(10, ">naN]ivTzQ#lg(_", "org.objectweb.asm.jip.MethodWriter", "DTc:05~*_9");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "i)[|y", "i)[|y", "~4>y", arg5, true, false);
      methodWriter.visitFieldInsn(248, "Signature", "~4>y", "i)[|y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn2() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~%~4>y";
      arg5[1] = "~%~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1644833768), "zv)[|y", "zv)[|y", "~%~4>y", arg5, false, true);
      
      // When
      methodWriter.visitFieldInsn(2, "zv)[|y", ".$L_/$^H4v+", "F[)p~/k,t^hpzkQ{YR");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "~4>y", "~4>y", "~4>y", arg5, false, false);
      methodWriter.visitFieldInsn(2092, "org.objectweb.asm.jip.Handler", "~4>y", "");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnAndVisitTypeInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "Gllj*!$-8#+Q*Y";
      arg5[1] = "Gllj*!$-8#+Q*Y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-10), "zv)[|y", "zv)[|y", "Gllj*!$-8#+Q*Y", arg5, true, false);
      methodWriter.visitMethodInsn(187, "Gllj*!$-8#+Q*Y", "Gllj*!$-8#+Q*Y", "zv)[|y");
      methodWriter.visitTypeInsn(187, "Gllj*!$-8#+Q*Y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsnWithNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "zv)[|y", "zv)[|y", "~4>y", methodNames, true, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "Gllj*!$-8#+Q*Y";
      arg5[1] = "Gllj*!$-8#+Q*Y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-10), "zv)[|y", "zv)[|y", "Gllj*!$-8#+Q*Y", arg5, true, false);
      methodWriter.visitTypeInsn(187, "Gllj*!$-8#+Q*Y");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, ".llj*!@Y-#+Y", ".llj*!@Y-#+Y", ".llj*!@Y-#+Y", (String[]) null, false, false);
      
      // When
      methodWriter.visitTypeInsn(4, ".llj*!@Y-#+Y");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlock() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", "~4>y", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "kzY3)i");
      methodWriter.visitVarInsn(55, 17);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitLocalVariable() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(17);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 17, "zv)[|y", "zv)[|y", "~4>y", methodNames, true, true);
      
      // When
      methodWriter.visitVarInsn(17, 1);
      Label label = new Label();
      methodWriter.visitLocalVariable("q}r#<lQf<cjZ", "Ceasy not found", "q}r#<lQf<cjZ", label, label, 1);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(83, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", ">A!9q4mip({", arg5, true, false);
      methodWriter.visitVarInsn(22, 31);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", ">A!9q4mip({", arg5, true, false);
      methodWriter.visitVarInsn(169, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", "~4>y", arg5, true, true);
      methodWriter.visitVarInsn(55, 17);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "flb0N`bvL.`@&S";
      arg5[1] = "flb0N`bvL.`@&S";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", ">A!4mip({", arg5, true, false);
      methodWriter.visitVarInsn(57, (-1028));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "~4>y", "~4>y", "~4>y", arg5, false, false);
      methodWriter.visitVarInsn(16777219, 777);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnAndVisitMethodInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-10));
      String[] arg5 = new String[2];
      arg5[0] = "flb0N`bvL.`@&S";
      arg5[1] = "flb0N`bvL.`@&S";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833768), "zv)[|y", "zv)[|y", ">A!4mip({", arg5, true, false);
      methodWriter.visitMethodInsn(187, "flb0N`bvL.`@&S", "flb0N`bvL.`@&S", "zv)[|y");
      methodWriter.visitIntInsn(1, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(4);
      String[] arg5 = new String[2];
      arg5[0] = "~4>y";
      arg5[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(arg0, 4, "zv)[|y", "zv)[|y", "~4>y", arg5, true, false);
      methodWriter.visitIntInsn(188, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[2];
      arg5[0] = "~";
      arg5[1] = "~";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1644833784), "zv)[|y", "zv)[|y", ">A!9q4mip(3", arg5, true, false);
      methodWriter.visitIntInsn(17, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(31);
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "{'sH(", "V\")L0u[UO", "{'sH(", (String[]) null, false, true);
      
      // Act and Assert
      try {
      methodWriter.visitIntInsn(31, 1);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.Frame", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsnAndVisitInsnWithPositive0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-22));
      String[] arg5 = new String[2];
      arg5[0] = "v";
      arg5[1] = "v";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "zv)[|y", "zv)[|y", "zv)[|y", arg5, true, false);
      methodWriter.visitInsn(2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsnAndVisitInsnWithZero0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~%~4>y";
      methodNames[1] = "~%~4>y";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1644833768), "zv)[|y", "zv)[|y", "~%~4>y", methodNames, false, true);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsnAndVisitInsnWithPositive1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-22));
      String[] arg5 = new String[2];
      arg5[0] = "v";
      arg5[1] = "v";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "zv)[|y", "zv)[|y", "zv)[|y", arg5, true, false);
      methodWriter.visitInsn(186);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsnAndVisitInsnWithZero1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "9)8OwACzk", "sW{fl&y_k5", "sW{fl&y_k5", (String[]) null, false, false);
      methodWriter.visitInsn(0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithNegativeAndVisitFrameWithPositive0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-71));
      String[] methodNames = new String[2];
      methodNames[0] = "";
      methodNames[1] = "";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-71), "", "org.yasl.jars.JarFileFilter", "", methodNames, false, false);
      
      // When
      methodWriter.visitFrame(3, 200, methodNames, (-71), methodNames);
      
      // Then
      assertEquals(2, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrame() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-71));
      String[] methodNames = new String[2];
      methodNames[0] = "";
      methodNames[1] = "";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-71), "", "org.yasl.jars.JarFileFilter", "", methodNames, false, false);
      
      // When
      methodWriter.visitFrame(1, 1, methodNames, 1, methodNames);
      
      // Then
      assertEquals(2, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg4 = new String[2];
      arg4[0] = "~4m%";
      arg4[1] = "~4m%";
      MethodWriter methodWriter = new MethodWriter(arg0, 0, "~4m%", "~4m%", "~4m%", arg4, false, false);
      methodWriter.visitFrame(0, 0, arg4, 0, arg4);
      // Undeclared exception!
      try { 
        methodWriter.visitFrame(2, 2, arg4, 2, arg4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "~4>y", "~4>y", "~4>y", methodNames, false, false);
      
      // When
      methodWriter.visitFrame(5, 0, methodNames, 990, methodNames);
      methodWriter.visitIntInsn(186, 186);
      
      // Then
      try {
      methodWriter.visitFrame(0, 1, methodNames, 990, methodNames);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // Verify that the exception is thrown
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(16);
      MethodWriter methodWriter = new MethodWriter(arg0, 59, ".llj*@Y-#+Y", ".llj*@Y-#+Y", "lt~4>y", (String[]) null, false, false);
      methodWriter.visitFrame(59, (-3538), (Object[]) null, 51, (Object[]) null);
      methodWriter.visitFrame(3, 2, (Object[]) null, 1, (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithNegativeAndVisitFrameWithPositive1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(1512);
      String[] methodNames = new String[4];
      methodNames[0] = "~4m%";
      methodNames[1] = "~4m%";
      methodNames[2] = "d/^:'N,CDpj^G<9X]nP";
      methodNames[3] = "~4m%";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 268435456, "d/^:'N,CDpj^G<9X]nP", "~4m%", "~4m%", methodNames, false, false);
      
      // Then
      assertEquals(4, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNegativeAndVisitFrameWithNegative() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter((-15));
      String[] arg5 = new String[2];
      arg5[0] = "~f>7";
      arg5[1] = "~f>7";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-15), "~f>7", "~f>7", "~f>7", arg5, false, false);
      Label[] arg4 = new Label[5];
      
      // Act and Assert
      try {
      methodWriter.visitFrame((-1), (byte) (-1), arg4, 1, arg4);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNegativeAndVisitFrameWithPositive() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-15));
      String[] arg4 = new String[2];
      arg4[0] = "~Ybf>7";
      arg4[1] = "~Ybf>7";
      MethodWriter methodWriter = new MethodWriter(arg0, (-15), "~Ybf>7", "~Ybf>7", "~Ybf>7", arg4, false, false);
      Label[] arg2 = new Label[4];
      // Undeclared exception!
      try { 
        methodWriter.visitFrame((byte) (-1), 1, arg2, 1, arg4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZero() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~%~4>y";
      methodNames[1] = "~%~4>y";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1644833768), "zv)[|y", "zv)[|y", "~%~4>y", methodNames, false, true);
      
      // Then
      assertEquals(2, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerExceptionAndVisitFrameWithNull() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, ".llj*!@Y-8#+Y", ".llj*!@Y-8#+Y", ".llj*!@Y-8#+Y", (String[]) null, false, false);
      
      // Act and Assert
      try {
      methodWriter.visitFrame(4, 51, (Object[]) null, (-1460), (Object[]) null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] parameterNames = new String[2];
      parameterNames[0] = "~4>y";
      parameterNames[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "i)[|y", "i)[|y", "~4>y", parameterNames, true, false);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(46, "~4>y", false);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      // 46
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotation() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-15));
      String[] parameterAnnotations = new String[5];
      parameterAnnotations[0] = "Ljava/lang/Synthetic;";
      parameterAnnotations[1] = "org.objectweb.asm.jip.MethodWriter";
      parameterAnnotations[2] = "Ljava/lang/Synthetic;";
      parameterAnnotations[3] = "Ljava/lang/Synthetic;";
      parameterAnnotations[4] = " 4/MXy`";
      MethodWriter methodWriter = new MethodWriter(classWriter, (-188), " 4/MXy`", "Ljava/lang/Synthetic;", "org.objectweb.asm.jip.MethodWriter", parameterAnnotations, false, false);
      
      // When
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", false);
      
      // Then
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithTrue() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-9));
      String[] parameterNames = new String[2];
      parameterNames[0] = "u";
      parameterNames[1] = "u";
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "5dRIW_R8Z4", "C)TyOi!9)Tp2$o!qJ", (String) null, parameterNames, true, true);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(255, "Deprecated", true);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithTrue() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "{'.sH(", "V\"+)LX0u[UO", "{'.sH(", (String[]) null, true, true);
      methodWriter.visitAnnotation("0U_{", true);
      int size = methodWriter.getSize();
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithFalse() throws Throwable  {
      // Given a MethodWriter instance with a specific configuration
      ClassWriter classWriter = new ClassWriter(0);
      String[] parameterTypes = new String[2];
      parameterTypes[0] = "~4>y";
      parameterTypes[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "~4>y", "~4>y", "~4>y", parameterTypes, false, false);
      
      // When the size of the MethodWriter is calculated
      int size = methodWriter.getSize();
      
      // Then the size should be 40
      assertEquals(40, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      
      // When
      MethodWriter methodWriter = null;
      try {
      methodWriter = new MethodWriter(classWriter, (-1765357503), "<init>", "org.objectweb.asm.jip.Frame", "LineNumberTable", methodNames, false, true);
      } catch(StringIndexOutOfBoundsException e) {
      // Then
      assertTrue(true);
      }
      
      // Then
      assertNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "{'.sH(", "V\"+)LX0u[UO", "{'.sH(", (String[]) null, false, true);
      methodWriter.visitTypeInsn(19, "xc.sjT*8Q");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = null;
      try {
        methodWriter = new MethodWriter(arg0, 3, "RuntimeInvisibleParameterAnnotations", "Eit;", "LocalVariableTypeTable", arg5, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-896));
      String[] methodNames = new String[3];
      methodNames[0] = "Y&al5?)&Gu\"P48";
      methodNames[1] = "xjcg+";
      methodNames[2] = "xjcg+";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, (-896), "R4_KyPW", "xjcg+", "<init>", methodNames, false, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, ".llj*!@Y-#+Y", ".llj*!@Y-#+Y", ".llj*!@Y-#+Y", (String[]) null, false, false);
      
      // When
      methodWriter.visitAnnotationDefault();
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(22, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      // Given: A byte array with 8 bytes
      byte[] arg0 = new byte[8];
      
      // When: The readInt method is called with the byte array and a byte value of 0
      int readInt = MethodWriter.readInt(arg0, (byte)0);
      
      // Then: The readInt method should return 0
      assertEquals(0, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // No Comments were added
      byte[] arg0 = new byte[5];
      short readShort = MethodWriter.readShort(arg0, 3);
      assertEquals((short)0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      // Given: A byte array with a length of 17
      byte[] arg0 = new byte[17];
      
      // When: The method writeShort is called with a value of -505 and an index of 3
      MethodWriter.writeShort(arg0, 3, (-505));
      
      // Then: The length of the byte array should be 17
      assertEquals(17, arg0.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[2];
      methodNames[0] = "~4>y";
      methodNames[1] = "~4>y";
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "~4>y", "~4>y", "~4>y", methodNames, false, false);
      
      // When
      methodWriter.visitCode();
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // Given a byte array with a length of 9
      byte[] arg0 = new byte[9];
      
      // When the readUnsignedShort method is called with the byte array and an offset of 0
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 0);
      
      // Then the method should return 0
      assertEquals(0, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsnThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(classWriter, 0, "i)[|y", "i)[|y", "i)[|y", (String[]) null, true, false);
      
      // Act and Assert
      try {
      methodWriter.visitJumpInsn(1, null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }
}
