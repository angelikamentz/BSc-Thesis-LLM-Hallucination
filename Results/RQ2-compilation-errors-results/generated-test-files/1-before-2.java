/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 21 18:33:44 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_ESOnly_ESTest extends MethodWriter_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // Given a byte array with a value of 96 at index 2
      byte[] arg0 = new byte[6];
      arg0[2] = (byte)96;
      
      // When the readUnsignedShort method is called with the byte array and index 2
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 2);
      
      // Then the method should return the value 24576
      assertEquals(24576, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Create a byte array with a value of 101 at index 5
      byte[] input = new byte[9];
      input[5] = (byte)101;
      
      // Call the method under test with the input byte array and index 5
      short result = MethodWriter.readShort(input, 5);
      
      // Assert that the result is equal to the expected value
      assertEquals((short)25856, result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      byte[] input = new byte[9];
      input[3] = (byte) (-71);
      
      // When
      short result = MethodWriter.readShort(input, (byte) 3);
      
      // Then
      assertEquals((short) (-18176), result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given a byte array with a negative value at index 1
      byte[] arg0 = new byte[6];
      arg0[1] = (byte) (-124);
      
      // When the readInt method is called with the byte array and a starting index of 0
      int readInt = MethodWriter.readInt(arg0, (byte)0);
      
      // Then the method should return the correct integer value
      assertEquals(8650752, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given a byte array containing a negative integer
      byte[] arg0 = new byte[7];
      arg0[0] = (byte) (-94);
      
      // When the readInt method is called with the byte array and an offset of 0
      int readInt = MethodWriter.readInt(arg0, 0);
      
      // Then the method should return the correct integer value
      assertEquals((-1577058304), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-18));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "?6o') T[JV-zPdMu", "?6o') T[JV-zPdMu", "J:|}^=S95ubO6", arg5, true, false);
      methodWriter.classReaderLength = (-226);
      methodWriter.classReaderOffset = 2;
      
      // When
      int size = methodWriter.getSize();
      
      // Then
      assertEquals((-220), size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments() throws Throwable  {
      // rollbacked to evosuite
      Label arg2 = new Label();
      int[] arg1 = new int[1];
      MethodWriter.getNewOffset(arg1, arg1, arg2);
      assertArrayEquals(new int[] {0}, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      // Create an array of integers with 5 elements
      int[] arg1 = new int[5];
      // Set the first element of the array to -2135
      arg1[0] = (-2135);
      // Call the method with the array and the other arguments
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-1603), (-5030));
      // Assert that the result is -1292
      assertEquals((-1292), newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningPositive() throws Throwable  {
      // Given
      int[] arg1 = new int[6];
      int expectedOffset = 1603;
      
      // When
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-1603), 0);
      
      // Then
      assertEquals(expectedOffset, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      // Given: A method that takes in two arrays of integers and a starting offset
      int[] arg1 = new int[5];
      int[] arg2 = new int[5];
      int startingOffset = 1876;
      
      // When: The method is called with the given arguments and the starting offset
      int newOffset = MethodWriter.getNewOffset(arg1, arg2, startingOffset, startingOffset);
      
      // Then: The method should return 0
      assertEquals(0, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(175);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "r+?1rDh", "-xua;`wJ.//fb?!B#9?", (String) null, (String[]) null, false, false);
      int size = methodWriter.getSize();
      assertEquals(8, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[1];
      methodNames[0] = "@SrdI0igAKEN2~l";
      
      // When
      classWriter.visit(
      (-2050),
      (-2050),
      "Hx)GiA _g7*/}_XU",
      "@SrdI0igAKEN2~l",
      "Hx)GiA _g7*/}_XU",
      methodNames);
      
      // Then
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1987), "Ljava/lang/Synthetic;", "Hx)GiA _g7*/}_XU", "&klF;)CaB", methodNames, false, false);
      int size = methodWriter.getSize();
      assertEquals(32, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZero() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      classWriter.version = 183;
      String[] methodNames = new String[8];
      methodNames[0] = "Hx)GiA _g7*/}_XU";
      methodNames[1] = "Hx)GiA _g7*/}_XU";
      methodNames[2] = "sUvz,2d";
      methodNames[3] = "#9}(";
      methodNames[4] = "Hx)GiA _g7*/}_XU";
      methodNames[5] = "Hx)GiA _g7*/}_XU";
      methodNames[6] = "#9}(";
      methodNames[7] = "#9}(";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hx)GiA _g7*/}_XU", "#9}(", "#9}(", methodNames, false, false);
      
      // When
      methodWriter.visitIincInsn((-452), (-1));
      methodWriter.visitFrame(1572, 708, methodNames, 0, methodNames);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(69, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFrameAndVisitIincInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(42);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", methodNames, true, false);
      
      // When
      methodWriter.visitIincInsn(42, 3);
      methodWriter.visitFrame(14, (-2879), methodNames, 3, methodNames);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(45, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumberWithPositive() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(166);
      String[] methodNames = new String[2];
      methodNames[0] = "v 9Cl65fTSp&D#)M!f";
      methodNames[1] = "v 9Cl65fTSp&D#)M!f";
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", methodNames, true, true);
      
      // When
      Label label = new Label();
      methodWriter.visitLineNumber(2, label);
      methodWriter.visitVarInsn(47, 166);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(60, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitLocalVariableAndVisitVarInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(3);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", arg5, true, false);
      
      // When
      methodWriter.visitVarInsn(74, 3);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("xwdV", "xwdV", "]$$p|hSf:)AX7No", arg4, arg4, 2);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(71, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-2018));
      MethodWriter methodWriter = new MethodWriter(arg0, 4103, "-xua;`wJ.//fb?!B#9?", "RuntimeVisibleParameterAnnotations", "^%qdc67f']vj88y", (String[]) null, false, false);
      int size = methodWriter.getSize();
      assertEquals(22, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsnAndVisitMaxs0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(191);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(8, arg1);
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitMaxs((byte) (-15), (-1052));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithZero() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(3);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", arg5, true, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, (Label) null, arg2, "zx)GiA _g7/}_X");
      methodWriter.visitMaxs((-374), 0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsAndVisitLabelAndVisitTableSwitchInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1));
      String[] arg5 = new String[2];
      arg5[0] = "['9E#eKK6HnB\rQRDAC";
      arg5[1] = "H)GiA_g7*/39}_X";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1), "['9E#eKK6HnB\rQRDAC", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitLabel(arg2);
      Label[] arg3 = new Label[8];
      arg3[0] = arg2;
      arg3[1] = arg2;
      arg3[2] = arg2;
      arg3[3] = arg2;
      arg3[4] = arg2;
      arg3[5] = arg2;
      arg3[6] = arg2;
      arg3[7] = arg2;
      methodWriter.visitTableSwitchInsn(1, 2, arg2, arg3);
      methodWriter.visitMaxs(128, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerExceptionAndVisitTableSwitchInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1));
      String[] arg5 = new String[2];
      arg5[0] = "['9E#eKK6HnB\rQRDAC";
      arg5[1] = "H)GiA_g7*/39}_X";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1), "['9E#eKK6HnB\rQRDAC", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", arg5, true, true);
      Label arg2 = new Label();
      Label[] arg3 = new Label[8];
      arg3[0] = arg2;
      arg3[1] = arg2;
      arg3[2] = arg2;
      arg3[3] = arg2;
      arg3[4] = arg2;
      arg3[5] = arg2;
      arg3[6] = arg2;
      arg3[7] = arg2;
      methodWriter.visitTableSwitchInsn(1, 2, arg2, arg3);
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(128, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsAndVisitMethodInsn() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-1));
      String[] arg5 = new String[2];
      arg5[0] = "['9E#eKK6HnB\rQRDAC";
      arg5[1] = "['9E#eKK6HnB\rQRDAC";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1), "['9E#eKK6HnB\rQRDAC", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", arg5, true, true);
      methodWriter.visitMethodInsn(416, "['9E#eKK6HnB\rQRDAC", "['9E#eKK6HnB\rQRDAC", "AnnotationDefault");
      methodWriter.visitMaxs(119, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerExceptionAndVisitTryCatchBlock() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(3);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", arg5, true, true);
      Label arg2 = new Label();
      Label arg1 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg1, arg2, "zx)GiA _g7/}_X");
      // Undeclared exception!
      try { 
        methodWriter.visitMaxs(2, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxs() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(154);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, false, false);
      methodWriter.visitMaxs(2, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumberThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[6];
      arg5[0] = "v 9Clw5fTSp&D#),!f";
      arg5[1] = "v 9Clw5fTSp&D#),!f";
      arg5[2] = "v 9Clw5fTSp&D#),!f";
      arg5[3] = "v 9Clw5fTSp&D#),!f";
      arg5[4] = "v 9Clw5fTSp&D#),!f";
      arg5[5] = "v 9Clw5fTSp&D#),!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 646, "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber((-2408), arg1);
      // Undeclared exception!
      try { 
        methodWriter.visitLineNumber(0, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableAndVisitMaxs() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-1));
      String[] arg5 = new String[2];
      arg5[0] = "['9E#eKK6HnB\rQRDAC";
      arg5[1] = "['9E#eKK6HnB\rQRDAC";
      MethodWriter methodWriter = new MethodWriter(arg0, (-1), "['9E#eKK6HnB\rQRDAC", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", arg5, true, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("H)GiA_g7*/39}_X", "['9E#eKK6HnB\rQRDAC", "[bI", arg4, arg4, 1);
      methodWriter.visitMaxs(40, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(183);
      String[] arg5 = new String[2];
      arg5[0] = "v 9Clw5fTSp&D#),!f";
      arg5[1] = "v 9Clw5fTSp&D#),!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "qTejw3}$]", "v 9Clw5fTSp&D#),!f", "qTejw3}$]", arg5, true, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("v 9Clw5fTSp&D#),!f", "qTejw3}$]", "v 9Clw5fTSp&D#),!f", arg4, arg4, 2);
      methodWriter.visitLocalVariable("v 9Clw5fTSp&D#),!f", "D?k#%DIum+[", "qTejw3}$]", arg4, arg4, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", arg5, false, false);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("org.objectweb.asm.jip.Edge", "H)GiA_g7*/39}_X", "]UBxU%aH\"jc#d}Iq~;h", arg4, arg4, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNull() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 255, "ss^kr)O#.5UO{G|<36", "ss^kr)O#.5UO{G|<36", "ss^kr)O#.5UO{G|<36", (String[]) null, true, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "qGF{<Le\"$QcTD(ob>l", "org.objectweb.asm.jip.Edge", "org.objectweb.asm.jip.Edge", (String[]) null, false, false);
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "e`8.1p~\"N~).\".");
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, (String) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(178);
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1368), "a", "Xp0e})k", "Xp0e})k", (String[]) null, true, true);
      
      // When
      methodWriter.visitMultiANewArrayInsn("Xp0e})k", 4);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 183, "a", "v 9Clw5fTSp&D#),!f", "<ini>", (String[]) null, false, false);
      methodWriter.visitMultiANewArrayInsn("a", 1124075009);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "", arg5, true, false);
      Label label = new Label();
      Label[] labels = new Label[1];
      labels[0] = label;
      
      // When
      methodWriter.visitTableSwitchInsn(191, 1907, label, labels);
      
      // Then
      assertEquals(1, labels.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithNegativeAndNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "?6o') T[JV-zPdMu", "?6o') T[JV-zPdMu", "", arg5, true, false);
      methodWriter.visitIincInsn((-1376), (-276));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(176);
      MethodWriter methodWriter = new MethodWriter(arg0, 176, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", (String[]) null, true, true);
      methodWriter.visitIincInsn(2, 933);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithNegativeAndPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "LocalVariableTypeTable", "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", (String[]) null, false, false);
      methodWriter.visitIincInsn(8388607, (-550));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      classWriter.index = 870;
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "AHOA{uW5g,7{W&", "v 9Cw5fTSp&D#),!f", "AHOA{uW5g,7{W&", (String[]) null, true, false);
      methodWriter.visitLdcInsn("v 9Cw5fTSp&D#),!f");
      
      // Then
      assertEquals(870, classWriter.index);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnAndVisitLdcInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(191);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      methodWriter.visitFieldInsn(191, "v 9Clw5fTSp&D#),!f", "org.objectweb.asm.jip.Attribute", "Wsm,[");
      methodWriter.visitLdcInsn("Wsm,[");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "v 9Cw5fTSp&D#),!f", "v 9Cw5fTSp&D#),!f", "v 9Cw5fTSp&D#),!f", (String[]) null, true, true);
      
      // When
      methodWriter.visitLdcInsn("v 9Cw5fTSp&D#),!f");
      
      // Then
      assertEquals("v 9Cw5fTSp&D#),!f", methodWriter.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsnAndVisitLabel() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "H)GiA_g7*/}_X", "H)GiA_g7*/}_X", "H)GiA_g7*/}_X", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitLabel(arg1);
      methodWriter.visitJumpInsn(37, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsnAndVisitMaxs1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(191);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitMaxs((byte) (-15), (-1052));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      String[] arg5 = new String[2];
      arg5[0] = "v 9Clw5fTSp&D#),!f";
      arg5[1] = "e`8.1p~\"N~).\".";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "qTejL3}$]", "e`8.1p~\"N~).\".", "qTejL3}$]", arg5, true, true);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(167, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "H)GiAg7*c/39}_X", "H)GiAg7*c/39}_X", "H)GiAg7*c/39}_X", arg5, false, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(251, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsnWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(183);
      String[] arg5 = new String[3];
      arg5[0] = "v 9Clw5fTSp&D#)_,!f";
      arg5[1] = "v 9Clw5fTSp&D#)_,!f";
      arg5[2] = "v 9Clw5fTSp&D#)_,!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "v 9Clw5fTSp&D#)_,!f", "v 9Clw5fTSp&D#)_,!f", "v 9Clw5fTSp&D#)_,!f", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn("v 9Clw5fTSp&D#)_,!f", (-856));
      methodWriter.visitMethodInsn(1273, "boolean", "v 9Clw5fTSp&D#)_,!f", "v 9Clw5fTSp&D#)_,!f");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(42);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", arg5, true, true);
      methodWriter.visitMethodInsn(185, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(42);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", arg5, true, false);
      methodWriter.visitMethodInsn(185, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "qGF{<Le\"$QcTD(ob>l", "org.objectweb.asm.jip.Edge", "org.objectweb.asm.jip.Edge", (String[]) null, false, false);
      methodWriter.visitMethodInsn(186, ".lL3@6", ">9FG6E;HwS%g=", "GXzd;h~n?`0[C?b\"");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-18));
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "?6o') T[JV-zPdMu", "?6o') T[JV-zPdMu", "J:|}^=S95ubO6", arg5, true, false);
      methodWriter.visitFieldInsn((-4439), "I0m.pe's", "J:|}^=S95ubO6", "JSyQ.[~Q*");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(178);
      String[] arg5 = new String[7];
      arg5[0] = "org.objectweb.ahm.jip.Handler";
      arg5[1] = "org.objectweb.ahm.jip.Handler";
      arg5[2] = "org.objectweb.ahm.jip.Handler";
      arg5[3] = "v 9Cl65fTSp&D#)M!f";
      arg5[4] = "v 9Cl65fTSp&D#)M!f";
      arg5[5] = "e}RstE<@5eW2EKw>Zo";
      arg5[6] = "v 9Cl65fTSp&D#)M!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "org.objectweb.ahm.jip.Handler", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", arg5, true, false);
      methodWriter.visitFieldInsn(178, "LocalVariableTable", "LocalVariableTable", "v 9Cl65fTSp&D#)M!f");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(176);
      MethodWriter methodWriter = new MethodWriter(arg0, 176, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", (String[]) null, true, true);
      methodWriter.visitFieldInsn(1, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 183, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", (String[]) null, false, false);
      methodWriter.visitFieldInsn(2, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "Mh_");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnAndVisitTypeInsn() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(148);
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      methodWriter.visitTypeInsn(183, "v 9Clw5fTSp&D#),!f");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsnWithNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(classWriter, 183, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", (String[]) null, true, true);
      
      // When
      methodWriter.visitTypeInsn((-587), "v 9Cl65fTSp&D#)M!f");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      methodWriter.visitTypeInsn(187, "mxr#%UX+-2\"4E1");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn2() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-2018));
      MethodWriter methodWriter = new MethodWriter(classWriter, 4103, "-xua;`wJ.//fb?!B#9?", "RuntimeVisibleParameterAnnotations", "^%qdc67f']vj88y", (String[]) null, false, false);
      
      // When
      methodWriter.visitTypeInsn(73, "-xua;`wJ.//fb?!B#9?");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockAndVisitVarInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "", (String[]) null, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "SRYj~");
      methodWriter.visitVarInsn(148, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnAndVisitVarInsnWithPositive0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(175);
      String[] arg5 = new String[2];
      arg5[0] = "v 9Clw5fTSp&D#),!f";
      arg5[1] = "v 9Clw5fTSp&D#),!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 175, "qTejL3}$]", "v 9Clw5fTSp&D#),!f", "qTejL3}$]", arg5, true, true);
      methodWriter.visitVarInsn(22, 49);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnAndVisitVarInsnWithNegative0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      String[] arg5 = new String[3];
      arg5[0] = "v 9Clw5fTSp&D#),!f";
      arg5[1] = "v 9Clw5fTSp&D#),!f";
      arg5[2] = "v 9Clw5fTSp&D#),!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", arg5, true, false);
      methodWriter.visitVarInsn(24, (-128));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnAndVisitVarInsnWithNegative1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(203);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "XPG.,W+8}", "Hx)GiA _g7*/}_XU", (String) null, (String[]) null, true, false);
      methodWriter.visitVarInsn(169, (-1936651642));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnAndVisitVarInsnWithPositive1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(147);
      MethodWriter methodWriter = new MethodWriter(arg0, (-936), "PiezhAg#L+", "v 9Clw5fTSp&D#),!f", "PiezhAg#L+", (String[]) null, true, false);
      methodWriter.visitVarInsn(147, 1077);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnAndVisitVarInsnWithPositive2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 183, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", (String[]) null, false, false);
      methodWriter.visitVarInsn(2, 183);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnWithEmptyStringAndVisitIntInsnWithZero() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(148);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      
      // When
      methodWriter.visitFieldInsn(4083, "", "LineNumberTable", "Djeo3Y^ HrQ|Hlf");
      methodWriter.visitIntInsn(2465, 0);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(0);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "H)GiA _g7*/}_XU", "H)GiA _g7*/}_XU", "H)GiA _g7*/}_XU", arg5, true, false);
      methodWriter.visitIntInsn(17, 293);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnThrowsNullPointerException() throws Throwable  {
      // Given: A new MethodWriter instance with a negative opcode
      ClassWriter classWriter = new ClassWriter(165);
      MethodWriter methodWriter = new MethodWriter(classWriter, 165, "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", "v 9Cl65fTSp&D#)M!f", (String[]) null, true, true);
      
      // When: The visitIntInsn method is called with a negative opcode
      try {
      methodWriter.visitIntInsn(-1477, 1);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Then: The method should throw a NullPointerException
      verifyException("org.objectweb.asm.jip.Frame", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 183, "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, false, false);
      methodWriter.visitIntInsn(2, 183);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(175);
      String[] arg5 = new String[2];
      arg5[0] = "v 9Clw5fTSp&D#),!f";
      arg5[1] = "e`8.1p~\"N~).\".";
      MethodWriter methodWriter = new MethodWriter(arg0, 132, "qTejL3}$]", "e`8.1p~\"N~).\".", "qTejL3}$]", arg5, true, true);
      methodWriter.visitInsn(175);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn1() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(191);
      String[] arg5 = new String[6];
      arg5[0] = "e`8.1p~\"N~).\".";
      arg5[1] = "v 9Clw5fTSp&D#),!f";
      arg5[2] = "e`8.1p~\"N~).\".";
      arg5[3] = "v 9Clw5fTSp&D#),!f";
      arg5[4] = "v 9Clw5fTSp&D#),!f";
      arg5[5] = "v 9Clw5fTSp&D#),!f";
      MethodWriter methodWriter = new MethodWriter(arg0, 7, "v 9Clw5fTSp&D#),!f", "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", arg5, true, false);
      methodWriter.visitInsn(191);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, true, false);
      methodWriter.visitInsn(2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-1942));
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "e`8.1p~\"N~).\".", "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", (String[]) null, false, false);
      methodWriter.visitInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNonEmptyArrayAndNonEmptyArray() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(194);
      String[] methodNames = new String[5];
      methodNames[0] = "Hx)GiA _g7*/}_XU";
      methodNames[1] = "Hx)GiA _g7*/}_XU";
      methodNames[2] = "Hx)GiA _g7*/}_XU";
      methodNames[3] = "mxr#%UX+-2\"4E1";
      methodNames[4] = "Hx)GiA _g7*/}_XU";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "mxr#%UX+-2\"4E1", "RuntimeInvisibleAnnotations", "lG.c4W++!6:Lqn)A", methodNames, false, false);
      methodWriter.visitFrame(1, 2, methodNames, 2, methodNames);
      
      // Then
      assertEquals(5, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZeroAndVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "N|V-~d>$", "N|V-~d>$", "", methodNames, false, false);
      
      // When
      try {
      methodWriter.visitFrame(0, 0, methodNames, 2, methodNames);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(0);
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", arg4, false, false);
      Object[] arg2 = new Object[6];
      
      // Act and Assert
      try {
      methodWriter.visitFrame(0, 2, arg2, 1, arg4);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZeroAndVisitFrame() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "zx)GiA _g7/}_X", "zx)GiA _g7/}_X", ">", methodNames, true, false);
      
      // When
      methodWriter.visitFrame(0, (-2073681264), methodNames, 0, methodNames);
      
      // Then
      assertEquals(0, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithEmptyArrayAndVisitFrameWithEmptyArray() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(3);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "zx)GiA _g77/}jX", "zx)GiA _g77/}jX", "zx)GiA _g77/}jX", methodNames, true, false);
      
      // When
      methodWriter.visitFrame(3, 191, methodNames, 186, methodNames);
      methodWriter.visitFrame(3, 24, methodNames, 191, methodNames);
      
      // Then
      assertEquals(0, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitLdcInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "v 9Cw5fTSp&D#),!f", "v 9Cw5fTSp&D#),!f", "v 9Cw5fTSp&D#),!f", (String[]) null, true, false);
      methodWriter.visitFrame(1, (-1276), (Object[]) null, 187, (Object[]) null);
      methodWriter.visitLdcInsn("v 9Cw5fTSp&D#),!f");
      methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      // Given: A MethodWriter instance with a frame size of -28
      ClassWriter classWriter = new ClassWriter((-28));
      // And: A String array with no elements
      String[] arg4 = new String[0];
      // And: A MethodWriter instance with a frame size of 2
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "", "", "org.objectweb.asm.jip.MethodWriter", arg4, false, false);
      // When: The methodWriter.visitFrame method is called with a frame size of -28 and 1 argument
      methodWriter.visitFrame((-28), 1, arg4, 378, arg4);
      // Then: An IllegalStateException is thrown
      assertThrows(IllegalStateException.class, () -> methodWriter.visitFrame((-28), 1, arg4, 378, arg4));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      String[] methodNames = new String[8];
      methodNames[0] = "Hx)GiA _g7*/}_XU";
      methodNames[1] = "Hx)GiA _g7*/}_XU";
      methodNames[2] = "sUvz,2d";
      methodNames[3] = "Hx)GiA _g7*/}_XU";
      methodNames[4] = "Hx)GiA _g7*/}_XU";
      methodNames[5] = "Hx)GiA _g7*/}_XU";
      methodNames[6] = "Hx)GiA _g7*/}_XU";
      methodNames[7] = "Hx)GiA _g7*/}_XU";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", methodNames, false, false);
      
      // When
      try {
      methodWriter.visitFrame(-1, 72, methodNames, 2047, methodNames);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameAndVisitFrameWithNullAndVisitFrameWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "AHOA{uW5g,7{W&", "v 9Cw5fTSp&D#),!f", "AHOA{uW5g,7{W&", (String[]) null, true, true);
      methodWriter.visitFrame(2, 2, (Object[]) null, 1, (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-10));
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", methodNames, true, false);
      
      // When
      try {
      methodWriter.visitFrame(4, (-604), methodNames, (-10), methodNames);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithFalse() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] parameterAnnotations = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H)GiA _g7*/}_XU", "H)GiA _g7*/}_XU", "H)GiA _g7*/}_XU", parameterAnnotations, true, false);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(-32768, "H)GiA _g7*/}_XU", false);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      // -32768
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotation() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(3);
      String[] parameterNames = new String[1];
      parameterNames[0] = "";
      MethodWriter methodWriter = new MethodWriter(classWriter, -1987, "Ljava/lang/Synthetic;", "Hx)GiA _g7*/}_XU", "&klF;)CaB", parameterNames, false, true);
      
      // When
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(-1466, "Ljava/lang/Synthetic;", true);
      
      // Then
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] parameterAnnotations = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H)GiA _g7*/}_XU", "H)GiA _g7*/}_XU", "H)GiA _g7*/}_XU", parameterAnnotations, false, false);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(-1958, "5)mA59(ACh?", true);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithEmptyStringAndTrue() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[0];
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "Hx)GiA _g7*/}_XU", "Hx)GiA _g7*/}_XU", "", methodNames, true, false);
      
      // Then
      int size = methodWriter.getSize();
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithNonEmptyStringAndFalse() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(147);
      MethodWriter methodWriter = new MethodWriter(classWriter, 1552, "v 9Clw5fTSpx&D#),!f", "v 9Clw5fTSpx&D#),!f", "v 9Clw5fTSp&D#),!f", (String[]) null, false, false);
      
      // When
      methodWriter.visitAnnotation("fXE`Cx", false);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(42);
      MethodWriter methodWriter = null;
      
      // When
      try {
      methodWriter = new MethodWriter(classWriter, 1, "<init>", "%*+n-C|.", "%*+n-C|.", (String[]) null, true, true);
      } catch(StringIndexOutOfBoundsException e) {
      // Then
      assertTrue(true);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter((-4155));
      String[] arg5 = new String[5];
      arg5[0] = "1S}:EkSXUa)9%B`[1NQ";
      arg5[1] = "v 9Clw5fTSp&D#),!f";
      arg5[2] = "JKq2gYRr&WJ`ve*Is";
      arg5[3] = "JKq2gYRr&WJ`ve*Is";
      arg5[4] = "LocalVariableTypeTable";
      MethodWriter methodWriter = new MethodWriter(arg0, (-4155), "JKq2gYRr&WJ`ve*Is", "1S}:EkSXUa)9%B`[1NQ", "1S}:EkSXUa)9%B`[1NQ", arg5, true, false);
      methodWriter.visitEnd();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(0);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", "H)GiA_g7*/39}_X", methodNames, true, false);
      
      // When
      methodWriter.visitAnnotationDefault();
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(22, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      // Given: A byte array with 6 bytes
      byte[] bytes = new byte[6];
      
      // When: The readInt method is called with the byte array
      int result = MethodWriter.readInt(bytes, (byte) 0);
      
      // Then: The result should be 0
      assertEquals(0, result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Create a byte array with a length of 9
      byte[] arg0 = new byte[9];
      // Set the first byte of the array to 3
      arg0[0] = (byte)3;
      // Call the readShort method with the byte array and the first byte as the parameter
      short readShort = MethodWriter.readShort(arg0, (byte)3);
      // Assert that the returned short value is 0
      assertEquals((short)0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      // Given
      byte[] input = new byte[5];
      
      // When
      MethodWriter.writeShort(input, (byte)0, 799);
      
      // Then
      assertArrayEquals(new byte[] {(byte)3, (byte)31, (byte)0, (byte)0, (byte)0}, input);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(183);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "LocalVariableTypeTable", "e`8.1p~\"N~).\".", "v 9Clw5fTSp&D#),!f", (String[]) null, false, false);
      
      // When
      methodWriter.visitCode();
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // Given: A byte array with a length of 6
      byte[] arg0 = new byte[6];
      
      // When: The readUnsignedShort method is called with the byte array and an offset of 2
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, 2);
      
      // Then: The method should return 0
      assertEquals(0, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(138);
      MethodWriter methodWriter = new MethodWriter(arg0, 138, "v 9Cl65fTSp&D#,)M!f", "v 9Cl65fTSp&D#,)M!f", "v 9Cl65fTSp&D#,)M!f", (String[]) null, true, true);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(2, arg1);
  }
}
