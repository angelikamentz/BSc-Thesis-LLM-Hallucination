/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 21 21:04:31 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.scanning.radar.Radar;
import net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;
import net.virtualinfinity.atrobots.hardware.shield.Shield;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_SRC_ESTest extends Robot_SRC_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("Qm0Q[k", (-2177), arg2);
      
      // Act and Assert
      try {
      robot.inflictedDamage(0.02454369260617026);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is thrown due to an uninitialized variable
      assertEquals("net.virtualinfinity.atrobots.robot.Robot", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateSpecificSnapshotThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot", 748, arg2);
      Armor arg0 = new Armor(400.0);
      robot.setArmor(arg0);
      // Undeclared exception!
      try { 
        robot.createSpecificSnapshot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot arg0 = new Robot("+{%./aDf?", 40, arg2);
      
      // Expected exception
      NullPointerException expectedException = null;
      try {
      arg0.checkCollision(arg0);
      } catch (NullPointerException e) {
      expectedException = e;
      }
      
      // Verify
      assertNotNull(expectedException);
      verifyException("net.virtualinfinity.atrobots.arena.Position", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      // Given a robot with overburn enabled
      Robot robot = new Robot("{_Yu1LNy1}%n(_", (-263), new RobotScoreKeeper());
      robot.setOverburn(true);
      
      // When the robot's overburn status is checked
      boolean overburn = robot.isOverburn();
      
      // Then the robot's overburn status should be true
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShift() throws Throwable  {
      // Given a robot with a turret
      Robot robot = new Robot((String) null, 1, new RobotScoreKeeper());
      Turret turret = new Turret();
      robot.setTurret(turret);
      
      // When the turret shift is called
      robot.getTurretShift();
      
      // Then the round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the id should be 1
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsNegative() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a Transponder
      Robot robot = new Robot("P", (-3604), scoreKeeper);
      Transponder transponder = new Transponder();
      transponder.setId((-3604));
      robot.setTransponder(transponder);
      
      // Verify that the robot's transponder is set correctly
      assertEquals(transponder, robot.getTransponder());
      
      // Verify that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Verify that the robot's id is set correctly
      assertEquals((-3604), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // Given: A new robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("(fdMMdaOW2=0r:", 0, scoreKeeper);
      
      // When: The robot wins a round
      scoreKeeper.wonRound(robot);
      
      // Then: The robot's total wins should be 1
      assertEquals(1, robot.getTotalWins());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot with a score of 1790
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 1790, scoreKeeper);
      
      // When: The scoreKeeper is told that the robot has tied a round
      scoreKeeper.tiedRound(robot);
      
      // Then: The robot's total ties should be 1
      assertEquals(1, robot.getTotalTies());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be 1790
      assertEquals(1790, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Given: A robot score keeper and a robot
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("!", 868, robotScoreKeeper);
      
      // When: The robot is killed
      robotScoreKeeper.killedRobot(robot);
      
      // Then: The robot's total kills should be 0
      assertEquals(0, robot.getTotalKills());
      
      // And: The robot's round kills should be 868
      assertEquals(868, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given: A robot with a negative ID and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("Qm0Q[k", (-2177), scoreKeeper);
      
      // When: The robot dies
      scoreKeeper.died(robot);
      
      // Then: The robot's total deaths should be 1
      assertEquals(1, robot.getTotalDeaths());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetShield() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a Shield
      Robot robot = new Robot(null, 2146939098, scoreKeeper);
      Shield shield = new Shield(1984.0);
      robot.setShield(shield);
      
      // Verify that the Robot has the Shield
      assertEquals(shield, robot.getShield());
      
      // Verify that the Robot has not killed any rounds
      assertEquals(0, robot.getRoundKills());
      
      // Verify that the Robot has the correct ID
      assertEquals(2146939098, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot((String) null, (-1188), arg2);
      robot.getName();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1188), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("", 8, arg2);
      robot.getName();
      assertEquals(8, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("z-I", 0, arg2);
      int id = robot.getId();
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with an ID of 1
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", 1, scoreKeeper);
      
      // Get the ID of the Robot
      int id = robot.getId();
      
      // Assert that the ID is 1
      assertEquals(1, id);
      
      // Assert that the Robot has not killed any rounds
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("z-I", 0, scoreKeeper);
      
      // When: The robot is overburn
      robot.isOverburn();
      
      // Then: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 0
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("Q.&)DssW-$zlT7{f", 0, scoreKeeper);
      
      // Then the robot's armor should be 0
      assertEquals(0, robot.getArmor());
      
      // And the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a specific ID and score keeper
      Robot robot = new Robot("6,%.x)", (-1431655765), scoreKeeper);
      
      // Get the ID of the robot
      int robotId = robot.getId();
      
      // Assert that the ID is equal to the expected value
      assertEquals(0, robot.getRoundKills());
      assertEquals((-1431655765), robotId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given: A robot and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("BMJ2ec\">F:W2g)X", 1, scoreKeeper);
      
      // When: The robot is killed
      robot.addRobotListener(scoreKeeper);
      robot.killedRobot();
      
      // Then: The robot's total kills should be 1
      assertEquals(1, robot.getTotalKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTieRound() throws Throwable  {
      // Given: A new robot and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$3", 28, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot ties a round
      robot.tieRound();
      
      // Then: The total ties should be 1
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWinRound() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("e]:RwEwRe", 3045, (RobotScore) null);
      robot.addRobotListener(arg0);
      robot.winRound();
      assertEquals(0, robot.getRoundKills());
      assertEquals(3045, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("+{%./aDf?", 71, arg2);
      robot.setOverburn(true);
      
      // When
      try {
      robot.armorDepleted();
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Then
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 11, arg2);
      
      // Expected outcome
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      robot.armorDepleted();
      });
      
      // Verification
      assertEquals("Expecting exception: NullPointerException", expectedException.getMessage());
      verifyException("net.virtualinfinity.atrobots.robot.Robot", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetRadar() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("\"pLm9[,]3H& ,", (-2210), scoreKeeper);
      Radar radar = new Radar();
      robot.setRadar(radar);
      
      // When
      robot.getRadar();
      
      // Then
      assertEquals((-2210), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSonar() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a Sonar object
      Robot robot = new Robot("", 8, scoreKeeper);
      
      // Set the Sonar object on the Robot object
      robot.setSonar(new Sonar());
      
      // Get the Sonar object from the Robot object
      Sonar sonar = robot.getSonar();
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the robot ID is 8
      assertEquals(8, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a null name and a specific ID
      Robot robot = new Robot(null, 4007, scoreKeeper);
      
      // Then the robot's total wins should be 0
      assertEquals(0, robot.getTotalWins());
      
      // And the robot's ID should be 4007
      assertEquals(4007, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiver() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with an ID of 53 and a copy of the current score
      Robot robot = new Robot("", 53, FinalRobotScore.copyOf(scoreKeeper));
      
      // Get the transceiver of the robot
      robot.getTransceiver();
      
      // Assert that the robot's ID is 53
      assertEquals(53, robot.getId());
      
      // Assert that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      RobotScore arg2 = FinalRobotScore.copyOf(arg0);
      Robot robot = new Robot("", 53, arg2);
      robot.getTotalKills();
      assertEquals(0, robot.getRoundKills());
      assertEquals(53, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonarReturningNull() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a name, health, and score keeper
      Robot robot = new Robot("", 8, scoreKeeper);
      
      // Then: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 8
      assertEquals(8, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("A", 3136, arg2);
      Duration arg0 = robot.getLastDamageTaken();
      
      // Act
      try {
      robot.update(arg0);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("net.virtualinfinity.atrobots.arena.Position", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandlerAndHandleInterrupt() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-2147092800), arg2);
      Robot.GetRobotInfoInterrupt createGetRobotInfoInterruptHandler = (Robot.GetRobotInfoInterrupt)robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      // Undeclared exception!
      try { 
        createGetRobotInfoInterruptHandler.handleInterrupt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot$GetRobotInfoInterrupt", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHardwareBus() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and a negative id
      Robot robot = new Robot((String) null, (-450), arg2);
      
      // Set the hardware bus of the robot to null
      robot.setHardwareBus((HardwareBus) null);
      
      // Assert that the id of the robot is the same as the negative id
      assertEquals((-450), robot.getId());
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a negative ID and a score keeper
      Robot robot = new Robot("}", (-853), scoreKeeper);
      
      // Then: The robot's odometer should be 0
      assertEquals(0, robot.getOdometer());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be the negative ID passed in
      assertEquals((-853), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("P", (-3604), arg2);
      
      // Act
      try {
      robot.destruct();
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("no message in exception (getMessage() returned null)", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShieldReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a negative ID and the score keeper
      Robot robot = new Robot("", (-796), scoreKeeper);
      
      // Call the getShield method on the robot
      robot.getShield();
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the ID is the same as the negative ID passed in
      assertEquals((-796), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and ID
      Robot robot = new Robot("t{~H q PD0ToMq", 8, scoreKeeper);
      
      // Then the robot's name and ID are set correctly
      assertEquals("t{~H q PD0ToMq", robot.getName());
      assertEquals(8, robot.getId());
      
      // And the round kills are set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 21, arg2);
      MineLayer arg0 = new MineLayer(21);
      robot.setMineLayer(arg0);
      robot.getMineLayer();
      assertEquals(0, robot.getRoundKills());
      assertEquals(21, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("H@6", (-2417), arg2);
      robot.getTurretOffsetSensor();
      assertEquals((-2417), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateMissile() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 1038, scoreKeeper);
      Position position = robot.getPosition();
      
      // Act
      robot.createMissile(null, position, 1038);
      
      // Assert
      assertEquals(1038, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNonNull() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-181), arg2);
      Turret arg0 = new Turret();
      robot.setTurret(arg0);
      robot.getTurret();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-181), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // Given a robot with a negative id and a score keeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("\"pLm9[,]3H& ,", (-2210), arg2);
      
      // When the robot is reset
      robot.reset();
      
      // Then the robot's id should be reset to 0
      assertEquals(0, robot.getId());
      
      // And the robot's score keeper should be reset
      assertFalse(robot.isOverburn());
      
      // And the robot's round kills should be reset to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadarReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("\"pLm9[,]3H& ,", (-2210), arg2);
      robot.getRadar();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-2210), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // Create a new RobotScore
      RobotScore robotScore = FinalRobotScore.copyOf(robotScoreKeeper);
      
      // Create a new Robot with the RobotScore
      Robot robot = new Robot("", 53, robotScore);
      
      // Get the computer of the Robot
      robot.getComputer();
      
      // Assert that the Robot's ID is 53
      assertEquals(53, robot.getId());
      
      // Assert that the Robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot with a total tie
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 1790, arg2);
      
      // When: The getTotalTies method is called
      robot.getTotalTies();
      
      // Then: The round kills should be 0 and the id should be 1790
      assertEquals(0, robot.getRoundKills());
      assertEquals(1790, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created
      Robot robot = new Robot("net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot", 748, scoreKeeper);
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's ID should be 748
      assertEquals(748, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and ID
      Robot robot = new Robot("PNs25XR{", 22, scoreKeeper);
      
      // Then the robot's ID should be 22
      assertEquals(22, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // Given: A new robot with a null name and an id of 21
      Robot robot = new Robot((String) null, 21, new RobotScoreKeeper());
      
      // When: The robot's mine layer is accessed
      robot.getMineLayer();
      
      // Then: The robot's id should be 21
      assertEquals(21, robot.getId());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBus() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a specific id and score keeper
      Robot robot = new Robot("net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot", 748, scoreKeeper);
      
      // Then: The robot's id and score keeper should be set correctly
      assertEquals(0, robot.getRoundKills());
      assertEquals(748, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningTransponderWhereGetIdIsZero() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative ID
      Robot robot = new Robot("P", -3604, scoreKeeper);
      
      // Set the transponder of the robot
      Transponder transponder = new Transponder();
      robot.setTransponder(transponder);
      
      // Get the transponder of the robot
      Transponder actualTransponder = robot.getTransponder();
      
      // Assert that the transponder is the same as the one set
      assertEquals(transponder, actualTransponder);
      
      // Assert that the ID of the robot is the same as the one set
      assertEquals(-3604, robot.getId());
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottle() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("", 17, (RobotScore) null);
      robot.getThrottle();
      assertEquals(17, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a negative ID
      Robot robot = new Robot("P", -3604, scoreKeeper);
      
      // Get the transponder of the robot
      robot.getTransponder();
      
      // Assert that the ID of the robot is equal to the negative ID
      assertEquals(-3604, robot.getId());
      
      // Assert that the round kills of the robot is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a non-negative ID
      Robot robot = new Robot("", 12345, scoreKeeper);
      
      // Then the robot's ID should be set to the given ID
      assertEquals(12345, robot.getId());
      
      // And the robot's round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningArmorWhereGetRemainingIsPositive() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a given id and score keeper
      Robot robot = new Robot("net.virtualinfinity.atrobots.snapshots.ArenaObjectSnapshot", 748, scoreKeeper);
      
      // And a new Armor object is created with a given value
      Armor armor = new Armor(400.0);
      
      // And the robot's armor is set to the new Armor object
      robot.setArmor(armor);
      
      // Then the robot's armor should be equal to the new Armor object
      assertEquals(armor, robot.getArmor());
      
      // And the robot's round kills should be equal to 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be equal to 748
      assertEquals(748, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a name, id, and score
      Robot robot = new Robot("", 53, FinalRobotScore.copyOf(scoreKeeper));
      
      // Verify that the robot's total deaths is 0
      assertEquals(0, robot.getTotalDeaths());
      
      // Verify that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Verify that the robot's id is 53
      assertEquals(53, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("}", (-853), arg2);
      robot.getDesiredHeading();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-853), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a name and ID
      Robot robot = new Robot("?,SpxEuG*T<)", 8, scoreKeeper);
      
      // Then: The robot's heading should be 0
      assertEquals(0, robot.getHeading());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's ID should be 8
      assertEquals(8, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Setup
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("", 11, arg0);
      robot.addRobotListener(arg0);
      
      // Expected exception
      NullPointerException expectedException = assertThrows(NullPointerException.class, () -> {
      robot.armorDepleted();
      });
      
      // Verify
      assertEquals("Expecting exception: NullPointerException", expectedException.getMessage());
      verifyException("net.virtualinfinity.atrobots.robot.Robot", expectedException);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // Given a new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot is created with a name, id, and score keeper
      Robot robot = new Robot("!", 0, scoreKeeper);
      
      // Then the robot's speed should be 0
      assertEquals(0, robot.getSpeed());
      
      // And the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      // Create a new Robot with a specific id
      Robot robot = new Robot("Qm0Q[k", (-2177), arg2);
      // Create a new ArenaObjectVisitorAdaptor
      ArenaObjectVisitorAdaptor arg0 = new ArenaObjectVisitorAdaptor();
      // Accept the ArenaObjectVisitorAdaptor on the Robot
      robot.accept(arg0);
      // Assert that the Robot's id is equal to the specified id
      assertEquals((-2177), robot.getId());
      // Assert that the Robot's round kills is equal to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a null name and an id of 1
      Robot robot = new Robot(null, 1, scoreKeeper);
      
      // Then the robot's aim turret port should be 0
      assertEquals(0, robot.getAimTurretPort());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 1
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("{_Yu1LNy1}%n(_", (-263), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, robot.getRoundKills());
      assertEquals((-263), robot.getId());
      assertEquals(0, lastDamageGiven.getCycles());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, x-coordinate, and score keeper
      Robot robot = new Robot("J*", (-150), scoreKeeper);
      
      // Then the robot's turret should be returned
      assertEquals(0, robot.getRoundKills());
      assertEquals((-150), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 2146939098, arg2);
      robot.getOverburnLatchPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2146939098, robot.getId());
  }
}
