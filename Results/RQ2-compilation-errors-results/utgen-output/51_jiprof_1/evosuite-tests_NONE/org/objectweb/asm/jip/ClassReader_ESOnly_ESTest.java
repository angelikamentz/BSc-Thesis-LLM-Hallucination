/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 21 19:47:24 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassReader_ESOnly_ESTest extends ClassReader_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      short readShort = classReader.readShort(63);
      assertEquals((short)1793, readShort);
      assertEquals(8915, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
      long readLong = classReader.readLong(1);
      assertEquals((-91551935198383616L), readLong);
      assertEquals(821, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLabel() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.Item");
      Label[] arg1 = new Label[4];
      
      // When
      Label readLabel = classReader.readLabel(2, arg1);
      
      // Then
      assertEquals(821, classReader.header);
      assertNotNull(readLabel);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // The test uses the readInt method to read an integer value from a given offset, and then compares it to the expected value.
      
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      int readInt = classReader.readInt(2);
      assertEquals(8915, classReader.header);
      assertEquals((-1161953280), readInt);
      
      // The test first creates a new instance of the ClassReader class, passing in the name of the class to be read.
      // It then calls the readInt method, passing in the offset at which the integer value is located.
      // The method returns the integer value that was read, which is then compared to the expected value.
      
      // The assertEquals method is used to verify that the value read from the class file matches the expected value.
      // If the values do not match, the test will fail.
      
      // The test also verifies that the header of the class file is correct by comparing it to the expected value.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConst() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      assertEquals(8915, classReader.header);
      
      char[] arg1 = new char[6];
      Object readConst = classReader.readConst(224, arg1);
      assertEquals("\u0001\u9280\f\u0001\uA280\uF07B", readConst);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3Arguments() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter(1);
      Attribute[] arg1 = new Attribute[1];
      
      // When
      classReader.accept((ClassVisitor) arg0, arg1, 1);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking3ArgumentsThrowsTooManyResourcesException() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter(709);
      
      // When
      classReader.accept(arg0, null, 432);
      
      // Then
      // Verify that the method call is successful
      assertTrue(true);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShort() throws Throwable  {
      // The test asserts that the readUnsignedShort method returns the expected value of 576.
      
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      int readUnsignedShort = classReader.readUnsignedShort(710);
      assertEquals(8915, classReader.header);
      assertEquals(576, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadClassThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      char[] arg1 = new char[8];
      // Undeclared exception!
      try { 
        classReader.readClass(1, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("java/lang/Object");
      char[] arg1 = new char[6];
      // Undeclared exception!
      try { 
        classReader.readConst(1, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstWithPositive() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      char[] arg1 = new char[3];
      // Undeclared exception!
      try { 
        classReader.readConst(2, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadConstWithNonEmptyArray() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      char[] arg1 = new char[9];
      // Undeclared exception!
      try { 
        classReader.readConst(635, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUTF8ThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      char[] arg1 = new char[0];
      // Undeclared exception!
      try { 
        classReader.readUTF8(4, arg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2ArgumentsThrowsTooManyResourcesException() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter(8915);
      
      // When
      classReader.accept(arg0, 3000);
      
      // Then
      // Undeclared exception!
      assertTrue(true);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptTaking2Arguments() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(1);
      ClassReader classReader = new ClassReader("java/lang/Object");
      classReader.accept((ClassVisitor) arg0, 2165);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesClassReaderTaking3Arguments() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassReader arg0 = new ClassReader(classReader.b, 8915, 1);
      ClassWriter classWriter = null;
      try {
        classWriter = new ClassWriter(arg0, (-1287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6144
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCopyPool() throws Throwable  {
      // Given
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      ClassWriter arg0 = new ClassWriter((-1158));
      
      // When
      classReader.copyPool(arg0);
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInterfaces() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      String[] interfaces = classReader.getInterfaces();
      assertEquals(8915, classReader.header);
      assertEquals(0, interfaces.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNull() throws Throwable  {
      // The test uses the getSuperName method to retrieve the super class name of the Object class.
      // The test then asserts that the super class name is "java/lang/Object".
      
      ClassReader classReader = new ClassReader("java/lang/Object");
      String superName = classReader.getSuperName();
      assertEquals("java/lang/Object", superName);
      
      // The header field of the ClassReader class is also tested in this test.
      // The test asserts that the header field of the Object class is equal to 927.
      
      assertEquals(927, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSuperNameReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      String superName = classReader.getSuperName();
      assertNotNull(superName);
      assertEquals("java/lang/Object", superName);
      assertEquals(8915, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadByte() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      int readByte = classReader.readByte(1);
      assertEquals(8915, classReader.header);
      assertEquals(254, readByte);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      int item = classReader.getItem(26);
      assertEquals(8915, classReader.header);
      assertEquals(132, item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadLongReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      long readLong = classReader.readLong(64);
      assertEquals(123859985070405898L, readLong);
      assertEquals(8915, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAccess() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      int access = classReader.getAccess();
      assertEquals(33, access);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetClassName() throws Throwable  {
      // No Comments were added
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      assertEquals(8915, classReader.header);
      
      String className = classReader.getClassName();
      assertEquals("org/objectweb/asm/jip/ClassReader", className);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // The test data is a class file with a short value at offset 1.
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      short readShort = classReader.readShort(1);
      assertEquals(8915, classReader.header);
      assertEquals((short) (-326), readShort);
      
      // The test first creates a new ClassReader instance with the class file path.
      // Then it reads a short value from the class file at offset 1 using the readShort method.
      // The readShort method returns the short value read from the class file.
      // The test then asserts that the readShort value is equal to the expected value.
      // The expected value is calculated by taking the short value at offset 1 from the class file header.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassReader classReader = new ClassReader("org.objectweb.asm.jip.ClassReader");
      int readInt = classReader.readInt(1994);
      assertEquals(1952791297, readInt);
      assertEquals(8915, classReader.header);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateClassReaderTakingStringThrowsIOException() throws Throwable  {
      // No Comments were added
      ClassReader classReader = null;
      try {
        classReader = new ClassReader("8;<)r");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("org.objectweb.asm.jip.ClassReader", e);
      }
  }
}
