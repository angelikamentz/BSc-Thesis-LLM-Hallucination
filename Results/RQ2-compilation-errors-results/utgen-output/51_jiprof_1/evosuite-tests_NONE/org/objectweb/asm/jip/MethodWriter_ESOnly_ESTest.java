/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 21 18:28:03 GMT 2024
 */

package org.objectweb.asm.jip;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodWriter_ESOnly_ESTest extends MethodWriter_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningPositive() throws Throwable  {
      // Create a byte array with a length of 7
      byte[] arg0 = new byte[7];
      // Set the second element of the array to 97 (which is the ASCII code for 'a')
      arg0[1] = (byte)97;
      // Call the method under test with the array and a value of 0 for the offset
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, (byte)0);
      // Assert that the method returned the value 97
      assertEquals(97, readUnsignedShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningPositive() throws Throwable  {
      // Create a byte array with a length of 2
      byte[] arg0 = new byte[2];
      // Set the first byte of the array to 42
      arg0[0] = (byte)42;
      // Call the readShort method with the byte array and a value of 0
      short readShort = MethodWriter.readShort(arg0, (byte)0);
      // Assert that the returned short value is equal to 10752
      assertEquals((short)10752, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningNegative() throws Throwable  {
      // Given
      byte[] input = new byte[7];
      input[0] = (byte) (-87);
      
      // When
      short result = MethodWriter.readShort(input, (byte) 0);
      
      // Then
      assertEquals((short) (-22272), result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningPositive() throws Throwable  {
      // Given: A byte array with a value of 59 at index 2
      byte[] arg0 = new byte[7];
      arg0[2] = (byte)59;
      
      // When: The method readInt is called with the byte array and an offset of 2
      int readInt = MethodWriter.readInt(arg0, 2);
      
      // Then: The method should return the integer value 989855744
      assertEquals(989855744, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningNegative() throws Throwable  {
      // Given a byte array with a negative integer value
      byte[] arg0 = new byte[9];
      arg0[2] = (byte) (-25);
      
      // When the readInt method is called with the byte array and an offset of 2
      int readInt = MethodWriter.readInt(arg0, 2);
      
      // Then the method should return the negative integer value
      assertEquals((-419430400), readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking3Arguments() throws Throwable  {
      // Given
      Label label = new Label();
      int[] offsets = new int[3];
      
      // When
      MethodWriter.getNewOffset(offsets, offsets, label);
      MethodWriter.getNewOffset(offsets, offsets, label);
      
      // Then
      assertEquals(3, offsets.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningZero() throws Throwable  {
      // Given: A method that takes in two arrays of integers and a starting offset
      int[] arg1 = new int[7];
      int[] arg2 = new int[7];
      int startingOffset = 4925;
      
      // When: The method is called with the given arguments and the starting offset
      int newOffset = MethodWriter.getNewOffset(arg1, arg2, startingOffset, startingOffset);
      
      // Then: The method should return 0
      assertEquals(0, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsWithNegative() throws Throwable  {
      // Given
      int[] arg1 = new int[6];
      int[] arg2 = new int[6];
      int expectedNewOffset = 211;
      
      // When
      int newOffset = MethodWriter.getNewOffset(arg1, arg2, (-872), (-661));
      
      // Then
      assertEquals(expectedNewOffset, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsReturningNegative() throws Throwable  {
      // Given
      int[] arg1 = new int[7];
      int expectedNewOffset = (-203);
      
      // When
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, 1, (-202));
      
      // Then
      assertEquals(expectedNewOffset, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNewOffsetTaking4ArgumentsWithPositive() throws Throwable  {
      // Given
      int[] arg1 = new int[7];
      int expectedNewOffset = 575;
      
      // When
      int newOffset = MethodWriter.getNewOffset(arg1, arg1, (-574), 1);
      
      // Then
      assertEquals(expectedNewOffset, newOffset);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFrameAndVisitMultiANewArrayInsn0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(128);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "k", "pci)4|bliRt6s6k", "k", methodNames, false, false);
      
      // When
      methodWriter.visitFrame(128, 3472, methodNames, 128, methodNames);
      methodWriter.visitMultiANewArrayInsn("k", 3472);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(46, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitLineNumber() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(128);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, -2049, "k", "pci)4|bliRt6s6k", "k", methodNames, false, false);
      
      // When
      methodWriter.visitMultiANewArrayInsn("C^kD#b", -2049);
      Label label = new Label();
      methodWriter.visitLineNumber(2, label);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(62, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitLocalVariable() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(148);
      String[] strings = new String[4];
      strings[0] = "\"";
      strings[1] = "\"";
      strings[2] = "\"";
      strings[3] = "\"";
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "\"", "pci)4|lit6k", "\"", strings, true, false);
      
      // When
      methodWriter.visitMultiANewArrayInsn("\"", 186);
      Label label = new Label();
      methodWriter.visitLocalVariable("\"", "LocalVariableTable", "\"", label, label, 1);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(90, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 122, ".", "pci)|bliRt66k", ".", (String[]) null, true, true);
      methodWriter.visitInsn(122);
      int size = methodWriter.getSize();
      assertEquals(35, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(138);
      String[] methodNames = new String[4];
      methodNames[0] = "(ihC`thKdC:s+f";
      methodNames[1] = "r";
      methodNames[2] = "r";
      methodNames[3] = "Exceptimns";
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "r", "(ihC`thKdC:s+f", "r", methodNames, false, false);
      methodWriter.classReaderOffset = 2;
      
      // Then
      int size = methodWriter.getSize();
      assertEquals(6, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSize1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(65280);
      MethodWriter methodWriter = new MethodWriter(arg0, 65280, "SourceDebugExtension", "SourceDebugExtension", (String) null, (String[]) null, false, false);
      int size = methodWriter.getSize();
      assertEquals(14, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsnAndVisitMaxs0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      String[] arg5 = new String[4];
      arg5[0] = "pci)4|bliRt6s6k";
      arg5[1] = "T-";
      arg5[2] = "T-";
      arg5[3] = "T-";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "T-", "pci)4|bliRt6s6k", "T-", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(2, arg1);
      methodWriter.visitJumpInsn(168, arg1);
      methodWriter.visitMaxs(16777220, 55);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsWithNegative() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(120);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 120, "pci)4|bliRt6s6k", "pci)4|bliRt6s6k", "k", arg5, true, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "pci)4|bliRt6s6k");
      methodWriter.visitMaxs((-2677), 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxs() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "k", "k", "k", (String[]) null, false, false);
      methodWriter.visitMaxs(1, 128);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLineNumber() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(115);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-2049), "k", "pci)4|bliRt6s6k", "xbF,7J._E", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitLineNumber(186, arg1);
      methodWriter.visitLineNumber(Integer.MAX_VALUE, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 168, "DGi L3Zr,n87VV}VJ#", "!Uy[-%)?KY!DZ>8", "DGi L3Zr,n87VV}VJ#", arg5, false, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("!Uy[-%)?KY!DZ>8", "DGi L3Zr,n87VV}VJ#", "DGi L3Zr,n87VV}VJ#", arg4, arg4, 2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(65280);
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 65280, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", (String[]) null, false, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 168, "DGi L3Zr,n87VV}VJ#", "!Uy[-%)?KY!DZ>8", "DGi L3Zr,n87VV}VJ#", arg5, false, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("!Uy[-%)?KY!DZ>8", "INHA'pj.vNab", "DGi L3Zr,n87VV}VJ#", arg4, arg4, 2);
      methodWriter.visitLocalVariable("F=5;<C#Q$f+>", "RuntimeVisibleAnnotations", "DGi L3Zr,n87VV}VJ#", arg4, arg4, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariable3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(107);
      MethodWriter methodWriter = new MethodWriter(arg0, 107, ")n\"~.dbs{u", "pci)|bliRt66k", ")n\"~.dbs{u", (String[]) null, true, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("pci)|bliRt66k", "pci)|bliRt66k", ")n\"~.dbs{u", arg4, arg4, 107);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLocalVariableWithNullAndNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(23);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2744, "H\"#j^[&)q<HY@;dk7", "H\"#j^[&)q<HY@;dk7", "Exceptions", arg5, true, true);
      Label arg4 = new Label();
      methodWriter.visitLocalVariable("H\"#j^[&)q<HY@;dk7", "Exceptions", (String) null, arg4, arg4, (-1889234170));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlock() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(226);
      String[] arg5 = new String[3];
      arg5[0] = "Ck";
      arg5[1] = "Ck";
      arg5[2] = "pci)4|bliRt6s6k";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "c", "c", "pci)4|bliRt6s6k", arg5, false, false);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "r[");
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "g");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockWithNull() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter((-482));
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "c", "c", "c", (String[]) null, false, false);
      methodWriter.visitTryCatchBlock((Label) null, (Label) null, (Label) null, (String) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMultiANewArrayInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(23);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2744, "H\"#j^[&)q<HY@;dk7", "H\"#j^[&)q<HY@;dk7", "Exceptions", arg5, true, true);
      methodWriter.visitMultiANewArrayInsn("H\"#j^[&)q<HY@;dk7", 2744);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(128);
      String[] arg5 = new String[4];
      arg5[0] = "k";
      arg5[1] = "k";
      arg5[2] = "k";
      arg5[3] = "Exceptions";
      MethodWriter methodWriter = new MethodWriter(arg0, 128, "k", "gh^~/]lFvku)nh0", "k", arg5, true, true);
      Label arg2 = new Label();
      Label[] arg3 = new Label[7];
      arg3[0] = arg2;
      arg3[1] = arg2;
      arg3[2] = arg2;
      arg3[3] = arg2;
      arg3[4] = arg2;
      arg3[5] = arg2;
      arg3[6] = arg2;
      methodWriter.visitTableSwitchInsn(128, 2, arg2, arg3);
      assertEquals(7, arg3.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTableSwitchInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(128);
      String[] methodNames = new String[1];
      methodNames[0] = "StackMapTable";
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "dxcep>bions", "StackMapTable", "k", methodNames, false, false);
      Label label = new Label();
      Label[] labels = new Label[1];
      labels[0] = label;
      
      // When
      methodWriter.visitTableSwitchInsn(128, 128, label, labels);
      
      // Then
      assertEquals(1, labels.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ".", ".", ".", (String[]) null, false, false);
      methodWriter.visitIincInsn((-2), 1174536705);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(34);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "[\"wiFie", "!Uy[-C^%)?KY!DZ>8", "!Uy[-C^%)?KY!DZ>8", arg5, true, false);
      methodWriter.visitIincInsn((-515), 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(107);
      MethodWriter methodWriter = new MethodWriter(arg0, 107, ")n\"~.dbs{u", "pci)|bliRt66k", ")n\"~.dbs{u", (String[]) null, true, true);
      methodWriter.visitIincInsn(3142, 3142);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIincInsnWithNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-482));
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "c", "c", "c", (String[]) null, false, false);
      
      // When
      methodWriter.visitIincInsn(2, (-574));
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn0() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(126);
      arg0.index = 2581;
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ".", "bm", ".", (String[]) null, false, false);
      methodWriter.visitLdcInsn("C(I");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(23);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2744, "H\"#j^[&)q<HY@;dk7", "H\"#j^[&)q<HY@;dk7", "Exceptions", arg5, true, true);
      methodWriter.visitLdcInsn("Exceptions");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLdcInsn2() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(115);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 115, "", "pci)4|bliRt6s6k", "xbF,7J._E", arg5, true, false);
      
      // When
      methodWriter.visitLdcInsn("");
      
      // Then
      assertEquals("", methodWriter.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitLabel() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 122, ")n\"~.dbs{u", "pci)|bliRt66k", ")n\"~.dbs{u", (String[]) null, true, true);
      Label arg1 = new Label();
      methodWriter.visitLabel(arg1);
      methodWriter.visitJumpInsn(2, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsnAndVisitMaxs1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(115);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 115, "k", "pci)4|blt3Rt6s6k", "pci)4|blt3Rt6s6k", arg5, true, false);
      Label arg1 = new Label();
      arg0.lastMethod.visitJumpInsn(168, arg1);
      methodWriter.visitMaxs(1, 3489);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitJumpInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(134);
      MethodWriter methodWriter = new MethodWriter(arg0, 3, "ybm", "ybm", "yPX]d<6)3D|&bZc6", (String[]) null, false, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(134, arg1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsnAndVisitMultiANewArrayInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(115);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 115, "", "pci)4|bliRt6s6k", "1<,6-(Fp-tjz.`", arg5, true, false);
      methodWriter.visitMultiANewArrayInsn("2:a!2^Xl\"Vt488$(ov", (-2301));
      methodWriter.visitMethodInsn(186, "Gau`1=fP", "pci)4|bliRt6s6k", "pci)4|bliRt6s6k");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(97);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "k", "pci)4|bliRt6s6k", "k", arg5, true, false);
      methodWriter.visitMethodInsn(1, "pci)4|bliRt6s6k", "k,<&sgJR`", "pci)4|bliRt6s6k");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      MethodWriter methodWriter = new MethodWriter(arg0, 128, "k", "k", "k", (String[]) null, false, false);
      methodWriter.visitMethodInsn(2, "Gau`1=fP", "Gau`1=fP", "Gau`1=fP");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMethodInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 122, "T{", "pci)|bliRt66k", "T{", (String[]) null, true, true);
      methodWriter.visitMethodInsn(1, "T{", "pci)|bliRt66k", "/OzY`'hD");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsnAndVisitLdcInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(97);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "k", "pci)4|bliRt6s6k", "xbF,7J._E", arg5, true, false);
      methodWriter.visitFieldInsn(97, "k", "k", "C(I");
      methodWriter.visitLdcInsn("pci)4|bliRt6s6k");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "DGi L3,n87VV}VJ#", "!Uy[-%)?KY!DZ>8", "!Uy[-%)?KY!DZ>8", arg5, true, false);
      methodWriter.visitFieldInsn(1, "DGi L3,n87VV}VJ#", "!Uy[-%)?KY!DZ>8", "DGi L3,n87VV}VJ#");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(128);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, (-2034), "k", "pci)4|bliRt6s6k", "`tY{#{", methodNames, true, false);
      
      // When
      methodWriter.visitFieldInsn(178, "k", "org.objectweb.asm.jip.MethodWriter", "Clas' not found");
      
      // Then
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(17);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 79, "H\"#j^[&)q<HY@;dk7", "H\"#j^[&)q<HY@;dk7", "H\"#j^[&)q<HY@;dk7", arg5, true, true);
      methodWriter.visitFieldInsn(471, "pci)|bliRt66k", "H\"#j^[&)q<HY@;dk7", "pci)|bliRt66k");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-2034), "k", "pci)4|bliRt6s6k", "`tY{#{", arg5, true, false);
      methodWriter.visitFieldInsn(1609, "k", "Clas' not found", "J>.=xYX");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFieldInsn4() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(126);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ".", "bm", ".", (String[]) null, false, false);
      methodWriter.visitFieldInsn(126, "bm", ".", ".");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(120);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 120, "pci)4|bliRt6s6k", "pci)4|bliRt6s6k", "k", arg5, true, false);
      methodWriter.visitTypeInsn((-2677), "pci)4|bliRt6s6k");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(139);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, ".", "pci)4|bliRt6s6k", ".", (String[]) null, true, true);
      methodWriter.visitTypeInsn(139, "$rZ;zJ-");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTypeInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(134);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ".", "bm", ".", (String[]) null, false, false);
      methodWriter.visitTypeInsn(1, "RuntimeInvisibleAnnotations");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitTryCatchBlockAndVisitVarInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "H\"j^[&)q<HY@;dk", "H\"j^[&)q<HY@;dk", "H\"j^[&)q<HY@;dk", arg5, true, true);
      Label arg2 = new Label();
      methodWriter.visitTryCatchBlock(arg2, arg2, arg2, "H\"j^[&)q<HY@;dk");
      methodWriter.visitVarInsn(172, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "H\"j^[&)q<HY@;dk", "H\"j^[&)q<HY@;dk", "H\"j^[&)q<HY@;dk", arg5, true, true);
      methodWriter.visitVarInsn(172, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      String[] arg5 = new String[4];
      arg5[0] = "pci)4|bliRt6s6k";
      arg5[1] = "k";
      arg5[2] = "pci)4|bliRt6s6k";
      arg5[3] = "Exceptions";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "k", "pci)4|bliRt6s6k", "pci)4|bliRt6s6k", arg5, true, false);
      methodWriter.visitVarInsn(24, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      String[] arg5 = new String[4];
      arg5[0] = "pci)4|bliRt6s6k";
      arg5[1] = "k";
      arg5[2] = "k";
      arg5[3] = "Exceptions";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "k", "pci)4|bliRt6s6k", "k", arg5, true, false);
      methodWriter.visitVarInsn(169, 941);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      String[] arg5 = new String[4];
      arg5[0] = "Ot6GJE&'pp[`; E>yH";
      arg5[1] = "Ot6GJE&'pp[`; E>yH";
      arg5[2] = "Ot6GJE&'pp[`; E>yH";
      arg5[3] = "Ot6GJE&'pp[`; E>yH";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "c", "pci)4|bliRt6s6k", "Ot6GJE&'pp[`; E>yH", arg5, true, false);
      methodWriter.visitVarInsn(55, 55);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitVarInsnWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(148);
      String[] arg5 = new String[4];
      arg5[0] = "pci)4|bliRt6s6k";
      arg5[1] = ".-";
      arg5[2] = ".-";
      arg5[3] = ".-";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, ".-", "pci)4|bliRt6s6k", ".-", arg5, false, false);
      methodWriter.visitVarInsn(169, (-474));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnAndVisitJumpInsn() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(120);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 120, "pci)4|bliRt6s6k", "pci)4|bliRt6s6k", "k", arg5, true, false);
      Label arg1 = new Label();
      methodWriter.visitJumpInsn(120, arg1);
      methodWriter.visitIntInsn(76, 120);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      String[] arg5 = new String[4];
      arg5[0] = "$t6GE&'pp[ E>y6";
      arg5[1] = "$t6GE&'pp[ E>y6";
      arg5[2] = "k";
      arg5[3] = "$t6GE&'pp[ E>y6";
      MethodWriter methodWriter = new MethodWriter(arg0, 2, "c", "pci)4|bliRt6s6k", "$t6GE&'pp[ E>y6", arg5, true, false);
      methodWriter.visitIntInsn(188, 1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(115);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 115, "", "pci)4|bliRt6s6k", "xbF,7J._E", arg5, true, false);
      methodWriter.visitIntInsn(17, 49);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnWithNegativeAndPositive() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(139);
      MethodWriter methodWriter = new MethodWriter(arg0, 2, ".", "pci)4|bliRt6s6k", ".", (String[]) null, true, true);
      methodWriter.visitIntInsn(2, (-3341));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn0() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "DGi L3,n87VV}VJ#", "!Uy[-%)?KY!DZ>8", "!Uy[-%)?KY!DZ>8", arg5, true, false);
      methodWriter.visitInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn1() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-2034), "k", "pci)4|bliRt6s6k", "`tY{#{", arg5, true, false);
      methodWriter.visitInsn(178);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn2() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(128);
      MethodWriter methodWriter = new MethodWriter(arg0, 29, "k", "pci)4|bliRt6s6k", "k", (String[]) null, true, true);
      methodWriter.visitInsn(191);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitInsn3() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 1, ".", "bm", ".", (String[]) null, false, false);
      methodWriter.visitInsn(1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNegativeAndVisitFrameThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(128);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 128, "", "pc)4|bliRt6s6E+k", "", arg5, true, false);
      Object[] arg4 = new Object[4];
      
      // Act and Assert
      try {
      methodWriter.visitFrame(0, (-128), arg4, 56, arg4);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(21);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "hnnVDO6", "hnnVDO6", "hnnVDO6", methodNames, false, false);
      
      // Act and Assert
      try {
      methodWriter.visitFrame(4, 15, methodNames, -838, null);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // no message in exception (getMessage() returned null)
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrame0() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(21);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "wiFie", "!Uy[-C^%)?KY!DZ>8", "!Uy[-C^%)?KY!DZ>8", methodNames, true, false);
      
      // When
      methodWriter.visitFrame(3, 1, methodNames, 3, methodNames);
      
      // Then
      assertEquals(0, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeAndVisitFrameAndVisitMultiANewArrayInsn1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(97);
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "k", "pci)4|bliRt6s6k", "xbF,7J._E", arg4, true, false);
      
      // When
      methodWriter.visitFrame(2, 1, arg4, 1, arg4);
      classWriter.version = 473;
      methodWriter.visitMultiANewArrayInsn("k", 97);
      int size = methodWriter.getSize();
      
      // Then
      assertEquals(49, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithZero() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(146);
      String[] methodArguments = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "ap", "ap", "ap", methodArguments, false, false);
      
      // When
      try {
      methodWriter.visitFrame(0, 196, methodArguments, -2639, methodArguments);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrame1() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(21);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "wiFie", "!Uy[-C^%)?KY!DZ>8", "!Uy[-C^%)?KY!DZ>8", methodNames, true, false);
      
      // When
      methodWriter.visitFrame(5, 178, methodNames, 21, methodNames);
      methodWriter.visitFrame(3, 5, methodNames, 255, methodNames);
      
      // Then
      assertEquals(0, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitIntInsnWithNegativeAndVisitFrame() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(115);
      MethodWriter methodWriter = new MethodWriter(arg0, (-893), "k", "k", "k", (String[]) null, false, false);
      methodWriter.visitFrame((-893), 2391, (Object[]) null, (-893), (Object[]) null);
      methodWriter.visitIntInsn((-893), 1);
      methodWriter.visitFrame(115, 115, (Object[]) null, 2, (Object[]) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameThrowsIllegalStateException() throws Throwable  {
      // Given: A MethodWriter object with a frame
      MethodWriter methodWriter = new MethodWriter(new ClassWriter(115), (-893), "k", "k", "k", (String[]) null, false, false);
      methodWriter.visitFrame((-893), 2391, (Object[]) null, (-893), (Object[]) null);
      
      // When: The frame is visited with an invalid frame type
      try {
      methodWriter.visitFrame(115, 115, (Object[]) null, 2, (Object[]) null);
      fail("Expecting exception: IllegalStateException");
      } catch (IllegalStateException e) {
      // Then: An IllegalStateException is thrown with no message
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNegative() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(23);
      String[] methodNames = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H\"#j^-&)q<HY@;dk#", "H\"#j^-&)q<HY@;dk#", "H\"#j^-&)q<HY@;dk#", methodNames, true, true);
      
      // When
      methodWriter.visitFrame(2, 2, methodNames, (-1203), methodNames);
      
      // Then
      assertEquals(0, methodNames.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNegativeAndVisitFrameThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given: A MethodWriter instance with a negative frame type
      ClassWriter classWriter = new ClassWriter(107);
      String[] arg4 = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "k", "pci)4|bliRt6s6k", "pci)4|bliRt6s6k", arg4, true, false);
      
      // When: The visitFrame method is called with an invalid frame type
      try {
      methodWriter.visitFrame(-1, 132, arg4, 1, arg4);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then: The method should throw an ArrayIndexOutOfBoundsException
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(21);
      String[] parameterAnnotations = new String[0];
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "H\"j[&)q<HY@;dk", "H\"j[&)q<HY@;dk", "H\"j[&)q<HY@;dk", parameterAnnotations, true, true);
      
      // When
      try {
      methodWriter.visitParameterAnnotation(1, "H\"j[&)q<HY@;dk", true);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.Type", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotation() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 122, ")n\"~.dbs{u", "pci)|bliRt66k", ")n\"~.dbs{u", (String[]) null, true, true);
      AnnotationVisitor visitParameterAnnotation = methodWriter.visitParameterAnnotation(2, "Ljava/lang/Synthetic;", true);
      assertNotNull(visitParameterAnnotation);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitParameterAnnotationWithFalse() throws Throwable  {
      // Given: A MethodWriter instance with a valid parameter annotation
      MethodWriter methodWriter = new MethodWriter(new ClassWriter(128), 128, "8mFWg%\"N(17", "8mFWg%\"N(17", "8mFWg%\"N(17", (String[]) null, false, false);
      
      // When: The visitParameterAnnotation method is called with an invalid index
      try {
      methodWriter.visitParameterAnnotation(128, "8mFWg%\"N(17", false);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
      // Then: The method should throw an ArrayIndexOutOfBoundsException
      verifyException("org.objectweb.asm.jip.Type", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithTrue() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(122);
      MethodWriter methodWriter = new MethodWriter(arg0, 122, ".", "pci)|bliRt66k", ".", (String[]) null, true, true);
      methodWriter.visitAnnotation("DGi L3,n87VV}VJ#", true);
      int size = methodWriter.getSize();
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationWithFalse() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(65280);
      MethodWriter methodWriter = new MethodWriter(arg0, 65280, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", (String[]) null, false, false);
      methodWriter.visitAnnotation("Signature", false);
      int size = methodWriter.getSize();
      assertEquals(34, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsArrayIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(128);
      MethodWriter methodWriter = new MethodWriter(classWriter, 2, "k", "pci)4|bliRt6s6k", "k", (String[]) null, true, true);
      
      // When
      try {
      methodWriter.visitMaxs(1, 128);
      fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      // Then
      verifyException("org.objectweb.asm.jip.Type", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitMaxsThrowsNullPointerException() throws Throwable  {
      // Arrange
      ClassWriter classWriter = new ClassWriter(148);
      MethodWriter methodWriter = new MethodWriter(classWriter, (-1791040738), "pci)4|bliRt6s6k", "pci)4|bliRt6s6k", (String) null, (String[]) null, false, true);
      Label label = new Label();
      methodWriter.visitTryCatchBlock(label, label, (Label) null, "k");
      
      // Act and Assert
      try {
      methodWriter.visitMaxs(2, (-195));
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // no message in exception (getMessage() returned null)
      //
      verifyException("org.objectweb.asm.jip.MethodWriter", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateMethodWriterThrowsStringIndexOutOfBoundsException() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter(128);
      MethodWriter methodWriter = null;
      
      // When
      try {
      methodWriter = new MethodWriter(classWriter, 2, "<init>", "void", "boolean", (String[]) null, true, true);
      } catch (StringIndexOutOfBoundsException e) {
      // Then
      assertTrue(true);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitFrameWithNonEmptyArrayAndNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(115);
      String[] arg4 = new String[2];
      arg4[0] = "H\"#j^[&)q<HY@d7";
      arg4[1] = "H\"#j^[&)q<HY@d7";
      MethodWriter methodWriter = new MethodWriter(arg0, 1, "H\"#j^[&)q<HY@d7", "Deprecated", "org.objectweb.asm.jip.MethodWriter", arg4, false, false);
      methodWriter.visitFrame(1, 1, arg4, 1, arg4);
      assertEquals(2, arg4.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitEnd() throws Throwable  {
      // Given
      ClassWriter classWriter = new ClassWriter((-482));
      
      // When
      MethodWriter methodWriter = new MethodWriter(classWriter, 1, "c", "c", "c", (String[]) null, false, false);
      
      // Then
      assertNotNull(methodWriter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitAnnotationDefault() throws Throwable  {
      // rollbacked to evosuite
      ClassWriter arg0 = new ClassWriter(65280);
      MethodWriter methodWriter = new MethodWriter(arg0, 65280, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", (String[]) null, false, false);
      methodWriter.visitAnnotationDefault();
      int size = methodWriter.getSize();
      assertEquals(28, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadIntReturningZero() throws Throwable  {
      // Given: A byte array with a length of 7
      byte[] arg0 = new byte[7];
      
      // When: The readInt method is called with the byte array and an offset of 2
      int readInt = MethodWriter.readInt(arg0, 2);
      
      // Then: The method should return 0
      assertEquals(0, readInt);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadShortReturningZero() throws Throwable  {
      // Given: A byte array with two bytes, where the first byte is 0 and the second byte is 0
      byte[] arg0 = new byte[2];
      arg0[0] = 0;
      arg0[1] = 0;
      
      // When: The readShort method is called with the byte array
      short readShort = MethodWriter.readShort(arg0, (byte)0);
      
      // Then: The readShort method should return a short value of 0
      assertEquals((short)0, readShort);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWriteShort() throws Throwable  {
      // Given
      byte[] bytes = new byte[4];
      
      // When
      MethodWriter.writeShort(bytes, 1, (byte) (-80));
      
      // Then
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-80), (byte)0}, bytes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVisitCode() throws Throwable  {
      // No Comments were added
      ClassWriter arg0 = new ClassWriter(21);
      String[] arg5 = new String[0];
      MethodWriter methodWriter = new MethodWriter(arg0, (-1357), "org.objectweb.asm.jip.Item", "org.objectweb.asm.jip.Item", "H\"#j^[&)q<HY@;dk7", arg5, false, false);
      methodWriter.visitCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadUnsignedShortReturningZero() throws Throwable  {
      // Given a byte array with a length of 7
      byte[] arg0 = new byte[7];
      
      // When the readUnsignedShort method is called with the byte array and a byte value of 0
      int readUnsignedShort = MethodWriter.readUnsignedShort(arg0, (byte)0);
      
      // Then the method should return 0
      assertEquals(0, readUnsignedShort);
  }
}
