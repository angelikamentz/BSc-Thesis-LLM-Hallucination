/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Jun 21 19:09:17 GMT 2024
 */

package net.virtualinfinity.atrobots.robot;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.ArenaObjectVisitorAdaptor;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.arena.TangibleArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.computer.HardwareBus;
import net.virtualinfinity.atrobots.computer.MemoryCell;
import net.virtualinfinity.atrobots.hardware.armor.Armor;
import net.virtualinfinity.atrobots.hardware.mines.MineLayer;
import net.virtualinfinity.atrobots.hardware.radio.Transceiver;
import net.virtualinfinity.atrobots.hardware.scanning.sonar.Sonar;
import net.virtualinfinity.atrobots.hardware.shield.Shield;
import net.virtualinfinity.atrobots.hardware.transponder.Transponder;
import net.virtualinfinity.atrobots.hardware.turret.Turret;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.AngleBracket;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Robot_ESOnly_ESTest extends Robot_ESOnly_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("M}yy`R2t<ban", 0, scoreKeeper);
      Duration duration = Duration.ONE_CYCLE;
      
      // Act
      try {
      robot.update(duration);
      fail("Expecting exception: NullPointerException");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("net.virtualinfinity.atrobots.arena.Position", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictedDamageThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("4yrrnp", (-3704), arg2);
      // Undeclared exception!
      try { 
        robot.inflictedDamage((-326));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testScanThrowsNullPointerException() throws Throwable  {
      // Setup
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 0, arg2);
      AngleBracket arg0 = AngleBracket.all();
      
      // Expected exception
      NullPointerException exception = assertThrows(NullPointerException.class, () -> {
      robot.scan(arg0, 0, false, false);
      });
      
      // Verify
      assertEquals("NullPointerException", exception.getMessage());
      verifyException("net.virtualinfinity.atrobots.robot.Robot", exception);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckCollisionThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, 0, arg2);
      
      // Act and Assert
      try {
      robot.checkCollision((TangibleArenaObject) null);
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is thrown due to null argument
      assertEquals("NullPointerException", e.getClass().getSimpleName());
      assertNull(e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningTrue() throws Throwable  {
      // Given a robot with overburn set to true
      Robot robot = new Robot((String) null, (-3203), new RobotScoreKeeper());
      robot.setOverburn(true);
      
      // When the isOverburn method is called
      boolean overburn = robot.isOverburn();
      
      // Then the method should return true
      assertTrue(overburn);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTransponder() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a Transponder
      Robot robot = new Robot("", 2247, scoreKeeper);
      Transponder transponder = new Transponder();
      transponder.setId(2247);
      robot.setTransponder(transponder);
      
      // Verify that the Robot's Transponder is set correctly
      assertEquals(transponder, robot.getTransponder());
      
      // Verify that the Robot's ID is set correctly
      assertEquals(2247, robot.getId());
      
      // Verify that the Robot's round kills is set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningPositive() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1431655765), robotScoreKeeper);
      
      // When: The robot wins a round
      robotScoreKeeper.wonRound(robot);
      
      // Then: The robot's total wins should be 1
      assertEquals(1, robot.getTotalWins());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be (-1431655765)
      assertEquals((-1431655765), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningPositive() throws Throwable  {
      // Given: A new RobotScoreKeeper and a new Robot with a name and ID
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("K~IQU1CSsh6 ]", 0, scoreKeeper);
      
      // When: The RobotScoreKeeper is told that the Robot has tied in a round
      scoreKeeper.tiedRound(robot);
      
      // Then: The Robot's total ties should be 1
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningPositive() throws Throwable  {
      // Given: A robot score keeper and a robot
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1750), robotScoreKeeper);
      
      // When: The robot is killed
      robotScoreKeeper.killedRobot(robot);
      
      // Then: The robot's total kills should be 0 and its round kills should be 0
      assertEquals((-1750), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningPositive() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("4yrrnp", (-3704), scoreKeeper);
      
      // When: The robot dies
      scoreKeeper.died(robot);
      
      // Then: The robot's total deaths should be 1
      assertEquals(1, robot.getTotalDeaths());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be (-3704)
      assertEquals((-3704), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShieldReturningShieldWhereIsActiveIsFalse() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot with a null name, -1824 id, and the RobotScoreKeeper
      Robot robot = new Robot((String) null, (-1824), arg2);
      
      // Create a new Shield with a value of 4100.113
      Shield arg0 = new Shield(4100.113);
      
      // Set the Shield of the Robot to the new Shield
      robot.setShield(arg0);
      
      // Get the Shield of the Robot
      Shield shield = robot.getShield();
      
      // Assert that the id of the Robot is -1824
      assertEquals((-1824), robot.getId());
      
      // Assert that the round kills of the Robot is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the Shield of the Robot is the same as the new Shield
      assertEquals(shield, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name and a negative id
      Robot robot = new Robot((String) null, (-1431655765), arg2);
      
      // Verify that the name is null
      assertNull(robot.getName());
      
      // Verify that the id is negative
      assertEquals((-1431655765), robot.getId());
      
      // Verify that the round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningNonEmptyString() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name and id
      Robot robot = new Robot("|Y| ", (-255), scoreKeeper);
      
      // Then the robot's name and id are set correctly
      assertEquals("|Y| ", robot.getName());
      assertEquals((-255), robot.getId());
      
      // And the robot's round kills are set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningPositive() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper robotScoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a name, score, and RobotScoreKeeper
      Robot robot = new Robot("Divide by zero", 2690, robotScoreKeeper);
      
      // Get the id of the robot
      int id = robot.getId();
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the id is 2690
      assertEquals(2690, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningNegative() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and a negative id
      Robot robot = new Robot((String) null, (-1), arg2);
      
      // Get the id of the robot
      int id = robot.getId();
      
      // Assert that the round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the id is negative
      assertEquals((-1), id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsOverburnReturningFalse() throws Throwable  {
      // Given: A robot with a negative energy level
      Robot robot = new Robot((String) null, (-3203), new RobotScoreKeeper());
      
      // When: The robot is overburn
      robot.isOverburn();
      
      // Then: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be (-3203)
      assertEquals((-3203), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetArmorReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("PToDi&+R}", 1888, arg2);
      robot.getArmor();
      assertEquals(1888, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdReturningZero() throws Throwable  {
      // Given a new robot with a name and score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("d", 0, scoreKeeper);
      
      // When the robot's id is retrieved
      int id = robot.getId();
      
      // Then the id should be 0
      assertEquals(0, id);
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurret() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("%8x?}r%3RI#.\")?(i", 0, arg2);
      robot.getTurret();
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testKilledRobot() throws Throwable  {
      // Given: A robot with a score keeper and a robot listener
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("FAwP6p{vUm Ok%u3Ew,", (-2310), FinalRobotScore.copyOf(scoreKeeper));
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot is killed
      robot.killedRobot();
      
      // Then: The score keeper's total kills should be 1
      assertEquals(1, scoreKeeper.getTotalKills());
      
      // And: The robot's id should be (-2310)
      assertEquals((-2310), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRobot() throws Throwable  {
      // Given: A robot with an ID of 420 and a score keeper
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 420, arg2);
      
      // When: The robot ties a round
      robot.tieRound();
      
      // Then: The robot's ID should be the same
      assertEquals(420, robot.getId());
      
      // And: The robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWinRound() throws Throwable  {
      // Given: A robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("V", 1213795105, scoreKeeper);
      robot.addRobotListener(scoreKeeper);
      
      // When: The robot wins a round
      robot.winRound();
      
      // Then: The robot's total wins should be 1
      assertEquals(1, robot.getTotalWins());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOverburn() throws Throwable  {
      // Given
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("@%e,$[7uMeY6U'q9U", 42, arg2);
      robot.setOverburn(true);
      
      // When
      try {
      robot.armorDepleted();
      fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      // Then
      // no message in exception (getMessage() returned null)
      verifyException("net.virtualinfinity.atrobots.robot.Robot", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testArmorDepletedThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg0 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtu5linfinity.atrobots.robot.Robot$4", 402, arg0);
      robot.addRobotListener(arg0);
      // Undeclared exception!
      try { 
        robot.armorDepleted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInflictDamageThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-1824), arg2);
      Shield arg0 = new Shield(4100.113);
      robot.setShield(arg0);
      // Undeclared exception!
      try { 
        robot.inflictDamage((DamageInflicter) null, 2.130440126E9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.robot.Robot", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTransceiver() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a Transceiver
      Robot robot = new Robot("j0O", 2294, scoreKeeper);
      
      // Set the Transceiver for the Robot
      Transceiver transceiver = new Transceiver();
      robot.setTransceiver(transceiver);
      
      // Get the Transceiver for the Robot
      Transceiver retrievedTransceiver = robot.getTransceiver();
      
      // Assert that the Transceiver is the same as the one set
      assertEquals(transceiver, retrievedTransceiver);
      
      // Assert that the Robot's ID is 2294
      assertEquals(2294, robot.getId());
      
      // Assert that the Robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSonar() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot object with a specific ID and score keeper
      Robot robot = new Robot("", 2332, scoreKeeper);
      
      // Set the sonar of the robot
      Sonar sonar = new Sonar();
      robot.setSonar(sonar);
      
      // Get the sonar of the robot
      Sonar robotSonar = robot.getSonar();
      
      // Assert that the robot's ID is equal to the expected value
      assertEquals(2332, robot.getId());
      
      // Assert that the robot's round kills is equal to the expected value
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalWinsReturningZero() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("", (-1431655765), scoreKeeper);
      
      // Then the robot's total wins should be 0
      assertEquals(0, robot.getTotalWins());
      
      // And the robot's id should be (-1431655765)
      assertEquals((-1431655765), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransceiverReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("j0O", 2294, arg2);
      robot.getTransceiver();
      assertEquals(2294, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalKillsReturningZero() throws Throwable  {
      // Given a new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot instance is created
      Robot robot = new Robot("et.virtualinfinity.atrobots.robot.Robot$", 0, scoreKeeper);
      
      // Then the robot's id and round kills should be 0
      assertEquals(0, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSonarReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a negative ID and a reference to the scoreKeeper
      Robot robot = new Robot("?\"}x',n@fZZ=c)", (-2546), scoreKeeper);
      
      // Then the robot's ID should be the negative ID passed in
      assertEquals((-2546), robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageTaken() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$2", (-3294), scoreKeeper);
      
      // Then the robot's lastDamageTaken should be 0
      assertEquals(0, robot.getLastDamageTaken().getCycles());
      
      // And the robot's roundKills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be (-3294)
      assertEquals((-3294), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateGetRobotInfoInterruptHandlerAndHandleInterrupt() throws Throwable  {
      // Arrange
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("lR5[5&ixtfrm", (-2683), arg2);
      Robot.GetRobotInfoInterrupt createGetRobotInfoInterruptHandler = (Robot.GetRobotInfoInterrupt)robot.createGetRobotInfoInterruptHandler((MemoryCell) null, (MemoryCell) null, (MemoryCell) null);
      
      // Act and Assert
      assertThrows(NullPointerException.class, () -> createGetRobotInfoInterruptHandler.handleInterrupt());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHardwareBus() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a HardwareBus
      Robot robot = new Robot("", 1, scoreKeeper);
      
      // Then: The robot's hardware bus is set to the given HardwareBus
      assertEquals(0, robot.getRoundKills());
      assertEquals(1, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOdometer() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("Ha]_0~YL1Le", 15, arg2);
      robot.getOdometer();
      assertEquals(15, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDestructThrowsNullPointerException() throws Throwable  {
      // Arrange
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("?\"}x',n@fZZ=c)", (-2546), scoreKeeper);
      
      // Act
      try {
      robot.destruct();
      fail("Expected exception not thrown");
      } catch (NullPointerException e) {
      // Assert
      assertEquals("NullPointerException not thrown", e.getMessage());}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShieldReturningNull() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a null name and an ID of 0
      Robot robot = new Robot(null, 0, scoreKeeper);
      
      // Call the getShield method on the robot
      robot.getShield();
      
      // Assert that the robot's ID is 0
      assertEquals(0, robot.getId());
      
      // Assert that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNameReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 2363, arg2);
      robot.getName();
      assertEquals(0, robot.getRoundKills());
      assertEquals(2363, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMineLayer() throws Throwable  {
      // Given a new Robot object with a specific id and score
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", 0, (RobotScore) null);
      
      // When a new MineLayer is set for the Robot
      MineLayer mineLayer = new MineLayer(34);
      robot.setMineLayer(mineLayer);
      
      // Then the Robot's mineLayer should be set to the new MineLayer
      assertEquals(mineLayer, robot.getMineLayer());
      
      // And the Robot's id should be set to 0
      assertEquals(0, robot.getId());
      
      // And the Robot's roundKills should be set to 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretOffsetSensor() throws Throwable  {
      // Create a new RobotScoreKeeper object
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      
      // Create a new Robot object with a null name, -1824 as the id, and the RobotScoreKeeper object as the score keeper
      Robot robot = new Robot((String) null, (-1824), arg2);
      
      // Get the turret offset sensor of the robot
      robot.getTurretOffsetSensor();
      
      // Assert that the round kills of the robot is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the id of the robot is -1824
      assertEquals((-1824), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateMissile() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", (-1364), scoreKeeper);
      AbsoluteAngle angle = AbsoluteAngle.fromBygrees((-1364));
      Position position = new Position();
      
      // When
      robot.createMissile(angle, position, (-1364));
      
      // Then
      assertEquals((-1364), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTurretShiftAndSetTurret() throws Throwable  {
      // Given
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("tkH:", (-3605), scoreKeeper);
      Turret turret = new Turret();
      robot.setTurret(turret);
      
      // When
      robot.getTurretShift();
      
      // Then
      assertEquals((-3605), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      // Given a new robot with a name and score
      Robot robot = new Robot("c>`uS ", 0, (RobotScore) null);
      
      // When the robot is reset
      robot.reset();
      
      // Then the robot's id should be 0
      assertEquals(0, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot should not be overburn
      assertFalse(robot.isOverburn());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRadar() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("|,aB-Q", 386, scoreKeeper);
      
      // Then the robot's radar should be empty
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 386
      assertEquals(386, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComputer() throws Throwable  {
      // Given a robot with a name, id, and score
      Robot robot = new Robot("ohicA^5f*-k4E7E", 1481, (RobotScore) null);
      
      // When the robot's computer is accessed
      robot.getComputer();
      
      // Then the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 1481
      assertEquals(1481, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalTiesReturningZero() throws Throwable  {
      // Given a robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("d", 0, scoreKeeper);
      
      // When the robot's total ties is requested
      int totalTies = robot.getTotalTies();
      
      // Then the total ties should be 0
      assertEquals(0, totalTies);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetShutdownLevelLatchPort() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 3327, arg2);
      robot.getShutdownLevelLatchPort();
      assertEquals(0, robot.getRoundKills());
      assertEquals(3327, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRoundKills() throws Throwable  {
      // Given a new RobotScoreKeeper instance
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot is created with a negative ID
      Robot robot = new Robot("", (-2546), scoreKeeper);
      
      // Then the round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the ID should be the negative ID passed in
      assertEquals((-2546), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMineLayerReturningNull() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a given name, id, and score keeper
      Robot robot = new Robot("", 1, scoreKeeper);
      
      // Then the robot's id should be 1
      assertEquals(1, robot.getId());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHardwareBusReturningNull() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", 1, arg2);
      robot.getHardwareBus();
      assertEquals(1, robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThrottle() throws Throwable  {
      // rollbacked to evosuite
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", 0, (RobotScore) null);
      robot.getThrottle();
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTransponderReturningNull() throws Throwable  {
      // Given: A new RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When: A new Robot object is created with a transponder
      Robot robot = new Robot("", 2247, scoreKeeper);
      
      // Then: The robot's transponder should be set to 0
      assertEquals(0, robot.getTransponder());
      
      // And: The robot's round kills should be set to 0
      assertEquals(0, robot.getRoundKills());
      
      // And: The robot's id should be set to 2247
      assertEquals(2247, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeatSinks() throws Throwable  {
      // Create a new RobotScoreKeeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // Create a new Robot with a negative ID and a copy of the score keeper's score
      Robot robot = new Robot("", (-318), FinalRobotScore.copyOf(scoreKeeper));
      
      // Get the robot's heat sinks
      robot.getHeatSinks();
      
      // Assert that the robot's round kills is 0
      assertEquals(0, robot.getRoundKills());
      
      // Assert that the robot's ID is negative 318
      assertEquals((-318), robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetArmor() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot((String) null, (-1824), arg2);
      Armor arg0 = new Armor(8);
      robot.setArmor(arg0);
      robot.getArmor();
      assertEquals((-1824), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalDeathsReturningZero() throws Throwable  {
      // Given a robot with an id of 1 and a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 1, scoreKeeper);
      
      // When the robot's total deaths are retrieved
      int totalDeaths = robot.getTotalDeaths();
      
      // Then the total deaths should be 0
      assertEquals(0, totalDeaths);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDesiredHeading() throws Throwable  {
      // Given
      Robot robot = new Robot("net.virtualinfinity.atrobots.robot.Robot$4", 0, (RobotScore) null);
      
      // When
      robot.getDesiredHeading();
      
      // Then
      assertEquals(0, robot.getRoundKills());
      assertEquals(0, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHeading() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("net.virtualinfinity.atrobots.computer.Computer$ErrorHandler", (-1431), arg2);
      robot.getHeading();
      assertEquals((-1431), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRobotListener() throws Throwable  {
      // Given: A new robot with a score keeper
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      Robot robot = new Robot("", 420, scoreKeeper);
      
      // When: The robot ties a round
      robot.addRobotListener(scoreKeeper);
      robot.tieRound();
      
      // Then: The total ties should be 1
      assertEquals(1, robot.getTotalTies());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSpeed() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a speed of 7
      Robot robot = new Robot("", 7, scoreKeeper);
      
      // Then the robot's speed should be 7
      assertEquals(7, robot.getSpeed());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAccept() throws Throwable  {
      // rollbacked to evosuite
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("Okm:bCr<YZ&Eml", 2285, arg2);
      ArenaObjectVisitorAdaptor arg0 = new ArenaObjectVisitorAdaptor();
      robot.accept(arg0);
      assertEquals(0, robot.getRoundKills());
      assertEquals(2285, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAimTurretPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a name, id, and score keeper
      Robot robot = new Robot("]W>vhh", 1779, scoreKeeper);
      
      // Then the robot's aim turret port should be 0
      assertEquals(0, robot.getAimTurretPort());
      
      // And the robot's round kills should be 0
      assertEquals(0, robot.getRoundKills());
      
      // And the robot's id should be 1779
      assertEquals(1779, robot.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLastDamageGiven() throws Throwable  {
      // No Comments were added
      RobotScoreKeeper arg2 = new RobotScoreKeeper();
      Robot robot = new Robot("", (-534), arg2);
      Duration lastDamageGiven = robot.getLastDamageGiven();
      assertEquals(0, lastDamageGiven.getCycles());
      assertEquals((-534), robot.getId());
      assertEquals(0, robot.getRoundKills());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOverburnLatchPort() throws Throwable  {
      // Given a RobotScoreKeeper object
      RobotScoreKeeper scoreKeeper = new RobotScoreKeeper();
      
      // When a new Robot object is created with a specific ID and score keeper
      Robot robot = new Robot("", 2247, scoreKeeper);
      
      // Then the robot's ID and score keeper should be set correctly
      assertEquals(0, robot.getRoundKills());
      assertEquals(2247, robot.getId());
  }
}
